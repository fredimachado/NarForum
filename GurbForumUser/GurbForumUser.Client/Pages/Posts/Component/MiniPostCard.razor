<article id="@Id" class="card mb-4 custom-mini-post">
    <header class="card-header border-0 bg-transparent align-items-center">
        @* <img src="https://via.placeholder.com/30x30"
             class="rounded-circle me-2 custom-mini-post-image align-items-center" /> *@
            @if(Post.UserProfileImageUrl is not null)
            {
                <span class="image-user-profile-post shadow-1-strong me-3">
                    <img src="@Post.UserProfileImageUrl" alt="avatar" width="45"
                         height="45" />
                </span>
            }
            else
            {
                @if(Post.UserId != null) {
                    <span class="no-image-user-profile-post me-3" style="background:#@(Post.UserId.Value.ToString("N").Substring(0,6));">
                        @Username.ToUpper()[0]
                    </span>
                }
                else
                {
                    <span class="no-image-user-profile-post me-3">
                        @Username.ToUpper()[0]
                    </span>
                }
            }
            <span class="custom-mini-post-user-area">
                <a href="/user/@Username" class="fw-semibold text-decoration-none custom-mini-post-username">@(Username != null ? Username : "User")</a>
                @* <span class="user-info-post-number">111 posts</span> *@
            </span>
                @if (IsOP)
                {
                    <span class="badge bg-primary post-badge">OP</span>
                }
            <span @onclick="showChat" class="badge bg-primary post-badge"><i class="bi bi-send-plus-fill"></i></span>
        <span class="ms-3 small text-muted custom-mini-post-date">@Post.DateCreate</span>
    </header>
    <div class="card-body custom-mini-post-content">
        @((MarkupString)Post.DisplayContent)
    </div>
    <footer class="card-footer custom-mini-post-footer border-0 py-1 px-3">
        <button type="button"
                @onclick="like"
                class="btn btn-link btn-sm text-decoration-none ps-0">
            @if(Post.IsLike != null && Post.IsLike.Value)
            {
                <i class="bi bi-hand-thumbs-up-fill me-1"></i>
            }
            else
            {
                <i class="bi bi-hand-thumbs-up me-1"></i>
            }
            @Post.LikeCounter
        </button>
        <button type="button"
                @onclick="unlike"
                class="btn btn-link btn-sm text-decoration-none ps-0">
            @if (Post.IsLike != null && Post.IsLike.Value == false)
            {
                <i class="bi bi-hand-thumbs-down-fill me-1"></i>
            }
            else
            {
                <i class="bi bi-hand-thumbs-down me-1"></i>
            }
            @Post.UnlikeCounter
        </button>
        @if (!Heading.IsLock)
        {
            <button type="button"
                    @onclick="reply"
                    class="btn btn-link btn-sm text-decoration-none">
                <i class="bi bi-reply"></i> Reply
            </button>
        }
        <button type="button"
                @onclick="report"
                class="btn btn-link btn-sm text-decoration-none post-report-button">
            <i class="bi bi-exclamation-triangle-fill"></i>
        </button>
        <button type="button"
                @onclick="favorite"
                class="btn btn-light btn-sm border rounded-4 ms-2 post-favorite-button">
            @if (Post.IsFavorite)
            {
                <i class="bi bi-star-fill"></i>
            }
            else
            {
                <i class="bi bi-star"></i>
            }
             Add Favorites
        </button>
    </footer>
</article>

@code {
    [Parameter]
    public bool IsOP { get; set; }

    [Parameter]
    public Guid PostId { get; set; }

    [Parameter]
    public Guid Id { get; set; } = Guid.Empty;

    [Parameter]
    public string Username { get; set; } = "User";

    [Parameter]
    public string Content { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<Guid> LikeCallback { get; set; }

    [Parameter]
    public EventCallback<Guid> UnLikeCallback { get; set; }

    [Parameter]
    public EventCallback<Guid> AddFavoriteCallback { get; set; }

    [Parameter]
    public EventCallback<PostVM> ReplyCallback { get; set; }

    [Parameter]
    public EventCallback<string> OpenChatCallback { get; set; }

    [Parameter]
    public EventCallback<PostVM> ReportCallback { get; set; }

    [Parameter]
    public PostVM Post { get; set; }

    [Parameter]
    public HeadingVM Heading { get; set; }
    protected async Task like()
    {
        await LikeCallback.InvokeAsync(PostId);
    }

    protected async Task unlike()
    {
        await UnLikeCallback.InvokeAsync(PostId);
    }

    protected async Task favorite()
    {
        await AddFavoriteCallback.InvokeAsync(PostId);
    }

    protected async Task reply()
    {
        await ReplyCallback.InvokeAsync(Post);
    }

    protected async Task report()
    {
        await ReportCallback.InvokeAsync(Post);
    }

    protected async Task showChat()
    {
        await OpenChatCallback.InvokeAsync(Username);
    }
}
