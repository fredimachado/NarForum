<h3 class="user-headings">Headings</h3>

@if(Headings != null)
{
    @foreach (var heading in Headings)
    {
        <HeadingCard Model="heading" CategoryUrl="@(heading.CategoryName.ToFriendlyUrl() + "-" + heading.CategoryIntId)" IsBasic=true></HeadingCard>
    }
    @* <Pagination TotalPages="@TotalPages" CurrentPage="@CurrentPage" BaseUrl="@getBaseUrl()" /> *@
    <Pagination UseCallback=true TotalPages="@TotalPages" CurrentPage="@CurrentPage" BaseUrl="@getBaseUrl()" PageChanged="OnPageChanged" />
}

@code {

    [Parameter]
    public UserInfoVM UserInfo { get; set; }

    [Inject]
    public IHeadingService HeadingService { get; set; }

    public List<HeadingVM>? Headings { get; set; }


    private string getBaseUrl()
    {
        return $"category/";
    }

    // Pagination variables
    private int PageSize = 10; // Number of items per page
    private int TotalPages = 1;
    private int CurrentPage = 1;

    protected async override Task OnInitializedAsync()
    {
        HeadingsPaginationVM headingsPagination = await HeadingService.GetHeadingsByUserNameWithPagination(UserInfo.UserName, 1, PageSize);
        Headings = headingsPagination.Headings;
        TotalPages = (int)Math.Ceiling((double)headingsPagination.TotalCount / PageSize);
        await InvokeAsync(StateHasChanged);
    }


    private async Task OnPageChanged(int page)
    {
        CurrentPage = page;
        HeadingsPaginationVM headingsPagination = await HeadingService.GetHeadingsByUserNameWithPagination(UserInfo.UserName, page, PageSize);
        Headings = headingsPagination.Headings;
        TotalPages = (int)Math.Ceiling((double)headingsPagination.TotalCount / PageSize);
        await InvokeAsync(StateHasChanged); // Refreshing the UI
    }
}
