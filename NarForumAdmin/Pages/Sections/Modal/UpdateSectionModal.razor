@using NarForumAdmin.Models.Section
@using NarForumAdmin.Services.UI
<Modal @ref="modal" ModalTitle="Update Section" Callback="@HandleUpdate">
    @if (Model is not null)
    {
        <EditForm Model="@Model" OnValidSubmit="HandleUpdate">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label asp-for="Name" class="control-label">Name</label>
                <InputText id="Name" class="form-control" @bind-Value="@Model.Name"></InputText>
                <ValidationMessage For="@(() => Model.Name)" />
            </div>
            <div class="form-group">
                <label asp-for="OrderIndex" class="control-label">Order Index</label>
                <InputNumber id="OrderIndex" class="form-control" @bind-Value="@Model.OrderIndex"></InputNumber>
            </div>
        </EditForm>
    }
</Modal>

@code {
    Modal? modal;

    [Parameter]
    public SectionVM? Model { get; set; }

    [Inject]
    private ISectionService? SectionService { get; set; }

    [Parameter]
    public EventCallback<int> Callback { get; set; }

    protected override void OnInitialized()
    {

    }

    public void ShowModal()
    {
        modal?.ShowModal();
    }

    public void CloseModal()
    {
        modal?.CloseModal();
    }

    protected async Task HandleUpdate()
    {
        @if (!AuthExtension.IsAuth("ADMIN_SECTION_UPDATE"))
        {
            ToastService!.CreateInfoToast("Action Denied", "Your user does not have permissions to update the section.");
            return;
        }

        if (Model is not null && SectionService is not null)
        {
            SectionVM section = new SectionVM
            {
                Id = Model.Id,
                Name = Model.Name,
                OrderIndex = Model.OrderIndex
            };

            var response = await SectionService.UpdateSection(section);

            if (response.IsSuccess)
            {
                ToastService!.CreateSuccessToast("Updated Section", "Section is updated successfully");
                // updated
                if (Callback.HasDelegate)
                {
                    await Callback.InvokeAsync();
                }

                CloseModal();
            }
            else
            {
                ToastService!.CreateErrorToast("Error while updating section", response.Message);
            }
        }
    }
}
