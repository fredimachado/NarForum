@using NarForumAdmin.Models.Enums
@using NarForumAdmin.Models.Image
@inject IUserService? userService;
@inject IImageService? imageService;
@inject IConfiguration Configuration;
@inject HttpClient Http


<Modal @ref="modal" ModalTitle="Add Image" Callback="@HandleAdd" ModalButtonText="Add Image or Images" MaxWidth="none">
    @if(Model is not null && Model.IsFromServer)
    {
        <div class="row">
            <div class="col-sm-6">
                <button class="user-settings-button float-none w-100 mt-3 mb-2">
                    <InputFile class="unvisible-input-file" OnChange="LoadFile"></InputFile><i class="bi bi-image"></i> Load image File from your device
                </button>
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-sm-12 image-gallery">
                @if (availableImages is not null && availableImages.Count > 0)
                {
                    @foreach (var img in availableImages)
                    {
                        <img width="120" @onclick="() => SelectImage(img)" height="70" class="image-gallery-item @(selectedImages.Contains(img) ? "selected" : "")" src="@getImgUrl(img)" />
                    }
                }
                
            </div>
        </div>
    }
    else
    {
        
    }
</Modal>


@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    Modal? modal;
    AddImageModelVM? Model { get; set; }

    UploadImageRequestVM request { get; set; }

    private List<string> imageGallery { get; set; } = new List<string>();

    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 5;
    private int maxFiles = 1;
    private bool isLoading;

    string? userId;

    List<string> availableImages = new List<string>();

    List<string> selectedImages = new List<string>();

    public void ShowModal()
    {
        modal?.ShowModal();
    }

    public void CloseModal()
    {
        modal?.CloseModal();
    }

    [Parameter]
    public EventCallback<List<string>> Callback { get; set; }

    protected override void OnInitialized()
    {
        Model = new AddImageModelVM
        {
            IsFromServer = true
        };

        base.OnInitialized();
    }

    protected async override Task OnInitializedAsync()
    {
        if (userService is not null)
        {
            if (authenticationStateTask is not null)
            {
                var authState = await authenticationStateTask;

                if (authState is not null)
                {
                    var user = authState.User;

                    if (user is not null && user.Identity is not null && user.Identity.IsAuthenticated)
                    {
                        var userName = user.Identity.Name;

                        var userInfo = await userService.GetUserInfo(userName);
                        userId = userInfo.Id;

                        if(userId is not null)
                        {
                            await GetGalleryImages(userId);
                        }
                    }
                }
            }
        }

        await base.OnInitializedAsync();
    }

    private string getImgUrl(string imgName)
    {
        return $"{Configuration["ApiBaseUrl"]}/file/images/user-gallery/{userId}/{imgName}";
    }

    protected async Task GetGalleryImages(string userId)
    {
        if (imageService is not null)
        {
            availableImages.Clear();

            imageGallery = await imageService.GetImageUrlsFromGallery(userId, null);

            foreach (var image in imageGallery)
            {
                bool isImageAvailable = await UrlExists($"{Configuration["ApiBaseUrl"]}/file/images/user-gallery/{userId}/{image}");
                availableImages.Add(image);
            }
        }
    }

    private async Task<bool> UrlExists(string url)
    {
        try
        {
            var response = await Http.GetAsync(url);
            return response.IsSuccessStatusCode;
        }
        catch
        {
            return false;
        }
    }

    protected async Task HandleAdd()
    {
        if(Callback.HasDelegate)
        {
            List<string> urlList = new List<string>();

            foreach(var img in selectedImages)
            {
                urlList.Add(getImgUrl(img));
            }
            CloseModal();
            await Callback.InvokeAsync(urlList);
        }
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        @if (!AuthExtension.IsAuth("ADMIN_FILE_UPLOAD"))
        {
            ToastService!.CreateInfoToast("Action Denied", "Your user does not have permissions to upload files.");
            return;
        }

        request = new UploadImageRequestVM
        {
           Type = UploadImageTypeVM.Gallery,
           UserId = new Guid(userId),
        };
        request.FilesBase64 = new List<ImageBase64VM>();

        isLoading = true;

        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxFiles))
        {
            try
            {
                loadedFiles.Add(file);
            }
            catch (Exception ex)
            {
            //
            }
        }

        if (loadedFiles.Count > 0)
        {
            foreach(var file in loadedFiles)
            {
                await using MemoryStream fs = new MemoryStream();
                await file.OpenReadStream(maxAllowedSize: 1048576).CopyToAsync(fs);
                byte[] somBytes = GetBytes(fs);

                ImageBase64VM imageBase64 = new ImageBase64VM
                {
                    Base64 = Convert.ToBase64String(somBytes, 0, somBytes.Length),
                    FileName = file.Name,
                    ContentType = file.ContentType
                };

                request.FilesBase64.Add(imageBase64);
            }
        }

        if(imageService is not null && request.FilesBase64.Count > 0)
        {
            var response = await imageService.UploadImageToServer(request);

            if(response.IsSuccess)
            {
                await GetGalleryImages(userId);
            }
        }

        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }


    public static byte[] GetBytes(Stream stream)
    {
        var bytes = new byte[stream.Length];
        stream.Seek(0, SeekOrigin.Begin);
        stream.ReadAsync(bytes, 0, bytes.Length);
        stream.Dispose();
        return bytes;
    }

    private void SelectImage(string image)
    {
        if(selectedImages.Contains(image))
        {
            selectedImages.Remove(image);
        }
        else
        {
            selectedImages.Add(image);
        }
    }
}
