@page "/category/list"
@using NarForumAdmin.Pages.Category.Modal

<h3>Category List</h3>

<CategoryFilter QueryModel="query" Callback="RefreshListFilter"></CategoryFilter>

<table class="table table-bordered table-hover caption-top forum-table">
    <caption>List of categories</caption>
    <thead>
        <tr>
            <th style="width:20%">Title</th>
            <th class="text-end" style="width:7%">Headings</th>
            <th class="text-end" style="width:7%">Posts</th>
            <th style="width:30%">Description</th>
            <th style="width:10%">Active Date</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @if (!isLoaded)
        {
            <p>Loading Data...</p>
        }
        else
        {
            @foreach (var category in Categories)
            {
                <tr>
                    <td class="align-middle">
                        <div class="cell-content">
                            <div class="flex-fill">
                                @category.Id
                            </div>
                            <div class="align-middle">
                                @category.Name
                            </div>
                        </div>
                    </td>
                    <td class="align-middle text-end">@category.HeadingCounter</td>
                    <td class="align-middle text-end">@category.PostCounter</td>
                    <td class="align-middle">@category.Description</td>
                    <td class="align-middle">@category.ActiveDate</td>
                    <td class="text-end align-middle">
                        <button type="button" class="btn btn-warning" @onclick="() => UpdateCategory(category)"><i class="bi bi-pencil-square"></i></button>
                        <button type="button" class="btn btn-primary" @onclick="() => DetailCategory(category)"><i class="bi bi-card-text"></i></button>
                        <button type="button" class="btn btn-danger" @onclick="() => DeleteCategory(category)"><i class="bi bi-trash"></i></button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@if (isLoaded)
{
    <Pagination UseCallback="true" TotalPages="@TotalPages" CurrentPage="@CurrentPage" PageChanged="PageChanged" />
}

<UpdateCategoryModal @ref=updateCategoryModal Model="SelectedModel" Callback="RefreshList"></UpdateCategoryModal>
<DetailCategoryModal @ref=detailCategoryModal Model="SelectedModel"></DetailCategoryModal>
<ConfirmModal @ref=deleteCategoryModal Callback="DeleteCategoryCallback" ModalTitle="Remove Confirmation" MessageContent="Are you sure you want to remove this category?"></ConfirmModal>

@code {
    [Parameter]
    public int PageIndex { get; set; } = 1;

    public List<CategoryVM>? Categories { get; set; }

    [Inject]
    public ICategoryService CategoryService { get; set; }

    // Pagination variables
    private int PageSize = 10; // Number of items per page
    private int TotalPages = 1;
    private int CurrentPage = 1;

    private bool isLoaded { get; set; }

    CategoriesPaginationQueryVM query = new CategoriesPaginationQueryVM();

    UpdateCategoryModal? updateCategoryModal;
    DetailCategoryModal? detailCategoryModal;
    ConfirmModal? deleteCategoryModal;
    private CategoryVM? SelectedModel { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        if (PageIndex == 0) PageIndex = 1;
        CurrentPage = PageIndex;

        query = new CategoriesPaginationQueryVM
        {
            PageIndex = PageIndex,
            PageSize = PageSize
        };

        CategoriesPaginationVM categoriesPagination = await CategoryService.GetCategoriesWithPagination(query);
        Categories = categoriesPagination.Categories;
        TotalPages = (int)Math.Ceiling((double)categoriesPagination.TotalCount / PageSize);

        isLoaded = true;
    }

    protected async Task RefreshList()
    {
        CategoriesPaginationVM categoriesPagination = await CategoryService.GetCategoriesWithPagination(query);
        Categories = categoriesPagination.Categories;
        TotalPages = (int)Math.Ceiling((double)categoriesPagination.TotalCount / PageSize);

        isLoaded = true;
        await InvokeAsync(StateHasChanged);
    }

    protected async Task RefreshListFilter()
    {
        query.PageIndex = 1;
        CurrentPage = 1;

        await RefreshList();
    }


    protected async Task PageChanged(int currentPage)
    {
        query.PageIndex = currentPage;
        CurrentPage = currentPage;
        await RefreshList();
    }

    private void UpdateCategory(CategoryVM categoryVM)
    {
        SelectedModel = categoryVM;

        updateCategoryModal?.ShowModal();
    }

    private void DetailCategory(CategoryVM categoryVM)
    {
        SelectedModel = categoryVM;

        detailCategoryModal?.ShowModal();
    }

    private void DeleteCategory(CategoryVM categoryVM)
    {
        SelectedModel = categoryVM;
        deleteCategoryModal?.ShowModal();
    }

    protected async Task DeleteCategoryCallback()
    {
        if(SelectedModel is not null)
        {
            RemoveCategoryCommandVM command = new RemoveCategoryCommandVM
                {
                    CategoryId = SelectedModel.Id
                };

            await CategoryService.RemoveCategory(command);
            await RefreshList();
            deleteCategoryModal?.CloseModal();
        }
    }
}
