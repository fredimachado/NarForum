<Modal @ref="modal" ModalId="updatePermissionDefinitionModal" ModalTitle="Update Blog Category" Callback="@HandleRegister" CloseCallback="@CloseModal">
    <EditForm Model="@Model" OnValidSubmit="HandleRegister">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label asp-for="Name" class="control-label">Blog Category Name</label>
            <InputText id="Name" class="form-control" @bind-Value="@Model.Name" autocomplete="off" placeholder="Blog Category Name"></InputText>
            <ValidationMessage For="@(() => Model.Name)" />
        </div>
    </EditForm>
</Modal>


@code {
    Modal? modal;

    public UpdateBlogCategoryCommandVM? Model { get; set; }

    [Inject]
    private IBlogCategoryService? BlogCategoryService { get; set; }

    [Parameter]
    public EventCallback<int> Callback { get; set; }

    [Parameter]
    public UpdateBlogCategoryCommandVM? UpdateModel { get; set; }


    private bool isUpdate = false;

    protected override void OnInitialized()
    {
        Model = new UpdateBlogCategoryCommandVM();
    }

    protected override void OnParametersSet()
    {
        if(UpdateModel is not null)
        {
            Model.Name = UpdateModel.Name;
            Model.Id = UpdateModel.Id;
        }

        base.OnParametersSet();
    }


    public void ShowModal()
    {
        modal?.ShowModal();
    }

    public void CloseModal()
    {
        isUpdate = false;
        UpdateModel = null;
        Model = new UpdateBlogCategoryCommandVM();
        StateHasChanged();
    }


    protected async Task HandleRegister()
    {
        if (BlogCategoryService is not null && Model is not null)
        {
            ApiResponseVM response = await BlogCategoryService.UpdateBlogCategory(Model);

            if (response.IsSuccess)
            {
                await Callback.InvokeAsync();
                modal?.CloseModal();
            }
            else
            {
                // send error
            }
        }

    }
}

