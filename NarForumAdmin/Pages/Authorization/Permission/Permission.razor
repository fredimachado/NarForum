@using NarForumAdmin.Models.Authorization.Permission
@using NarForumAdmin.Models.Authorization.Role
@using NarForumAdmin.Models.Common

@inject AlertService AlertService

<div class="row">
    <div class="col-sm-6">
        <h3>Permission Management</h3>
    </div>
    <div class="col-sm-4">
        <div class="btn-group text-end" role="group" aria-label="First group">
            <button type="button" class="btn btn-primary" @onclick="RefreshPermissions"><i class="bi bi-arrow-clockwise"></i> Refresh Permissions</button>
        </div>
    </div>
    <div class="col-sm-2">
        <div class="form-group form-margin">
            <EditForm Model="@Model">
                <InputSelect class="form-select" aria-label="Default select example" TValue="string"
                             Value="Model.Id" ValueChanged="OnChangeRole"  ValueExpression="@(() => Model.Id)">
                    @if (Roles != null)
                    {
                        @foreach (var role in Roles)
                        {
                            <option value="@role.Id">@role.Name</option>
                        }
                    }
                    else
                    {
                        <option disabled value="0">Loading...</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Model.Name)" />
            </EditForm>
        </div>
    </div>
</div>

@if(isLoaded)
{
    <TreeView Callback="SaveSelect" Items="Items"></TreeView>
}

@code {
    public RoleVM? Model { get; set; } = new RoleVM();

    public List<PermissionVM> Permissions { get; set; } = new List<PermissionVM>();

    public List<RoleVM>? Roles { get; set; }

    [Inject]
    public IRoleService RoleService { get; set; }

    [Inject]
    public IPermissionService PermissionService { get; set; }


    List<TreeItem> Items { get; set; } = new List<TreeItem>();

    private bool isLoaded;

    protected async override Task OnInitializedAsync()
    {
        var response = await RoleService.GetRoles();

        if (response != null)
        {
            Roles = response.UserRoles;

            if (Roles != null && Roles.Count > 0)
            {
                Model = Roles[0];

                var permissionsResponse = await PermissionService.GetPermissions(Model.Id!);

                if (permissionsResponse != null)
                {
                    Permissions = permissionsResponse.Permissions;
                    WrapPermissionsToTreeItem();
                }
            }
        }

        isLoaded = true;
    }

    private async Task OnChangeRole(string modelId)
    {
        if (Roles != null && Roles.Count > 0)
        {
            Model = Roles.FirstOrDefault(x => x.Id == modelId);

            var permissionsResponse = await PermissionService.GetPermissions(modelId);

            if (permissionsResponse != null)
            {
                Permissions = permissionsResponse.Permissions;
                WrapPermissionsToTreeItem();

                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task RefreshPermissions()
    {
        var response = await PermissionService.RefreshPermissions();

        if(response.IsSuccess)
        {
            var permissionsResponse = await PermissionService.GetPermissions(Model.Id);

            if (permissionsResponse != null)
            {
                Permissions = permissionsResponse.Permissions;
                WrapPermissionsToTreeItem();

                await InvokeAsync(StateHasChanged);
            }
        }
        else
        {
            AlertService.ShowAlert(response.Message);
        }
    }

    private void WrapPermissionsToTreeItem()
    {
        Items.Clear();

        List<TreeItem> TempList = new List<TreeItem>();

        foreach (var permission in Permissions)
        {
            TreeItem newItem = new TreeItem
            {
                Id = permission.Id,
                ParentId = permission.ParentPermissionId,
                Name = permission.Name,
                IsSelected = permission.IsGranted,
                DisplayName = permission.DisplayName,
                IsExpanded = true,
            };
            TempList.Add(newItem);
        }


        foreach (var item in TempList)
        {
            var children = TempList.Where(x => x.ParentId == item.Id).ToList();

            if(children.Any())
            {
                item.Children.AddRange(children);
            }
        }

        foreach(var item in TempList)
        {
            item.Children = item.Children.OrderBy(x => x.Name).ToList();
        }

        Items = TempList.Where(x => x.ParentId == null).OrderBy(x => x.Name).ToList();
    }

    private async Task SaveSelect(string permissionId)
    {
        @if (!AuthExtension.IsAuth("ADMIN_AUTHORIZATION_PERMISSION_STATUS_CHANGE"))
        {
            ToastService!.CreateInfoToast("Action Denied", "Your user does not have permissions to change the permission status");
            return;
        }

        var response = await PermissionService.ChangePermissionStatus(permissionId);

        if(response.IsSuccess)
        {
            ToastService!.CreateSuccessToast("Changed Permission Status", "The permission status is changed successfully");
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            ToastService!.CreateErrorToast("Error while changing permission status", response.Message);
            AlertService.ShowAlert(response.Message);
        }
    }

    private void Toggle(TreeItem item)
    {
        item.IsExpanded = !item.IsExpanded;
    }
}