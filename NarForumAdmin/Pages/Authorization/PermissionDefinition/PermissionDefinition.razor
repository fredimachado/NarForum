@using NarForumAdmin.Models.Authorization.Permission
@using NarForumAdmin.Models.Authorization.Role
@using NarForumAdmin.Models.Common

@inject AlertService AlertService

<div class="row">
    <div class="col-sm-6">
        <h3>Permission Definition Management</h3>
    </div>
    <div class="col-sm-4">
        <div class="btn-group" role="group" aria-label="First group">
            <button type="button" class="btn btn-primary" @onclick="OpenAddPermissionDefinitionModal">Add Permission Definition</button>
        </div>
    </div>
    <div class="col-sm-2">
        <div class="form-group form-margin">
           
        </div>
    </div>
</div>

@if (isLoaded)
{
    <DefinitionTreeView Callback="SaveSelect" AddCallback="AddPermissionDefinition" UpdateCallback="UpdatePermissionDefinition" RemoveCallback="RemovePermissionDefinition" Items="Items"></DefinitionTreeView>
}

<AddPermissionDefinitionModal @ref=addPermissionDefinitionModal Callback="RefreshPermissionDefinitions"></AddPermissionDefinitionModal>

<ConfirmModal @ref=deletePermissionDefinitionModal Callback="DeletePermissionDefinition" ModalTitle="Remove Confirmation" MessageContent="Are you sure you want to remove this permission definition?"></ConfirmModal>

@code {
    AddPermissionDefinitionModal? addPermissionDefinitionModal;
    ConfirmModal? deletePermissionDefinitionModal;

    public RoleVM? Model { get; set; } = new RoleVM();



    public List<PermissionDefinitionVM>? PermissionDefinitions { get; set; } = new List<PermissionDefinitionVM>();

    [Inject]
    public IPermissionService PermissionService { get; set; }

    List<TreeItem> Items { get; set; } = new List<TreeItem>();

    private bool isLoaded;

    private string? deletePermissionDefinitionId;

    protected async override Task OnInitializedAsync()
    {
        var permissionDefinitionResponse = await PermissionService.GetPermissionDefinitions();

        if (permissionDefinitionResponse != null)
        {
            PermissionDefinitions = permissionDefinitionResponse.PermissionDefinitions;
            WrapPermissionsToTreeItem();
        }

        isLoaded = true;
    }


    private async Task RefreshPermissions()
    {
        var response = await PermissionService.RefreshPermissions();

        if (response.IsSuccess)
        {
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            AlertService.ShowAlert(response.Message);
        }
    }



    private async Task RefreshPermissionDefinitions ()
    {
        var permissionDefinitionResponse = await PermissionService.GetPermissionDefinitions();

        if (permissionDefinitionResponse != null)
        {
            PermissionDefinitions = permissionDefinitionResponse.PermissionDefinitions;
            WrapPermissionsToTreeItem();
        }
        await InvokeAsync(StateHasChanged);
    }

    private void WrapPermissionsToTreeItem()
    {
        Items.Clear();

        List<TreeItem> TempList = new List<TreeItem>();

        foreach (var permission in PermissionDefinitions)
        {
            TreeItem newItem = new TreeItem
            {
                Id = permission.Id,
                ParentId = permission.ParentPermissionDefinitionId,
                Name = permission.Name,
                DisplayName = permission.DisplayName,
                IsExpanded = true,
            };
            TempList.Add(newItem);
        }


        foreach (var item in TempList)
        {
            var children = TempList.Where(x => x.ParentId == item.Id).ToList();

            if (children.Any())
            {
                item.Children.AddRange(children);
            }
        }

        Items = TempList.Where(x => x.ParentId == null).ToList();
    }

    private async Task SaveSelect(string permissionId)
    {
        var response = await PermissionService.ChangePermissionStatus(permissionId);

        if (response.IsSuccess)
        {
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            AlertService.ShowAlert(response.Message);
        }
    }

    private async Task AddPermissionDefinition(string parentPermissionDefinitionId)
    {
        addPermissionDefinitionModal.SelectedParentModelId = parentPermissionDefinitionId;
        addPermissionDefinitionModal!.ShowModal();
    }

    private async Task UpdatePermissionDefinition(string permissionDefinitionId)
    {
        var permissionDefinition = PermissionDefinitions.FirstOrDefault(x => x.Id == permissionDefinitionId);

        addPermissionDefinitionModal.UpdateModel = new UpdatePermissionDefinitionRequestVM
        {
            ParentPermissionDefinitionId = permissionDefinition.ParentPermissionDefinitionId,
            DisplayName = permissionDefinition.DisplayName,
            Name = permissionDefinition.Name,
            PermissionDefinitionId = permissionDefinition.Id
        };

        addPermissionDefinitionModal!.ShowModal();
    }

    private async Task RemovePermissionDefinition(string permissionDefinitionId)
    {
        deletePermissionDefinitionId = permissionDefinitionId;
        deletePermissionDefinitionModal.ShowModal();
    }

    private void Toggle(TreeItem item)
    {
        item.IsExpanded = !item.IsExpanded;
    }

    private void OpenAddPermissionDefinitionModal ()
    {
        addPermissionDefinitionModal!.ShowModal();
    }

  

    protected async Task DeletePermissionDefinition()
    {
        DeletePermissionDefinitionRequestVM request = new DeletePermissionDefinitionRequestVM
        {
            PermissionDefinitionId = deletePermissionDefinitionId,
        };

        var response = await PermissionService.DeletePermissionDefinition(request);

        if (response.IsSuccess)
        {
            // throw toast
            await RefreshPermissionDefinitions();
            deletePermissionDefinitionModal.CloseModal();
        }
        else
        {
            AlertService.ShowAlert(response.Message);
        }

        deletePermissionDefinitionId = null;
    }
}
