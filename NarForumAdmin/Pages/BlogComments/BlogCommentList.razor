@page "/blog/comments"
@using NarForumAdmin.Models.BlogComment
@using NarForumAdmin.Pages.BlogComments.Modal
<h3>Blog Comments</h3>

<BlogCommentFilter QueryModel="query" Callback="RefreshListFilter"></BlogCommentFilter>

<table class="table table-bordered table-hover caption-top forum-table">
    <caption>List of Blog Posts</caption>
    <thead>
        <tr>
            <th class="col-2" scope="col">Member</th>
            <th class="col-8" scope="col">Comment</th>
            <th class="col-2" scope="col">Action</th>
        </tr>
    </thead>
    <tbody>
        @if (!isLoaded)
        {
            <p>Loading Data...</p>
        }
        else
        {
            @foreach (var blogComment in BlogComments)
            {
                <tr>
                    <td class="align-middle">@blogComment.UserName</td>
                    <td class="align-middle">@blogComment.Content</td>
                    <td class="text-end align-middle">
                        <button type="button" class="btn btn-primary" @onclick="() => DetailBlogComment(blogComment)"><i class="bi bi-card-text"></i></button>
                        <button type="button" class="btn btn-danger" @onclick="() => DeleteBlogComment(blogComment)"><i class="bi bi-trash"></i></button>
                    </td>
                </tr>
            }
        }

    </tbody>
</table>

@if (isLoaded)
{
    <Pagination UseCallback="true" TotalPages="@TotalPages" CurrentPage="@CurrentPage" PageChanged="PageChanged" />
}

<ConfirmModal @ref=deleteBlogCommentModal Callback="DeleteBlogCommentCallback" ModalTitle="Remove Confirmation" MessageContent="Are you sure you want to remove this blog comment?"></ConfirmModal>
<DetailBlogCommentModal @ref=detailBlogCommentModal Model="SelectedModel"></DetailBlogCommentModal>

@code {
    [Parameter]
    public int PageIndex { get; set; } = 1;


    public List<BlogCommentVM>? BlogComments { get; set; }

    [Inject]
    public IBlogCommentService BlogCommentService { get; set; }

    // Pagination variables
    private int PageSize = 10; // Number of items per page
    private int TotalPages = 1;
    private int CurrentPage = 1;

    private bool isLoaded { get; set; }

    GetBlogCommentsWithPaginationQueryVM query = new GetBlogCommentsWithPaginationQueryVM();

    ConfirmModal? deleteBlogCommentModal;
    DetailBlogCommentModal? detailBlogCommentModal;
    private BlogCommentVM? SelectedModel { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        if (PageIndex == 0) PageIndex = 1;
        CurrentPage = PageIndex;

        query = new GetBlogCommentsWithPaginationQueryVM
            {
                PageIndex = PageIndex,
                PageSize = PageSize
            };

        BlogCommentsPaginationVM blogCommentsPaginationVM = await BlogCommentService.GetBlogCommentsWithPagination(query);
        BlogComments = blogCommentsPaginationVM.BlogComments;
        TotalPages = (int)Math.Ceiling((double)blogCommentsPaginationVM.TotalCount / PageSize);

        isLoaded = true;
    }

    protected async Task RefreshList()
    {
        BlogCommentsPaginationVM blogCommentsPaginationVM = await BlogCommentService.GetBlogCommentsWithPagination(query);
        BlogComments = blogCommentsPaginationVM.BlogComments;
        TotalPages = (int)Math.Ceiling((double)blogCommentsPaginationVM.TotalCount / PageSize);

        isLoaded = true;
        await InvokeAsync(StateHasChanged);
    }

    protected async Task RefreshListFilter()
    {
        query.PageIndex = 1;
        CurrentPage = 1;

        await RefreshList();
    }


    protected async Task PageChanged(int currentPage)
    {
        query.PageIndex = currentPage;
        CurrentPage = currentPage;
        await RefreshList();
    }

    protected async Task DetailBlogComment(BlogCommentVM blog)
    {
        SelectedModel = blog;

        detailBlogCommentModal?.ShowModal();
    }

    private void DeleteBlogComment(BlogCommentVM blogComment)
    {
        SelectedModel = blogComment;
        deleteBlogCommentModal?.ShowModal();


    }

    protected async Task DeleteBlogCommentCallback()
    {
        if(SelectedModel is not null)
        {
            RemoveBlogCommentCommandVM command = new RemoveBlogCommentCommandVM
            {
                Id = SelectedModel.Id
            };

            var response = await BlogCommentService.RemoveBlogComment(command);
            if (response.IsSuccess)
            {
                ToastService!.CreateSuccessToast("Removed Blog Comment", "Blog Comment is removed successfully");
                await RefreshList();
                deleteBlogCommentModal?.CloseModal();
            }
            else
            {
                ToastService!.CreateErrorToast("Error while removing blog comment", response.Message);
            }
        }
        
    }
}