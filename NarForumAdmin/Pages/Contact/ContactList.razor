@page "/contact/list"
@using NarForumAdmin.Models.Contact
@using NarForumAdmin.Pages.Contact.Filter
@using NarForumAdmin.Pages.Contact.Modal
<h3>Reports</h3>

<ContactFilter QueryModel="query" Callback="RefreshListFilter"></ContactFilter>

<table class="table table-bordered table-hover caption-top forum-table">
    <caption>List of Contacts</caption>
    <thead>
        <tr>
            <th class="col-3" scope="col">Subject</th>
            <th class="col-2" scope="col">Type</th>
            <th class="col-2" scope="col">Email</th>
            <th class="col-2" scope="col">Name Surname</th>
            <th class="col-3" scope="col">Action</th>
        </tr>
    </thead>
    <tbody>
        @if (!isLoaded)
        {
            <p>Loading Data...</p>
        }
        else
        {
            @foreach (var contact in Contacts)
            {
                <tr>
                    <td class="align-middle">@contact.Subject</td>
                    <td class="align-middle">@contact.Type</td>
                    <td scope="row" class="align-middle">@contact.Email</td>
                    <td class="align-middle">@contact.NameSurname</td>
                    <td class="text-end align-middle">
                        <button type="button" class="btn btn-primary" @onclick="() => DetailContact(contact)"><i class="bi bi-card-text"></i></button>
                        <button type="button" class="btn btn-danger" @onclick="() => DeleteContact(contact)"><i class="bi bi-trash"></i></button>
                    </td>
                </tr>
            }
        }

    </tbody>
</table>

@if (isLoaded)
{
    <Pagination UseCallback="true" TotalPages="@TotalPages" CurrentPage="@CurrentPage" PageChanged="PageChanged" />
}
<DetailContactModal @ref=detailContactModal Model="SelectedModel" Callback="RefreshList"></DetailContactModal>
<ConfirmModal @ref=deleteContactModal Callback="DeleteContactCallback" ModalTitle="Remove Confirmation" MessageContent="Are you sure you want to remove this contact?"></ConfirmModal>

@code {
    [Parameter]
    public int PageIndex { get; set; } = 1;


    public List<ContactVM>? Contacts { get; set; }

    [Inject]
    public IContactService ContactService { get; set; }

    // Pagination variables
    private int PageSize = 10; // Number of items per page
    private int TotalPages = 1;
    private int CurrentPage = 1;

    private bool isLoaded { get; set; }

    GetContactsWithPaginationQueryVM query = new GetContactsWithPaginationQueryVM();

    DetailContactModal? detailContactModal;
    ConfirmModal? deleteContactModal;
    private ContactVM? SelectedModel { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        if (PageIndex == 0) PageIndex = 1;
        CurrentPage = PageIndex;

        query = new GetContactsWithPaginationQueryVM
        {
            PageIndex = PageIndex,
            PageSize = PageSize
        };

        ContactsPaginationVM contactsPagination = await ContactService.GetContactsWithPagination(query);
        Contacts = contactsPagination.Contacts;
        TotalPages = (int)Math.Ceiling((double)contactsPagination.TotalCount / PageSize);

        isLoaded = true;
    }

    protected async Task RefreshList()
    {
        ContactsPaginationVM contactsPagination = await ContactService.GetContactsWithPagination(query);
        Contacts = contactsPagination.Contacts;
        TotalPages = (int)Math.Ceiling((double)contactsPagination.TotalCount / PageSize);

        isLoaded = true;
        await InvokeAsync(StateHasChanged);
    }

    protected async Task RefreshListFilter()
    {
        query.PageIndex = 1;
        CurrentPage = 1;

        await RefreshList();
    }


    protected async Task PageChanged(int currentPage)
    {
        query.PageIndex = currentPage;
        CurrentPage = currentPage;
        await RefreshList();
    }

    private void DetailContact(ContactVM contact)
    {
        SelectedModel = contact;

        detailContactModal?.ShowModal();
    }

    private void DeleteContact(ContactVM contact)
    {
        SelectedModel = contact;
        deleteContactModal?.ShowModal();
    }

    protected async Task DeleteContactCallback()
    {
        if (SelectedModel is not null)
        {
            RemoveContactCommandVM command = new RemoveContactCommandVM
            {
                Id = SelectedModel.Id
            };

            var response = await ContactService.RemoveContact(command);

            if(response.IsSuccess)
            {
                ToastService!.CreateSuccessToast("Removed Contact", "Contact is remvoed successfully");
                await RefreshList();
                deleteContactModal?.CloseModal();
            }
            else
            {
                ToastService!.CreateErrorToast("Error while deleting contact", response.Message);
            }
        }
    }
}