@page "/blog/create/post"
@page "/blog/update/post/{FriendlyUrl}/{BlogPostId:guid}"

@using NarForumAdmin.Models.Component
@using NarForumAdmin.Pages.BlogCategories

@if(isUpdate)
{
    <h3>Update Blog Post</h3>
}
else
{
    <h3>Create Blog Post</h3>
}

<div class="row">
    <div class="col-sm-9">
        <div class="form-group mb-3 mt-3">
            <input type="text" class="form-control" id="blogPostTitle" @bind=@CreateModel.Title placeholder="Title Blog Post">
        </div>
        <div class="form-group mb-3">
            <CreateBlogPostForm @ref=blogPostForm Model="CreateModel" Callback="RefreshPosts"></CreateBlogPostForm>
        </div>
    </div>
    <div class="col-sm-3 create-blog-post-sidebar">
        @if (isUpdate)
        {
            <div class="form-group mb-2 mt-3">
                <button type="button" class="btn btn-primary w-100 text-center" @onclick=UpdateBlogPost>Update</button>
            </div>
        }
        else
        {
            <div class="form-group mb-2 mt-3">
                <button type="button" class="btn btn-primary w-100 text-center" @onclick=CreateNewBlogPost>Create</button>
            </div>
        }
        @if(isUpdate)
        {
            @if(CreateModel.IsDraft)
            {
                <div class="form-group mb-3">
                    <button type="button" class="btn btn-success w-100 text-center" @onclick=PublishBlogPost>Publish</button>
                </div>
            }
            @if(CreateModel.IsPublished)
            {
                <div class="form-group mb-3">
                    <button type="button" class="btn btn-warning w-100 text-center" @onclick=DraftBlogPost>Draft</button>
                </div>
            }
        }
        
        <div class="form-group mb-3">
            <SelectBox @ref=@selectBox 
                Heading="Select Blog Category" 
                SubText="Add Category" 
                SearchText="@searchSelectBox" 
                Labels=CategoryLabels 
                Placeholder="Search Blog Category" 
                SearchLabelCallback="RefreshCategoryLabels" 
                SelectCallback="BlogCategorySelected" 
                SubCallback="OpenAddBlogCategory"
                IsDeleteActive=true
                IsUpdateActive=true
                DeleteCallback="OpenDeleteBlogCategoryConfirmation"
                UpdateCallback="OpenUpdateBlogCategoryModal"></SelectBox>
        </div>
        <div class="form-group mb-3">
            <label for="exampleInputEmail1">Define Url</label>
            <input type="text" class="form-control" id="exampleInputEmail1" placeholder="Define url">
        </div>
    </div>
</div>

<AddBlogCategoryModal @ref=addBlogCategoryModal></AddBlogCategoryModal>
<UpdateBlogCategoryModal @ref=updateBlogCategoryModal UpdateModel="updateBlogCategoryCommand"></UpdateBlogCategoryModal>
<ConfirmModal @ref=removeBlogCategoryModal Callback="DeleteBlogCategory" ModalTitle="Remove Confirmation" MessageContent="Are you sure you want to remove this blog category? If you remove it, the change will be applied to all blog posts related to this category."></ConfirmModal>

@code {
    AddBlogCategoryModal? addBlogCategoryModal;
    UpdateBlogCategoryModal? updateBlogCategoryModal;
    ConfirmModal? removeBlogCategoryModal;


    UpdateBlogCategoryCommandVM? updateBlogCategoryCommand;

    CreateBlogPostForm? blogPostForm;

    UpdateBlogCategoryCommandVM updateBlogCategory = new UpdateBlogCategoryCommandVM();

    BlogPostVM CreateModel = new BlogPostVM();

    [Parameter]
    public Guid? BlogPostId { get; set; }

    [Parameter]
    public string FriendlyUrl { get; set; }

    [Inject]
    public IBlogPostService? BlogPostService { get; set; }
    [Inject]
    public IBlogCategoryService? BlogCategoryService { get; set; }
    [Inject]
    public NavigationManager? NavigationManager { get; set; }

    private string blogPostTitle = string.Empty;

    private string blogPostUrl = string.Empty;

    private List<BlogCategoryVM>? AllCategories;
    private List<SelectLabel> CategoryLabels = new List<SelectLabel>();
    private SelectBox? selectBox;
    private string? searchSelectBox;

    private bool isUpdate { get; set; } = false;

    protected async override Task OnParametersSetAsync()
    {
        if (BlogPostId is not null)
        {
            isUpdate = true;

            var request = new GetBlogPostQueryVM
            {
                Id = BlogPostId.Value
            };

            CreateModel = await BlogPostService!.GetBlogPost(request);

            await InvokeAsync(StateHasChanged);


            if (selectBox is not null && CreateModel.BlogCategory is not null)
            {
                selectBox.SelectedLabelText = CreateModel.BlogCategory.Name;

                SelectLabel selectedLabel = new SelectLabel
                    {
                        Text = CreateModel.BlogCategory.Name,
                        Id = CreateModel.BlogCategory.Id
                    };

                CategoryLabels.Add(selectedLabel);

                await selectBox.SetSelectedLabel(selectedLabel);
            }
        }
        else
        {
            isUpdate = false;
        }
    }

    protected async Task RefreshPosts()
    {

    }

    protected async Task CreateNewBlogPost()
    {
        @if (!AuthExtension.IsAuth("ADMIN_BLOG_POST_CREATE"))
        {
            ToastService!.CreateInfoToast("Action Denied", "Your user does not have permissions to create a new blog post");
            return;
        }

        if (BlogPostService != null)
        {
            CreateBlogPostCommandVM blogPost = new CreateBlogPostCommandVM
            {
                Title = CreateModel.Title,
                Content = CreateModel.Content,
                Url = CreateModel.Url,
                BlogCategoryId = CreateModel.BlogCategoryId,
            };

            ApiResponseVM response = await BlogPostService.CreateBlogPost(blogPost);

            if (response.IsSuccess)
            {
                ToastService!.CreateSuccessToast("Created Blog Post", "Blog Post is created successfully");
                RedirestToList();
            }
            else
            {
                ToastService!.CreateErrorToast("Error", response.Message);
                return;
            }
        }
    }

    protected void OpenDeleteBlogCategoryConfirmation()
    {
        if(removeBlogCategoryModal is not null)
        {
            removeBlogCategoryModal.ShowModal();
        }
    }

    protected async Task DeleteBlogCategory()
    {
        @if (!AuthExtension.IsAuth("ADMIN_BLOG_CATEGORY_DELETE"))
        {
            ToastService!.CreateInfoToast("Action Denied", "Your user does not have permissions to delete the blog category");
            return;
        }

        if (CreateModel.BlogCategoryId is not null)
        {
            RemoveBlogCategoryCommandVM removeCommand = new RemoveBlogCategoryCommandVM
            {
                Id = CreateModel.BlogCategoryId.Value,
            };

            ApiResponseVM response = await BlogCategoryService.RemoveBlogCategory(removeCommand);

            if (response.IsSuccess)
            {
                ToastService!.CreateSuccessToast("Removed Blog Category", "Blog Category is removed successfully");
                RedirestToList();
            }
            else
            {
                ToastService!.CreateErrorToast("Error while removing category", response.Message);
                return;
            }
        }
    }

    protected async Task UpdateBlogCategory()
    {
        @if (!AuthExtension.IsAuth("ADMIN_BLOG_CATEGORY_UPDATE"))
        {
            ToastService!.CreateInfoToast("Action Denied", "Your user does not have permissions to update the blog category");
            return;
        }

        if(CreateModel.BlogCategoryId is not null)
        {
            UpdateBlogCategoryCommandVM removeCommand = new UpdateBlogCategoryCommandVM
            {
                Id = CreateModel.BlogCategoryId.Value,
            };

            // ApiResponseVM response = await BlogCategoryService.RemoveBlogCategory(removeCommand);

            // if (response.IsSuccess)
            // {
            //     RedirestToList();
            // }
            // else
            // {
            //     return;
            // }
        }
    }

    protected void RedirestToList()
    {
        NavigationManager!.NavigateTo("/blog/posts");
    }

    protected async Task UpdateBlogPost()
    {
        @if (!AuthExtension.IsAuth("ADMIN_BLOG_POST_UPDATE"))
        {
            ToastService!.CreateInfoToast("Action Denied", "Your user does not have permissions to update the blog post");
            return;
        }

        if (BlogPostService != null)
        {
            UpdateBlogPostCommandVM updateCommand = new UpdateBlogPostCommandVM
            {
                Id = CreateModel.Id,
                BlogCategoryId = CreateModel.BlogCategoryId,
                Title = CreateModel.Title,
                Content = CreateModel.Content,
                Url = CreateModel.Url
            };

            if (CreateModel.BlogCategoryId == Guid.Empty)
            {
                updateCommand.BlogCategoryId = null;
            }

            ApiResponseVM response = await BlogPostService.UpdateBlogPost(updateCommand);

            if(response.IsSuccess)
            {
                ToastService!.CreateSuccessToast("Updated Blog Post", "The blog post is updated successfully");
                RedirestToList();
            }
            else
            {
                ToastService!.CreateErrorToast("Error while updating blog post", response.Message);
                return;
            }
        }
    }

    protected async Task RefreshCategoryLabels(string? userName)
    {
        GetBlogCategoriesQueryVM request = new GetBlogCategoriesQueryVM();

        request.SearchText = selectBox!.SearchText;

        AllCategories = await BlogCategoryService!.GetBlogCategories(request);

        if(string.IsNullOrEmpty(request.SearchText))
        {
            CategoryLabels = new List<SelectLabel>();
        }
        else
        {
            CategoryLabels = AllCategories.Select(x => new SelectLabel
            {
                IsSelect = false,
                Text = x.Name,
                IntId = x.Id,
                Id = x.Id,
            })
            .ToList();
        }

        await InvokeAsync(StateHasChanged);
    }

    protected async Task BlogCategorySelected()
    {
        if (selectBox is not null)
        {
            if (selectBox.SelectedLabelText is not null)
            {
                SelectLabel selectLabel = selectBox.SelectedLabel!;

                CreateModel.BlogCategoryId = selectLabel.Id;
            }
        }
        await InvokeAsync(StateHasChanged);
    }

    protected void OpenAddBlogCategory()
    {
        if(addBlogCategoryModal is not null)
        {
            addBlogCategoryModal.ShowModal();
        }
    }

    protected async Task OpenUpdateBlogCategoryModal()
    {
        if (selectBox is not null && selectBox.SelectedLabel is not null)
        {
            if (updateBlogCategoryModal is not null)
            {
                updateBlogCategoryCommand = new UpdateBlogCategoryCommandVM
                {
                    Id = selectBox.SelectedLabel.Id,
                    Name = selectBox.SelectedLabel.Text
                };
                await InvokeAsync(StateHasChanged);
                updateBlogCategoryModal.ShowModal();
            }
        }
    }

    protected async Task DraftBlogPost()
    {
        @if (!AuthExtension.IsAuth("ADMIN_BLOG_POST_DRAFT"))
        {
            ToastService!.CreateInfoToast("Action Denied", "Your user does not have permissions to draft the blog post");
            return;
        }

        if (BlogPostService != null)
        {
            DraftBlogPostCommandVM draftCommand = new DraftBlogPostCommandVM
            {
                Id = CreateModel.Id.Value,
            };

            ApiResponseVM response = await BlogPostService.DraftBlogPost(draftCommand);

            if (response.IsSuccess)
            {
                ToastService!.CreateSuccessToast("Draft Blog Post", "The blog post is draft successfully");
                RedirestToList();
            }
            else
            {
                ToastService!.CreateErrorToast("Error  while drafting blog post", response.Message);
                return;
            }
        }
    }

    protected async Task PublishBlogPost()
    {
        @if (!AuthExtension.IsAuth("ADMIN_BLOG_POST_PUBLISH"))
        {
            ToastService!.CreateInfoToast("Action Denied", "Your user does not have permissions to publish the blog post");
            return;
        }

        if (BlogPostService != null)
        {
            PublishBlogPostCommandVM publishCommand = new PublishBlogPostCommandVM
            {
                Id = CreateModel.Id.Value,
                
            };

            ApiResponseVM response = await BlogPostService.PublishBlogPost(publishCommand);

            if (response.IsSuccess)
            {
                ToastService!.CreateSuccessToast("Published Blog Post", "The blog post is published successfully");
                RedirestToList();
            }
            else
            {
                ToastService!.CreateErrorToast("Error while publishing blog post", response.Message);
                return;
            }
        }
    }

}
