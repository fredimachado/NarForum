@using NarForumAdmin.Models.Enums
@using NarForumAdmin.Models.Image
@inject IConfiguration Configuration
@inject HttpClient Http
@inject IImageService imageService;

<div class="row settings-row">
    <div class="col-sm-6">
        <label>Image</label>
    </div>
    <div class="col-sm-6">
        <div class="card">
            <div class="card-body">
                @if (isExistLogo)
                {
                    <img class="card-img-top" src="@logoUrl" />
                }
                else
                {
                    <label>Logo image not found</label>
                }
                <InputFile id="fileupload" class="form-control" OnChange="LoadFile" multiple></InputFile>
            </div>
        </div>
    </div>
</div>

<div class="row settings-row">
    <div class="col-sm-6">
        <label>Image URL</label>
    </div>
    <div class="col-sm-6">
        <div class="input-group mb-3">
            <input type="text" @bind-value="logo.Path" class="form-control" placeholder="Image URL" aria-label="Image URL" aria-describedby="button-addon2">
        </div>
    </div>
</div>

<div class="row settings-row">
    <div class="col-sm-6">
        <label>Logo Name</label>
    </div>
    <div class="col-sm-6">
        <div class="input-group mb-3">
            <input type="text" @bind-value="logo.Text" class="form-control" placeholder="Logo Text" aria-label="Logo Text" aria-describedby="button-addon2">
        </div>
    </div>
</div>

<div class="row settings-row">
    <div class="col-sm-6">
        <label>Logo Alt Text</label>
    </div>
    <div class="col-sm-6">
        <div class="input-group mb-3">
            <input type="text" @bind-value="logo.AltText" class="form-control" placeholder="Logo Alt Text" aria-label="Logo Alt Text" aria-describedby="button-addon2">
        </div>
    </div>
</div>

<div class="row settings-row">
    <div class="col-sm-6">
    </div>
    <div class="col-sm-6 text-end">
        <button class="btn btn-primary" @onclick=SaveLogo>Save</button>
    </div>
</div>


@code {
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 5;
    private int maxFiles = 1;
    private bool isLoading;

    bool isExistLogo { get; set; }
    string logoUrl { get; set; }

    [Inject]
    private AlertService? alertService { get; set; }

    private LogoVM logo { get; set; } = new LogoVM();


    UploadImageRequestVM? request;

    protected async override Task OnInitializedAsync()
    {
        logoUrl = $"{Configuration["ApiBaseUrl"]}/file/images/logo";
        isExistLogo = await UrlExists(logoUrl);

        await base.OnInitializedAsync();
    }


    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        if (!AuthExtension.IsAuth("ADMIN_FILE_UPLOAD"))
        {
            ToastService!.CreateInfoToast("Action Denied", "Your user does not have permission to upload the logo.");
            return;
        }

        request = new UploadImageRequestVM
        {
            Type = UploadImageTypeVM.Logo,
        };

        request.FilesBase64 = new List<ImageBase64VM>();

        isLoading = true;

        loadedFiles.Clear();


        foreach (var file in e.GetMultipleFiles(maxFiles))
        {
            try
            {
                loadedFiles.Add(file);
            }
            catch(Exception ex)
            {
                if(alertService is not null)
                {
                    alertService.ShowAlert(ex.Message);
                }
            }
        }

        if (loadedFiles.Count > 0)
        {
            var file = loadedFiles.FirstOrDefault();
            if(file is not null)
            {
                await using MemoryStream fs = new MemoryStream();
                await file.OpenReadStream(maxAllowedSize: 1048576).CopyToAsync(fs);
                byte[] somBytes = GetBytes(fs);

                ImageBase64VM imageBase64 = new ImageBase64VM
                {
                    Base64 = Convert.ToBase64String(somBytes, 0, somBytes.Length),
                    FileName = file.Name,
                    ContentType = file.ContentType
                };

                request.FilesBase64.Add(imageBase64);
            }
        }

        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    public static byte[] GetBytes(Stream stream)
    {
        var bytes = new byte[stream.Length];
        stream.Seek(0, SeekOrigin.Begin);
        stream.ReadAsync(bytes, 0, bytes.Length);
        stream.Dispose();
        return bytes;
    }

    private async Task<bool> UrlExists(string url)
    {
        try
        {
            var response = await Http.GetAsync(url);
            return response.IsSuccessStatusCode;
        }
        catch
        {
            return false;
        }
    }

    protected async Task SaveLogo()
    {
        isLoading = true;

        if (imageService is not null && request.FilesBase64.Count > 0)
        {
            var response = await imageService.UploadImageToServer(request);

            if (response.IsSuccess)
            {
                isLoading = false;
                ToastService!.CreateSuccessToast("Uploaded Logo", "Logo is uploaded successfully");
            }
            else
            {
                ToastService!.CreateErrorToast("Error while uploading logo", response.Message);
            }
        }

    }


}
