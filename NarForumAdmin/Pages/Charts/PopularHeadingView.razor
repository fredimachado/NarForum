@using System.Globalization;
@using NarForumAdmin.Models.TrackingLog.DTOs
@inject IJSRuntime JS;

<div class="chart-stat-component">


<div class="dashboard-stat-head-area">
    <h3 class="dashboard-stat-title">Popular Headings</h3>
    <SelectDate ChangeTimeCallback="OnChangeTime"
                ChangeDayCallback="OnChangeDayDate"
                ChangeWeekCallback="OnChangeWeekDate"
                ChangeMonthCallback="OnChangeMonthDate"
                ChangeYearCallback="OnChangeYearDate">
    </SelectDate>
</div>

<div class="row">
    <div class="col-sm-12">
        <table class="table table-responsive custom-popular-heading-table">
            <thead class="bg-popular-heading">
                <tr>
                    <th scope="col">Title</th>
                    <th scope="col">Views</th>
                </tr>
            </thead>
            <tbody>
                @if (popularLogs is not null && popularLogs.Count > 0)
                {
                    @foreach (var log in popularLogs)
                    {
                        <tr>
                            @if (settingsVM is not null)
                            {
                                <td class="col-9">@log.Title <a class="link-primary log-link" target="_blank" href="@GetUrl(log)"><i class="bi bi-box-arrow-up-right"></i></a></td>
                            }
                            else
                            {
                                <td class="col-9">@log.Title</td>
                            }
                            <td class="col-3">@log.ViewCounter</td>
                        </tr>
                    }
                } 
                else
                {
                    <tr>
                        <th colspan="4"></th>
                    </tr>     
                }

            </tbody>
        </table>
        @if (isLoaded)
        {
            <Pagination UseCallback="true" TotalPages="@TotalPages" CurrentPage="@CurrentPage" PageChanged="PageChanged" />
        }
    </div>
</div>
</div>

@code {
    private IJSInProcessObjectReference? module;
    private string? ClientTimeZone { get; set; }
    [Inject]
    public ITrackingLogService? TrackingLogService { get; set; }
    [Inject]
    private IForumSettingsService? settingsService { get; set; }
    ForumSettingsVM? settingsVM;
    private string SelectedTime { get; set; } = "Day";

    public List<PopularHeadingDTO> popularLogs { get; set; }

    // Pagination variables
    private int PageSize = 10;
    private int PageIndex = 1;// Number of items per page
    private int TotalPages = 1;
    private int CurrentPage = 1;

    private string GetUrl(PopularHeadingDTO dto)
    {
        if(settingsVM != null) {
            return settingsVM.ForumUrl + dto.URL;
        }

        return "";
    }

    private static int GetWeek
    {
        get
        {
            Calendar calendar = CultureInfo.CurrentCulture.Calendar;
            CalendarWeekRule weekRule = CultureInfo.CurrentCulture.DateTimeFormat.CalendarWeekRule;
            DayOfWeek firstDayOfWeek = CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek;

            int weekNumber = calendar.GetWeekOfYear(DateTime.UtcNow, weekRule, firstDayOfWeek);

            return weekNumber;
        }
    }

    private List<TrackingLogVM>? logs { get; set; }

    GetTrackingLogsWithPaginationQueryVM query = new GetTrackingLogsWithPaginationQueryVM();
    private bool isLoaded { get; set; }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        ClientTimeZone = await JS.InvokeAsync<string>("GetTimeZone");
        logs = new List<TrackingLogVM>();

        if(settingsService != null)
        {
            settingsVM = await settingsService.GetForumSettings();
        }

        if(firstRender)
        {
            if (TrackingLogService is not null)
            {
                query = new GetTrackingLogsWithPaginationQueryVM
                {
                    TrackingType = Models.Enums.TrackingTypeVM.HEADING,
                    TimeZone = ClientTimeZone,
                    DateType = Models.Enums.TrackingLogDateType.DAY,
                    DateTime = DateTime.UtcNow,
                    IncludeTarget = true,

                    PageIndex = PageIndex,
                    PageSize = PageSize,
                };

                TrackingLogsPaginationVM trackingLogsPaginationVM = await TrackingLogService.GetTrackingLogsWithPagination(query);
                TotalPages = (int)Math.Ceiling((double)trackingLogsPaginationVM.TotalCount / PageSize);

                if (trackingLogsPaginationVM.TrackingLogs is not null)
                {
                    popularLogs = ConvertTrackingLogs(trackingLogsPaginationVM.TrackingLogs);
                    isLoaded = true;
                    await InvokeAsync(StateHasChanged);            
                }

            }

            if (settingsService != null)
            {
                settingsVM = await settingsService.GetForumSettings();
            }
        }
    }

    private async void OnChangeTime(string selectedTime)
    {
        SelectedTime = selectedTime;
        if (TrackingLogService is not null)
        {
            query = new GetTrackingLogsWithPaginationQueryVM
            {
                TrackingType = Models.Enums.TrackingTypeVM.HEADING,
                TimeZone = ClientTimeZone,
                IncludeTarget = true,

                PageIndex = PageIndex,
                PageSize = PageSize,
            };

            if (SelectedTime == "Day")
            {
                query.DateType = Models.Enums.TrackingLogDateType.DAY;
                query.DateTime = DateTime.UtcNow;
            }

            if (SelectedTime == "Week")
            {
                query.DateType = Models.Enums.TrackingLogDateType.WEEK;
                query.DateTime = DateTime.SpecifyKind(GetDateFromIsoWeek($"{DateTime.UtcNow.Year.ToString()}-W{GetWeek}"), DateTimeKind.Utc);
            }

            if (SelectedTime == "Month")
            {
                query.DateType = Models.Enums.TrackingLogDateType.MONTH;
                query.DateTime = DateTime.UtcNow;
            }

            if (SelectedTime == "Year")
            {
                query.DateType = Models.Enums.TrackingLogDateType.YEAR;
                query.DateTime = DateTime.UtcNow;
            }

            TrackingLogsPaginationVM trackingLogsPaginationVM = await TrackingLogService.GetTrackingLogsWithPagination(query);
            TotalPages = (int)Math.Ceiling((double)trackingLogsPaginationVM.TotalCount / PageSize);


            if (trackingLogsPaginationVM.TrackingLogs is not null)
            {
                popularLogs = ConvertTrackingLogs(trackingLogsPaginationVM.TrackingLogs);
                isLoaded = true;
                await InvokeAsync(StateHasChanged);
            }

        }
    }

    public async Task OnChangeDayDate(DateTime selectedDay)
    {
        // overrideStart = await GetStartOfWeek(overrideStart);
        if (TrackingLogService is not null)
        {
            query = new GetTrackingLogsWithPaginationQueryVM
            {
                TimeZone = ClientTimeZone,
                TrackingType = Models.Enums.TrackingTypeVM.HEADING,
                DateTime = DateTime.SpecifyKind(selectedDay, DateTimeKind.Utc),
                DateType = Models.Enums.TrackingLogDateType.DAY,
                IncludeTarget = true,

                PageIndex = PageIndex,
                PageSize = PageSize,
            };

            TrackingLogsPaginationVM trackingLogsPaginationVM = await TrackingLogService.GetTrackingLogsWithPagination(query);
            TotalPages = (int)Math.Ceiling((double)trackingLogsPaginationVM.TotalCount / PageSize);


            if (trackingLogsPaginationVM.TrackingLogs is not null)
            {
                popularLogs = ConvertTrackingLogs(trackingLogsPaginationVM.TrackingLogs);
                isLoaded = true;
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    public async Task OnChangeWeekDate(string selectedWeek)
    {
        if (TrackingLogService is not null)
        {
            query = new GetTrackingLogsWithPaginationQueryVM
            {
                TimeZone = ClientTimeZone,
                TrackingType = Models.Enums.TrackingTypeVM.HEADING,
                DateTime = DateTime.SpecifyKind(GetDateFromIsoWeek(selectedWeek), DateTimeKind.Utc),
                DateType = Models.Enums.TrackingLogDateType.WEEK,
                IncludeTarget = true,

                PageIndex = PageIndex,
                PageSize = PageSize,
            };

            TrackingLogsPaginationVM trackingLogsPaginationVM = await TrackingLogService.GetTrackingLogsWithPagination(query);
            TotalPages = (int)Math.Ceiling((double)trackingLogsPaginationVM.TotalCount / PageSize);


            if (trackingLogsPaginationVM.TrackingLogs is not null)
            {
                popularLogs = ConvertTrackingLogs(trackingLogsPaginationVM.TrackingLogs);
                isLoaded = true;
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    public async Task OnChangeMonthDate(DateTime selectedMonth)
    {
        if (TrackingLogService is not null)
        {
            query = new GetTrackingLogsWithPaginationQueryVM
            {
                TimeZone = ClientTimeZone,
                TrackingType = Models.Enums.TrackingTypeVM.HEADING,
                DateTime = DateTime.SpecifyKind(selectedMonth, DateTimeKind.Utc),
                DateType = Models.Enums.TrackingLogDateType.MONTH,
                IncludeTarget = true,

                PageIndex = PageIndex,
                PageSize = PageSize,
            };

            TrackingLogsPaginationVM trackingLogsPaginationVM = await TrackingLogService.GetTrackingLogsWithPagination(query);
            TotalPages = (int)Math.Ceiling((double)trackingLogsPaginationVM.TotalCount / PageSize);


            if (trackingLogsPaginationVM.TrackingLogs is not null)
            {
                popularLogs = ConvertTrackingLogs(trackingLogsPaginationVM.TrackingLogs);
                isLoaded = true;
                await InvokeAsync(StateHasChanged);
            }
        }
    }


    public async Task OnChangeYearDate(DateTime selectedYear)
    {
        if (TrackingLogService is not null)
        {
            query = new GetTrackingLogsWithPaginationQueryVM
            {
                TimeZone = ClientTimeZone,
                TrackingType = Models.Enums.TrackingTypeVM.HEADING,
                DateTime = DateTime.SpecifyKind(selectedYear, DateTimeKind.Utc),
                DateType = Models.Enums.TrackingLogDateType.YEAR,
                IncludeTarget = true,

                PageIndex = PageIndex,
                PageSize = PageSize,
            };

            TrackingLogsPaginationVM trackingLogsPaginationVM = await TrackingLogService.GetTrackingLogsWithPagination(query);
            TotalPages = (int)Math.Ceiling((double)trackingLogsPaginationVM.TotalCount / PageSize);

            if (trackingLogsPaginationVM.TrackingLogs is not null)
            {
                popularLogs = ConvertTrackingLogs(trackingLogsPaginationVM.TrackingLogs);
                isLoaded = true;
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    protected async Task PageChanged(int currentPage)
    {
        query.PageIndex = currentPage;
        CurrentPage = currentPage;
        await RefreshList();
    }

    protected async Task RefreshList()
    {
        if (TrackingLogService is not null)
        {
            TrackingLogsPaginationVM trackingLogsPaginationVM = await TrackingLogService.GetTrackingLogsWithPagination(query);

            TotalPages = (int)Math.Ceiling((double)trackingLogsPaginationVM.TotalCount / PageSize);

            if (trackingLogsPaginationVM.TrackingLogs is not null)
            {
                popularLogs = ConvertTrackingLogs(trackingLogsPaginationVM.TrackingLogs);
                isLoaded = true;
                await InvokeAsync(StateHasChanged);
            }
        }


    }

    private List<PopularHeadingDTO> ConvertTrackingLogs(List<TrackingLogVM> logs)
    {
        List<PopularHeadingDTO> dayTimeLogs = new List<PopularHeadingDTO>();

        foreach (var log in logs)
        {
            if(log.Heading is not null && log.TargetId is not null)
            {
                var popularHeadingDTO = new PopularHeadingDTO
                {
                    Title = log.Heading.Title,
                    URL = log.URL,
                    ViewCounter = log.ViewCounter,
                    DateTime = log.DateTime,
                };
                dayTimeLogs.Add(popularHeadingDTO);

            }
        }

        return dayTimeLogs;
    }

    public DateTime GetDateFromIsoWeek(string isoWeek)
    {
        var parts = isoWeek.Split(new[] { "-W" }, StringSplitOptions.None);
        int year = int.Parse(parts[0]);
        int week = int.Parse(parts[1]);

        DateTime jan1 = new DateTime(year, 1, 1);
        int daysOffset = DayOfWeek.Thursday - jan1.DayOfWeek;

        DateTime firstThursday = jan1.AddDays(daysOffset);
        var cal = CultureInfo.CurrentCulture.Calendar;
        int firstWeek = cal.GetWeekOfYear(firstThursday, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);

        var weekNum = week;

        if (firstWeek == 1)
        {
            weekNum -= 1;
        }

        var result = firstThursday.AddDays(weekNum * 7);

        return result.AddDays(-3);
    }
}
