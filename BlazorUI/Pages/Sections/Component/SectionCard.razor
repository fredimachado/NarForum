@using BlazorUI.Models.Category
@using BlazorUI.Pages.Category.Modal;
@using BlazorUI.Services.UI



<div class="row">
    <div class="col-12 text-end">
        <AuthorizeView>
            <Authorized>
                <a href="/" @onclick="OpenModal" class="link-secondary link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">Add Category</a>
            </Authorized>
        </AuthorizeView>
    </div>
</div>


<div class="row section-card-body">
    <div class="col-sm-4">
        @Model.Name
    </div>
    @if(min768)
    {
        <div class="col-sm-2">
            Headings
        </div>
        <div class="col-sm-2">
            Posts
        </div>
        <div class="col-sm-4">
            Last Post
            <AuthorizeView>
                <Authorized>
                    <span style="float:right;" class="text-end">
                        <i class="bi bi-pencil-fill" @onclick=UpdateSectionModal></i>
                    </span>
                </Authorized>
            </AuthorizeView>
            
        </div>
    }

</div>


@if(Categories == null)
{
    <p>Not Found Categories</p>
}
else
{
    @foreach (var category in Categories)
    {
        <CategoryCard ShowNumber=min768 Model="category" UpdateCallback="(category) => OpenUpdateModal(category)"></CategoryCard>
    }
}

<MediaQuery Width=768 @bind-Value=min768></MediaQuery>

<AddCategoryModal @ref="addCategoryModal" SectionVM="@Model" Callback="Refresh"></AddCategoryModal>

<UpdateSectionModal @ref=updateSectionModal Model="@Model" Callback="Refresh"></UpdateSectionModal>


<UpdateCategoryModal @ref=updateCategoryModal Model="SelectedModel" Callback="Refresh"></UpdateCategoryModal>


@code {
    private bool loading { get; set; } = true;

    [Parameter]
    public SectionVM Model { get; set; }

    [Parameter]
    public List<CategoryVM>? Categories { get; set; }

    private CategoryVM? SelectedModel { get; set; }

    AddCategoryModal? addCategoryModal;
    UpdateCategoryModal? updateCategoryModal;
    UpdateSectionModal? updateSectionModal;

    [Parameter]
    public string Name { get; set; } = string.Empty;

    [Inject] 
    RefreshStateService RefreshStateService { get; set; }

    private bool min768;

    private void OpenModal()
    {
        addCategoryModal?.ShowModal();
    }

    private void UpdateSectionModal()
    {
        updateSectionModal?.ShowModal();
    }

    private void OpenUpdateModal(CategoryVM categoryVM)
    {
        SelectedModel = categoryVM;

        updateCategoryModal?.ShowModal();
    }

    private async Task Refresh()
    {
        RefreshStateService.RefreshSectionList();
    }
}
