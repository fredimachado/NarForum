@using BlazorUI.Models.Category
@using BlazorUI.Services.UI
<Modal @ref="modal" ModalTitle="Update Category" Callback="@HandleUpdate">
    @if(Model is not null){
        <EditForm Model="@Model" OnValidSubmit="HandleUpdate">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label asp-for="Name" class="control-label">Category Name</label>
                <InputText id="Name" class="form-control" @bind-Value="@Model.Name"></InputText>
                <ValidationMessage For="@(() => Model.Name)" />
            </div>
            <div class="form-group">
                <label asp-for="Name" class="control-label">Category Description</label>
                <InputText id="Name" class="form-control" @bind-Value="@Model.Description"></InputText>
                <ValidationMessage For="@(() => Model.Description)" />
            </div>
        </EditForm>
    }
</Modal>

@code {
    Modal? modal;

    [Parameter]
    public CategoryVM? Model { get; set; }

    [Inject]
    private ICategoryService? CategoryService { get; set; }

    [Parameter]
    public EventCallback<int> Callback { get; set; }

    protected override void OnInitialized()
    {

    }

    public void ShowModal()
    {
        modal?.ShowModal();
    }

    public void CloseModal()
    {
        modal?.CloseModal();
    }

    protected async Task HandleUpdate()
    {
        if (Model is not null && CategoryService is not null)
        {
            UpdateCategoryCommandVM command = new UpdateCategoryCommandVM
            {
                Id = Model.Id,
                Name = Model.Name,
                Description = Model.Description,
            };

            var response = await CategoryService.UpdateCategory(command);

            if(response.IsSuccess)
            {
                // updated
                if(Callback.HasDelegate)
                {
                    await Callback.InvokeAsync();
                }

                CloseModal();
            }
        }

        
    }
}
