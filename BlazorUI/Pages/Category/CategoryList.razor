@page "/category/{CategoryName}"
@page "/category/{CategoryName}/{PageIndex:int}"
@using BlazorUI.Pages.Category.Modal

<AddBreadcrumb Items="BreadcrumbItems"></AddBreadcrumb>
<MediaQuery Width=768 @bind-Value=min768></MediaQuery>

<div class="row category-header">
    <div class="col-6">
        <h1>@CategoryName.ToTitleCase()</h1>
    </div>
    <div class="col-6 d-flex justify-content-end p-0">
        <ul class="list-group list-group-horizontal">
            <AuthorizeView>
                <Authorized>
                    <li class="list-group-item">
                            <button @onclick="CreateHeading" class="btn btn-primary"><i class="bi bi-file-earmark-plus"></i> Create Heading</button>
                        </li>
                    <li class="list-group-item">
                            <button @onclick="OpenModal" class="btn btn-primary"><i class="bi bi-journal-plus"></i> Add Category</button>
                        </li>
                </Authorized>
                <NotAuthorized>

                </NotAuthorized>
            </AuthorizeView>
        </ul>
    </div>
</div>

<div class="row current-category-card-body">
    
    <div class="col-4">
        Sub Categories
    </div>
    @if (min768)
    {
        <div class="col-2">
            Headings
        </div>
        <div class="col-2">
            Posts
        </div>
        <div class="col-4">
            Last Post
        </div>
    }
</div>

@if(!isLoaded)
{
    <p>Loading Data...</p>
}
else
{
    @foreach (var category in Categories)
    {

        <CategoryCard ShowNumber="min768" Model="category"></CategoryCard>
    }
    <hr />
    <div class="row current-category-card-body">
        <div class="col-6">
            Headings
        </div>
        @if (min768)
        {
            <div class="col-2">
                Posts
            </div>
        }
        <div class="col-4" style="display:flex;align-items:center;justify-content:space-between">
            Last Post

            <span>
                <span style="float:right;font-size:18px;margin-left:10px;cursor:pointer;" class="text-end" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false">
                    <i class="bi bi-funnel"></i>
                </span>
                <ul class="dropdown-menu page-search-heading-dropdown">
                    <SearchHeading Query="query" SearchCallback="SearchHeadingCallback"></SearchHeading>
                </ul>

                <span style="float:right;margin-left:10px;font-size:18px;cursor:pointer;" class="text-end" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false">
                    <i class="bi bi-filter-right"></i>
                </span>
           
                <ul class="dropdown-menu sort-by-dropdown">
                    <li class="dropdown-item">
                        <a @onclick="() => SortHeadingList(SortTypeVM.RECENT)">Recent</a>
                    </li>
                    <li class="dropdown-item">
                        <a @onclick="() => SortHeadingList(SortTypeVM.MOSTREPLIED)">Most Replied</a>
                    </li>
                    <li class="dropdown-item">
                        <a @onclick="() => SortHeadingList(SortTypeVM.OLDEST)">Oldest</a>
                    </li>
                </ul>
                <span style="float:right;font-size:18px;margin-left:10px;cursor:pointer;" class="text-end" @onclick=RefreshList>
                    <i class="bi bi-repeat"></i>
                </span>
            </span>
        </div>
    </div>
    <Pagination MinVersion="min768" TotalPages="@TotalPages" CurrentPage="@CurrentPage" BaseUrl="@getBaseUrl()" />
    @foreach (var heading in Headings)
    {
        <HeadingCard Model="heading" ShowNumber="min768" CategoryName="@CategoryName"></HeadingCard>
    }
    <Pagination MinVersion="min768" TotalPages="@TotalPages" CurrentPage="@CurrentPage" BaseUrl="@getBaseUrl()" />
}

@if(Model != null)
{
    <AddCategoryModal @ref="addCategoryModal" ParentCategoryVM="@Model" Callback="RefreshCategories"></AddCategoryModal>
}

@code {
    private bool isLoaded { get; set; }
    private CategoryVM? Model { get; set; }

    Pagination? top, bottom;

    private bool min768 { get; set; } = true;

    [Parameter]
    public string CategoryName { get; set; }

    [Parameter]
    public int PageIndex { get; set; } = 1;

    [Inject]
    public ICategoryService CategoryService { get; set; }

    [Inject]
    public IHeadingService HeadingService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }


    public List<CategoryVM>? Categories { get; set; }

    public List<HeadingVM>? Headings { get; set; }

    AddCategoryModal? addCategoryModal;


    GetHeadingsWithPaginationQueryVM? query;

    private string getBaseUrl()
    {
        return $"category/{CategoryName}/";
    }

    // Pagination variables
    private int PageSize = 10; // Number of items per page
    private int TotalPages = 1;
    private int CurrentPage = 1;

    private List<BreadcrumbItem> BreadcrumbItems { get; set; }

    private SortTypeVM selectedSortTypeVM = SortTypeVM.RECENT;

    protected async Task SetBreadcrumb(string CurrentName)
    {
        var parentCategories = await CategoryService.GetParentCategoriesByName(CurrentName);
        parentCategories = parentCategories.OrderBy(x => x.Id).ToList();

        BreadcrumbItems = new List<BreadcrumbItem>();
        BreadcrumbItems.Add(new BreadcrumbItem { Text = "Homepage", HrefLink = $"/" });
        foreach (var parent in parentCategories)
        {
            BreadcrumbItems.Add(new BreadcrumbItem { Text = parent.Name, HrefLink = $"/category/{parent.Name.ToFriendlyUrl()}/" });
        }
        BreadcrumbItems.Last().IsCurrentPage = true;

        await InvokeAsync(StateHasChanged);
    }

    protected async override Task OnParametersSetAsync()
    {
        if (PageIndex == 0) PageIndex = 1;

        Model = await CategoryService.GetCategoryByName(CategoryName);
        Categories = await CategoryService.GetCategoriesById(Model.Id);

        CurrentPage = PageIndex;

        query = new GetHeadingsWithPaginationQueryVM
        {
            SortType = selectedSortTypeVM,
            CategoryId = Model.Id,
            PageIndex = PageIndex,
            PageSize = PageSize,
            StartDate = query != null ? query.StartDate : null,
            EndDate = query != null ? query.EndDate : null,
            SearchTitle = query != null ? query.SearchTitle : null,
            SearchUser = query != null ? query.SearchUser : null,
        };

        HeadingsPaginationVM headingsPagination = await HeadingService.GetHeadingsWithPagination(query);
        Headings = headingsPagination.Headings;
        TotalPages = (int)Math.Ceiling((double)headingsPagination.TotalCount / PageSize);

        await SetBreadcrumb(Model.Name);

        isLoaded = true;
    }

    protected async Task SortHeadingList(SortTypeVM sortType)
    {
        if(Model is not null)
        {
            PageIndex = 1;
            CurrentPage = PageIndex;

            selectedSortTypeVM = sortType;

            query = new GetHeadingsWithPaginationQueryVM
            {
                SortType = sortType,
                CategoryId = Model.Id,
                PageIndex = CurrentPage,
                PageSize = PageSize,
                StartDate = query != null ? query.StartDate : null,
                EndDate = query != null ? query.EndDate : null,
                SearchTitle = query != null ? query.SearchTitle : null,
                SearchUser = query != null ? query.SearchUser : null,
            };

            HeadingsPaginationVM headingsPagination = await HeadingService.GetHeadingsWithPagination(query);
            Headings = headingsPagination.Headings;
            TotalPages = (int)Math.Ceiling((double)headingsPagination.TotalCount / PageSize);

            isLoaded = true;
        }
    }

    protected async Task RefreshList()
    {
        if (Model is not null)
        {
            PageIndex = 1;
            CurrentPage = PageIndex;

            selectedSortTypeVM = SortTypeVM.RECENT;

            query = new GetHeadingsWithPaginationQueryVM
            {
                SortType = SortTypeVM.RECENT,
                CategoryId = Model.Id,
                PageIndex = CurrentPage,
                PageSize = PageSize,
            };

            HeadingsPaginationVM headingsPagination = await HeadingService.GetHeadingsWithPagination(query);
            Headings = headingsPagination.Headings;
            TotalPages = (int)Math.Ceiling((double)headingsPagination.TotalCount / PageSize);

            isLoaded = true;
        }
    }


    protected async Task SearchHeadingCallback()
    {
        if (Model is not null && query is not null)
        {
            PageIndex = 1;
            CurrentPage = PageIndex;

            query.PageIndex = CurrentPage;

            HeadingsPaginationVM headingsPagination = await HeadingService.GetHeadingsWithPagination(query);
            Headings = headingsPagination.Headings;
            TotalPages = (int)Math.Ceiling((double)headingsPagination.TotalCount / PageSize);

            isLoaded = true;
        }
    }

    private void OpenModal()
    {
        addCategoryModal?.ShowModal();
    }

    private void CreateHeading()
    {
        NavigationManager.NavigateTo($"/create-heading/{CategoryName}");
    }


    private async Task RefreshCategories()
    {
        Categories = await CategoryService.GetCategoriesByName(CategoryName);
        await InvokeAsync(StateHasChanged);
    }
}
