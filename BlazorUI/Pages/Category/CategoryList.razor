@page "/category/{CategoryName}"
@page "/category/{CategoryName}/{PageIndex:int}"
@using BlazorUI.Pages.Category.Modal

<AddBreadcrumb Items="BreadcrumbItems"></AddBreadcrumb>


<div class="row category-header">
    <div class="col-6">
        <h1>@CategoryName</h1>
    </div>
    <div class="col-6 d-flex justify-content-end p-0">
        <ul class="list-group list-group-horizontal">
            <AuthorizeView>
                <Authorized>
                    <li class="list-group-item">
                            <button @onclick="CreateHeading" class="btn btn-primary"><i class="bi bi-file-earmark-plus"></i> Create Heading</button>
                        </li>
                    <li class="list-group-item">
                            <button @onclick="OpenModal" class="btn btn-primary"><i class="bi bi-journal-plus"></i> Add Category</button>
                        </li>
                </Authorized>
                <NotAuthorized>

                </NotAuthorized>
            </AuthorizeView>
        </ul>
    </div>
</div>

<div class="row current-category-card-body">
    <div class="col-4">
        Sub Categories
    </div>
    <div class="col-2">
        Headings
    </div>
    <div class="col-2">
       Posts
    </div>
    <div class="col-4">
        Last Post
    </div>
</div>

@if(!isLoaded)
{
    <p>Loading Data...</p>
}
else
{
    @foreach (var category in Categories)
    {
        
        <CategoryCard Model="category"></CategoryCard>
    }
    <hr />
    <div class="row current-category-card-body">
        <div class="col-6">
            Headings
        </div>
        <div class="col-2">
            Posts
        </div>
        <div class="col-4">
            Last Post
        </div>
    </div>

    @foreach (var heading in Headings)
    {
        <HeadingCard Model="heading" CategoryName="@CategoryName"></HeadingCard>
    }
    <Pagination TotalPages="@TotalPages" CurrentPage="@CurrentPage" BaseUrl="@getBaseUrl()" />

}

@if(Model != null)
{
    <AddCategoryModal @ref="addCategoryModal" ParentCategoryVM="@Model" Callback="RefreshCategories"></AddCategoryModal>
}

@code {
    private bool isLoaded { get; set; }
    private CategoryVM? Model { get; set; }

    [Parameter]
    public string CategoryName { get; set; }

    [Parameter]
    public int PageIndex { get; set; } = 1;

    [Inject]
    public ICategoryService CategoryService { get; set; }

    [Inject]
    public IHeadingService HeadingService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }


    public List<CategoryVM>? Categories { get; set; }

    public List<HeadingVM>? Headings { get; set; }

    AddCategoryModal? addCategoryModal;


    private string getBaseUrl()
    {
        return $"category/{CategoryName}/";
    }

    // Pagination variables
    private int PageSize = 10; // Number of items per page
    private int TotalPages = 1;
    private int CurrentPage = 1;

    private List<BreadcrumbItem> BreadcrumbItems { get; set; }

    protected async Task SetBreadcrumb()
    {
        var parentCategories = await CategoryService.GetParentCategoriesByName(CategoryName);
        parentCategories = parentCategories.OrderBy(x => x.Id).ToList();

        BreadcrumbItems = new List<BreadcrumbItem>();
        BreadcrumbItems.Add(new BreadcrumbItem { Text = "Homepage", HrefLink = $"/" });
        foreach (var parent in parentCategories)
        {
            BreadcrumbItems.Add(new BreadcrumbItem { Text = parent.Name, HrefLink = $"/category/{parent.Name}/" });
        }
        BreadcrumbItems.Last().IsCurrentPage = true;
    }

    protected async override Task OnParametersSetAsync()
    {
        if (PageIndex == 0) PageIndex = 1;

        Model = await CategoryService.GetCategoryByName(CategoryName);
        Categories = await CategoryService.GetCategoriesByName(CategoryName);

        CurrentPage = PageIndex;
        HeadingsPaginationVM headingsPagination = await HeadingService.GetHeadingsByCategoryNameWithPagination(CategoryName, PageIndex, PageSize);
        Headings = headingsPagination.Headings;
        TotalPages = (int)Math.Ceiling((double)headingsPagination.TotalCount / PageSize);

        await SetBreadcrumb();

        isLoaded = true;
    }

    private void OpenModal()
    {
        addCategoryModal?.ShowModal();
    }

    private void CreateHeading()
    {
        NavigationManager.NavigateTo($"/create-heading/{CategoryName}");
    }


    private async Task RefreshCategories()
    {
        Categories = await CategoryService.GetCategoriesByName(CategoryName);
        await InvokeAsync(StateHasChanged);
    }
}
