@using BlazorUI.Models.Category

<div class="row category-card-body align-items-center">
    <div class="col-sm-4" style="display: flex;align-items: center;">
        <i class="bi bi-journals category-normal-icon" style="font-size:1.5em;margin-right:20px;"></i>
        <i class="bi bi-pencil-square category-edit-button" style="font-size:1.5em;margin-right:20px;cursor:pointer" @onclick=UpdateCategory></i>
        <a href="@url" class="link-category-primary link-offset-2 link-underline-opacity-100 link-underline-opacity-100-hover">@Model.Name </a>
    </div>
    @if(ShowNumber)
    {
        <div class="col-sm-2 category-card-heading-counter">
            @Model.HeadingCounter
        </div>
        <div class="col-sm-2 category-card-post-counter">
            @Model.PostCounter
        </div>
        <div class="col-sm-4 last-post-summary">
            <small class="last-post-heading"><a href="@lastHeadingUrl">@Model.LastHeadingTitle</a></small>
            <br />
            <small class="last-post-username">by <a href="@userUrl">@Model.LastUserName</a></small>
            <br />
            <small class="last-post-date">@Model.ActiveDate</small>
        </div>
    }
</div>

@code {
    [Parameter]
    public CategoryVM Model { get; set; }

    [Parameter]
    public bool ShowNumber { get; set; } = true;

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    // []

    string url { 
        get 
        {
            return $"/category/{Model.Name.ToFriendlyUrl()}-{Model.CategoryId}"; 
        } 
    }

    string userUrl
    {
        get
        {
            return $"/user/{Model.LastUserName}";
        }
    }

    string lastHeadingUrl
    {
        get
        {
            if (Model.LastHeadingTitle != null && Model.LastHeadingId != null)
            {
                return $"/category/{Model.LastCategoryTitle.ToFriendlyUrl()}-{Model.LastCategoryId}/{Model.LastHeadingId.Value.EncodeGuidToBase64Url()}/{Model.LastHeadingTitle.ToFriendlyUrl()}";
            }
            return null;
        }
    }

    protected async Task UpdateCategory()
    {
        
    }
}
