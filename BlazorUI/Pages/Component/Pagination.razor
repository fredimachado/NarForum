@if (TotalPages > 1)
{
    <nav aria-label="Page navigation">
        <ul class="pagination @(!MinVersion == true ? "pagination-min" : "")">
            @if(!UseCallback)
            {
                @if(CurrentPage != 1)
                {

                    <li class="page-item"><a href="@getUrl(1)" class="page-link"><i class="bi bi-chevron-double-left"></i></a></li>
                    @if(!MinVersion)
                    {
                        <li class="page-item"><a href="@getUrl(CurrentPage-1)" class="page-link"><i class="bi bi-chevron-left"></i></a></li>
                    }
                    else
                    {
                        <li class="page-item"><a href="@getUrl(CurrentPage-1)" class="page-link">Previous</a></li>
                    }
                }

                @if (LimitPage <= TotalPages)
                {
                    @for (var j = CurrentPage - (LimitPage / 2); j <= CurrentPage + (LimitPage / 2); j++)
                    {
                        @if(j > 0 && j <= TotalPages)
                        {
                            <li class="page-item page-item-number @(j == CurrentPage ? "active" : "")">
                                <a class="page-link" href="@getUrl(j)">@j</a>
                            </li>
                        }
                    }
                }
                else
                {
                    @for (var j = 1; j <= TotalPages; j++)
                    {
                        <li class="page-item page-item-number @(j == CurrentPage ? "active" : "")">
                            <a class="page-link" href="@getUrl(j)">@j</a>
                        </li>
                    }
                }

           
                @if(TotalPages != CurrentPage)
                {
                    @if(!MinVersion)
                    {
                        <li class="page-item page-item-next"><a href="@getUrl(CurrentPage+1)" class="page-link"><i class="bi bi-chevron-right"></i></a></li>
                    }
                    else
                    {
                        <li class="page-item page-item-next"><a href="@getUrl(CurrentPage+1)" class="page-link">Next</a></li>
                    }
                    <li class="page-item"><a href="@getUrl(TotalPages)" class="page-link"><i class="bi bi-chevron-double-right"></i></a></li>
                }
            }
            else
            {
                @if (CurrentPage != 1)
                {
                    <li class="page-item"><a @onclick="() => ChangePage(1)" class="page-link"><i class="bi bi-chevron-double-left"></i></a></li>
                    @if (!MinVersion)
                    {
                        <li class="page-item"><a @onclick="() => ChangePage(CurrentPage-1)" class="page-link"><i class="bi bi-chevron-left"></i></a></li>
                    }
                    else
                    {
                        <li class="page-item"><a @onclick="() => ChangePage(CurrentPage-1)" class="page-link">Previous</a></li>
                    }
                }
                
                @if (LimitPage <= TotalPages)
                {
                    

                    @for (var j = CurrentPage - (LimitPage / 2); j <= CurrentPage + (LimitPage / 2); j++)
                    {
                        var pageNumber = j;
                        @if (j > 0 && j <= TotalPages)
                        {

                            <li class="page-item page-item-number @(j == CurrentPage ? "active" : "")">
                                <a class="page-link" @onclick="() => ChangePage(pageNumber)">@j</a>
                            </li>
                        }
                    }

                }
                else
                {
                    @for (var j = 1; j <= TotalPages; j++)
                    {
                        var pageNumber = j;
                        <li class="page-item page-item-number @(j == CurrentPage ? "active" : "")">
                            <a class="page-link" @onclick="() => ChangePage(pageNumber)">@j</a>
                        </li>
                    }
                }
                
                @if (TotalPages != CurrentPage)
                {
                    @if (!MinVersion)
                    {
                        <li class="page-item page-item-next"><a @onclick="() => ChangePage(CurrentPage+1)" class="page-link"><i class="bi bi-chevron-right"></i></a></li>
                    }
                    else
                    {
                        <li class="page-item page-item-next"><a @onclick="() => ChangePage(CurrentPage+1)" class="page-link">Next</a></li>
                    }
                    <li class="page-item"><a @onclick="() => ChangePage(TotalPages)" class="page-link"><i class="bi bi-chevron-double-right"></i></a></li>
                }
            }

            @if(MinVersion)
            {
                <li class="page-item page-item-right-input">
                    <a class="page-link" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false">Page @CurrentPage - @TotalPages</a>
                    <ul class="dropdown-menu page-input-dropdown">
                        <form class="row g-3 needs-validation" @onsubmit="UseCallback ? () => ChangePage(inputPageNumber) : () => GoToPage()">
                        <li class="page-input-dropdown-item">
                            <input type="number" class="form-control page-input-box" @bind-value=inputPageNumber min="1" max="@TotalPages" required>
                            <div class="invalid-feedback">
                                Please enter a number between 1 and @TotalPages.
                            </div>
                        </li>
                        <li>
                            <button type="submit" class="btn btn-primary w-100 page-input-button">Go</button>
                        </li>
                        </form>
                    </ul>
                </li>
            }
            
        </ul>
    </nav>
}

@code {
    [Parameter]
    public int TotalPages { get; set; }

    [Parameter]
    public int CurrentPage { get; set; }

    [Parameter]
    public int LimitPage { get; set; } = 5;

    [Parameter]
    public string BaseUrl { get; set; }

    [Parameter]
    public bool UseCallback { get; set; }

    [Parameter]
    public bool MinVersion { get; set; }

    private int inputPageNumber { get; set; } = 1;

    [Inject]
    public NavigationManager? navigationManager { get; set; }

    private string getUrl(int index)
    {
        return $"{BaseUrl}{index}";
    }

    [Parameter]
    public EventCallback<int> PageChanged { get; set; }

    protected override void OnParametersSet()
    {


        base.OnParametersSet();
    }

    private async Task GoToPage()
    {
        if(navigationManager is not null)
        {
            navigationManager.NavigateTo(getUrl(inputPageNumber));
        }
    }


    private async Task ChangePage(int page)
    {
        if (page != CurrentPage)
        {
            CurrentPage = page;
            await PageChanged.InvokeAsync(CurrentPage);
        }
    }
}
