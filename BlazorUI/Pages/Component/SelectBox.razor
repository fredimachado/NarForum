<div class="card p-2 m-2">
    <div class="form-group">
        @if(Heading is not null)
        {
            <h3 class="select-box-title">
                <span>@Heading</span>
                @if (SelectedLabelText is not null)
                {
                    <span class="selected-user-tag">
                        @SelectedLabelText
                    </span>
                }
            </h3>
        }
    </div>
    <div class="form-group">
        <input type="text" class="form-control" @bind="@SearchText" @oninput="@searchLabel" placeholder="@Placeholder" />
    </div>
    <div class="form-group">
        <table class="table table-responsive">
            <tbody>
                @foreach (var label in Labels)
                {
                    <tr>
                        <th scope="row"><input @bind=@label.IsSelect @oninput="() => selectLabel(label)" class="form-check-input" type="checkbox"></th>
                        <td>@label.Text</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    
</div>



@code {
    [Parameter]
    public string? Heading { get; set; }

    [Parameter] 
    public bool Selected { get; set; }

    [Parameter]
    public string Placeholder { get; set; } = string.Empty;

    [Parameter]
    public List<SelectLabel> Labels { get; set; } = new List<SelectLabel>();

    private SelectLabel? selectedLabel;

    [Parameter]
    public EventCallback<string> SearchLabelCallback { get; set; }

    [Parameter]
    public EventCallback<int> SelectCallback { get; set; }


    [Parameter]
    public bool IsMultiple { get; set; } = false;

    [Parameter]
    public string? SearchText { get; set; }

    public string? SelectedLabelText;

    public SelectLabel? SelectedLabel { get { return selectedLabel; } }


    protected async override Task OnParametersSetAsync()
    {
        var selectedLabel = Labels.FirstOrDefault(x => x.IsSelect);

        var test = SearchText;

        if(selectedLabel is not null)
        {
            SelectedLabelText = selectedLabel.Text;
        }
        else
        {
            SelectedLabelText = null;
        }

        await InvokeAsync(StateHasChanged);
    }


    protected async Task searchLabel(ChangeEventArgs args)
    {
        selectedLabel = null;
        SearchText = args.Value.ToString();
        await SearchLabelCallback.InvokeAsync(SearchText);
        SelectedLabelText = null;
        await InvokeAsync(StateHasChanged);
    }

    protected async Task selectLabel(SelectLabel selectedLabel)
    {
        this.selectedLabel = selectedLabel;

        bool isSelect = !selectedLabel.IsSelect;

        foreach(var label in Labels)
        {
            label.IsSelect = false;
        }

        selectedLabel.IsSelect = isSelect;

        if(isSelect)
        {
            SelectedLabelText = selectedLabel.Text;
        }
        else
        {
            SelectedLabelText = null;
        }
        await SelectCallback.InvokeAsync();

        await InvokeAsync(StateHasChanged);
    }
}
