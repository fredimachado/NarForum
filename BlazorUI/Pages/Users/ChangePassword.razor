@page "/change-password/{Id}";
<main class="form-signin">
@if (string.IsNullOrEmpty(ErrorMessage) == false)
{
    <div class="alert alert-danger">
        @ErrorMessage
    </div>
}
@if (string.IsNullOrEmpty(Message) == false)
{
    <div class="alert alert-success">
        @Message
    </div>
}

@if(changePassword)
{
    <EditForm OnValidSubmit="HandleChangePassword">
        @* <Logo LogoVM="LogoVM" LogoId="forum-logo-login"></Logo> *@
        <h1 class="h5 mb-3 fw-normal text-center">Change your password</h1>
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label class="control-label">New Password</label>
            <InputText id="userName" class="form-control" @bind-Value="NewPassword" minlength="7"></InputText>
            <ValidationMessage For="@(() => NewPassword)" />
        </div>
        <div class="form-group">
            <label class="control-label">Confirm Password</label>
            <InputText type="password" id="password" class="form-control" @bind-Value="ConfirmPassword" minlength="7"></InputText>
            <ValidationMessage For="@(() => ConfirmPassword)" />
        </div>

        <button class="w-100 btn btn-forum mt-2 fw-normal" type="submit">Change Password</button>
    </EditForm>
}
else
{
    <p>Loading..</p>
}
</main>

@code {
    [Parameter]
    public string Id { get; set; }

    [Inject]
    public IUserService UserService { get; set; }

    [Inject]
    public NavigationManager navigationManager { get; set; }

    Guid verifyId;
    bool checkId;
    bool changePassword;

    private string? Message { get; set; }

    private string? ErrorMessage { get; set; }

    private string NewPassword { get; set; }
    private string ConfirmPassword { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        checkId = Guid.TryParse(Id, out verifyId);

        if (checkId)
        {
            if (UserService is not null)
            {
                var response = await UserService.CheckResetPasswordRequest(verifyId);

                if (response.IsSuccess)
                {
                    Message = response.Message;
                    changePassword = true;
                    ErrorMessage = string.Empty;
                }
                else
                {
                    ErrorMessage = response.Message;
                    Message = string.Empty;
                }
            }
        }
        else
        {
            ErrorMessage = "Request id is invalid";
            Message = string.Empty;
        }
        await base.OnParametersSetAsync();
    }

    protected async Task HandleChangePassword()
    {
        if(NewPassword == ConfirmPassword)
        {
            if (UserService is not null)
            {
                var response = await UserService.ChangeUserPassword(verifyId, NewPassword, ConfirmPassword);

                if(response.IsSuccess)
                {
                    Message = response.Message;
                    ErrorMessage = string.Empty;
                    changePassword = false;
                    navigationManager.NavigateTo("login");
                }
                else
                {
                    ErrorMessage = response.Message;
                    Message = string.Empty;
                }
            }
        }
        else
        {
            ErrorMessage = "Passwords are not equal";
            Message = string.Empty;
        }
    }
}
