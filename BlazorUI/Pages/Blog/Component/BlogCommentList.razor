@using BlazorUI.Models.BlogComment
@using BlazorUI.Models.BlogPost
@inject HttpClient Http
@inject IConfiguration Configuration

<h3 class="blog-comment-title">Comments</h3>

@if(isLoading)
{
    
}
else
{
    if(BlogComments is not null)
    {
        @foreach(var comment in BlogComments)
        {
            <div class="d-flex flex-start mt-4">

                @if (comment.UserProfileImageUrl is not null)
                {
                    <span class="image-user-profile-blog-comment shadow-1-strong me-3">
                        <img src="@comment.UserProfileImageUrl" alt="avatar" width="65"
                             height="65" />
                    </span>
                    
                }
                else
                {
                    <span class="no-image-user-profile-blog-comment shadow-1-strong me-3">
                        @comment.UserName.ToUpper()[0]
                    </span>
                }
                <div class="flex-grow-1 flex-shrink-1">
                    <div>
                        <div class="d-flex justify-content-between align-items-center">
                            <p class="mb-1">
                                @comment.UserName <span class="small">- 2 hours ago</span>
                            </p>
                            @* <a href="#!"><i class="fas fa-reply fa-xs"></i><span class="small"> reply</span></a> *@
                        </div>
                        <p class="small mb-0">
                            @comment.Content
                        </p>
                    </div>
                </div>
            </div>
        }
    }

    <Pagination TotalPages="@TotalPages" CurrentPage="@CurrentPage" UseCallback="true" PageChanged="PageChanged" />

    <AuthorizeView>
        <Authorized>
            <BlogCommentForm BlogPostVM="BlogPostVM" CommentAdded="CommentAddedCallback"></BlogCommentForm>
        </Authorized>
        <NotAuthorized>
            <p>You have to login to make comment on this blog post.</p>
        </NotAuthorized>
    </AuthorizeView>
}


@code {
    [Parameter]
    public BlogPostVM BlogPostVM { get; set; }

    [Inject]
    public IBlogCommentService? BlogCommentService { get; set; }

    public List<BlogCommentVM>? BlogComments { get; set; }

    private GetBlogCommentsWithPaginationQueryVM? query { get; set; }

    bool isLoading = true;

    // Pagination variables
    private int PageSize = 10; // Number of items per page
    private int TotalPages = 1;
    private int CurrentPage = 1;

    private string BlogCategoryUrl(string category)
    {
        return $"blog/{category.ToFriendlyUrl()}";
    }

    private string GetImageUrl(string userId)
    {
        return $"{Configuration["ApiBaseUrl"]}/file/images/user-profile/{userId}";
    }

    protected async override Task OnInitializedAsync()
    {
        if (BlogCommentService is not null)
        {
            query = new GetBlogCommentsWithPaginationQueryVM
            {
                BlogPostId = BlogPostVM.Id,
                PageIndex = CurrentPage,
                PageSize = PageSize
            };

            BlogCommentsPaginationVM blogCommentsPagination = await BlogCommentService.GetBlogCommentsWithPagination(query);
            BlogComments = blogCommentsPagination.BlogComments;
            await CheckUserImageProfile();


            TotalPages = (int)Math.Ceiling((double)blogCommentsPagination.TotalCount / PageSize);

            if (BlogComments is not null)
            {
                isLoading = false;
            }
        }
    }


    private async Task CheckUserImageProfile()
    {

        if (BlogComments is not null && BlogComments.Count > 0)
        {
            foreach (var comment in BlogComments)
            {
                if (comment.UserId is not null)
                {
                    string imageUrl = GetImageUrl(comment.UserId.ToString());

                    bool isExist = await UrlExists(imageUrl);
                    if (isExist)
                    {
                        comment.UserProfileImageUrl = imageUrl;
                    }
                }
                else
                {

                }
            }
        }
    }

    private async Task<bool> UrlExists(string url)
    {
        try
        {
            var response = await Http.GetAsync(url);
            return response.IsSuccessStatusCode;
        }
        catch
        {
            return false;
        }
    }

    protected async Task PageChanged(int currentPage)
    {
        if(query is not null)
        {
            query.PageIndex = currentPage;
            CurrentPage = currentPage;

            await RefreshList();
        }
    }


    protected async Task RefreshList()
    {
        isLoading = true;
        BlogCommentsPaginationVM blogCommentsPagination = await BlogCommentService.GetBlogCommentsWithPagination(query);
        BlogComments = blogCommentsPagination.BlogComments;
        await CheckUserImageProfile();

        TotalPages = (int)Math.Ceiling((double)blogCommentsPagination.TotalCount / PageSize);

        if (BlogComments is not null)
        {
            isLoading = false;

            await InvokeAsync(StateHasChanged);
        }
    }

    protected async Task CommentAddedCallback()
    {
        await RefreshList();
    }


}
