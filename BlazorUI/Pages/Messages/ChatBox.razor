<div class="chat-box">
    <div class="chat-header">
        <div class="row">
            <div class="col-sm-3">

            </div>
            <div class="col-sm-6 text-center">
                Chat
            </div>
            <div class="col-sm-3 text-end">
                <button type="button" class="btn btn-light pb-0 pt-0"><i class="bi bi-send-plus"></i> Create Chat</button>
            </div>
        </div>
    </div>
    <div class="chat-body">
        <div class="chat-list">
            <ul class="list-group">
                <li class="list-group-item">An item</li>
                <li class="list-group-item">A second item</li>
                <li class="list-group-item">A third item</li>
                <li class="list-group-item">A fourth item</li>
                <li class="list-group-item">And a fifth one</li>
                <li class="list-group-item">An item</li>
                <li class="list-group-item">A second item</li>
                <li class="list-group-item">A third item</li>
                <li class="list-group-item">A fourth item</li>
                <li class="list-group-item">And a fifth one</li>
            </ul>
        </div>
        <div class="chat-area">
            @if( OpenCreateChatBox )
            {
                <span class="message-balloon owner-message">
                    @UserName
                </span>
                <SelectBox Labels=UserLabels Placeholder="Search username..." SearchLabelCallback="RefreshUserLabels"></SelectBox>
            }
            else
            {
                <ul class="list-group chat-history-list">
                    <li class="list-group-item">
                        <div class="message-area">
                            <span class="message-balloon receiver-message">
                                Selam
                            </span>
                        </div>
                    </li>
                    <li class="list-group-item">
                        <div class="message-area">
                            <span class="message-balloon owner-message">
                                Selam
                            </span>
                        </div>
                    </li>
                    <li class="list-group-item">
                        <div class="message-area">
                            <span class="message-balloon receiver-message">
                                Nasılsın?
                            </span>
                        </div>
                    </li>
                    <li class="list-group-item">
                        <div class="message-area">
                            <span class="message-balloon owner-message">
                                İyiyim, sen nasılsın?
                            </span>
                        </div>
                    </li>
                    <li class="list-group-item">
                        <div class="message-area">
                            <span class="message-balloon receiver-message">
                                Ben de iyiyim. Almam gereken dosya var, yollar mısın?
                            </span>
                        </div>
                    </li>
                    <li class="list-group-item">
                        <div class="message-area">
                            <span class="message-balloon owner-message">
                                Neden olmasın.
                            </span>
                        </div>
                    </li>
                </ul>
            }
        </div>
    </div>
    <div class="chat-footer">
        <input type="text" class="form-control" placeholder="Mesajınızı yazın...">
        <button class="btn btn-primary"><i class="bi bi-send-fill"></i></button>
    </div>
</div>

@code {
    [Parameter]
    public bool OpenCreateChatBox { get; set; }

    [Parameter]
    public string? UserName { get; set; }

    private List<SelectLabel> UserLabels = new List<SelectLabel>();

    [Inject]
    public IUserService UserService { get; set; }


    protected async Task RefreshUserLabels(string userName)
    {
        // UserLabels = service.getusers (username);

        var userPaginationDto = await UserService.GetUsersByUsernameWithPagination(userName, 1, 10);

        if (userPaginationDto != null && userPaginationDto.TotalCount > 0 && userPaginationDto.Users != null)
        {
            UserLabels = userPaginationDto.Users.Select(x => new SelectLabel
            {
                IsSelect = false,
                Text = x.UserName
            })
            .ToList();
        }
        else
        {
            UserLabels.Clear();
        }

        await InvokeAsync(StateHasChanged);
    }

}
