@using BlazorUI.Models.Message
@using Microsoft.AspNetCore.SignalR.Client
<div class="chat-box">
    <div class="chat-header">
        <div class="row">
            <div class="col-sm-3">

            </div>
            <div class="col-sm-6 text-center">
                Chat
            </div>
            <div class="col-sm-3 text-end">
                <button type="button" class="btn btn-light pb-0 pt-0" @onclick="CreateChat"><i class="bi bi-send-plus"></i> Create Chat</button>
            </div>
        </div>
    </div>
    <div class="chat-body">
        <div class="chat-list">
            <ul class="list-group">
                @foreach(var chat in Chats)
                {
                    <li class="list-group-item">@chat.Subject</li>
                }
            </ul>
        </div>
        <div class="chat-area">
            @if( OpenCreateChatBox )
            {
                @if (showUserEmpty)
                {
                    <div class="alert alert-warning p-2 m-2" role="alert">
                        You have to select one user to send request!
                    </div>
                }
                
                <SelectBox @ref=@selectBox Heading="Select User" SearchText="@searchSelectBox" Labels=UserLabels Placeholder="Search username..." SearchLabelCallback="RefreshUserLabels" SelectCallback="UserSelected"></SelectBox>
                <div class="card p-2 m-2">
                    <div class="form-group mb-2">
                        <textarea class="form-control" rows="3" @bind="@chatRequestMessage" placeholder="Type message..."></textarea>
                    </div>
                    <div class="form-group mb-2">
                        <button type="button" class="btn btn-primary w-100 text-center" @onclick="SendChatRequest"><i class="bi bi-send-exclamation-fill"></i> Send a request</button>
                    </div>
                </div>
            }
            else
            {
                <ul class="list-group chat-history-list">
                    <li class="list-group-item">
                        <div class="message-area">
                            <span class="message-balloon receiver-message">
                                Selam
                            </span>
                        </div>
                    </li>
                    <li class="list-group-item">
                        <div class="message-area">
                            <span class="message-balloon owner-message">
                                Selam
                            </span>
                        </div>
                    </li>
                    <li class="list-group-item">
                        <div class="message-area">
                            <span class="message-balloon receiver-message">
                                Nasılsın?
                            </span>
                        </div>
                    </li>
                    <li class="list-group-item">
                        <div class="message-area">
                            <span class="message-balloon owner-message">
                                İyiyim, sen nasılsın?
                            </span>
                        </div>
                    </li>
                    <li class="list-group-item">
                        <div class="message-area">
                            <span class="message-balloon receiver-message">
                                Ben de iyiyim. Almam gereken dosya var, yollar mısın?
                            </span>
                        </div>
                    </li>
                    <li class="list-group-item">
                        <div class="message-area">
                            <span class="message-balloon owner-message">
                                Neden olmasın.
                            </span>
                        </div>
                    </li>
                </ul>
            }
        </div>
    </div>
    <div class="chat-footer">
        @if (!OpenCreateChatBox)
        {
            <input type="text" class="form-control" placeholder="Mesajınızı yazın...">
            <button class="btn btn-primary" ><i class="bi bi-send-fill"></i></button>
        }
    </div>
</div>

@code {
    [Parameter]
    public bool OpenCreateChatBox { get; set; }

    [Parameter]
    public HubConnection? HubConnection { get; set; }

    [Parameter]
    public string? UserName { get; set; }

    private List<SelectLabel> UserLabels = new List<SelectLabel>();

    private List<ChatVM> Chats = new List<ChatVM>();

    [Inject]
    public IUserService UserService { get; set; }

    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    private SelectBox? selectBox;
    private string? searchSelectBox;

    private bool showUserEmpty;
    private string? SelfUsername;

    private string chatRequestMessage = string.Empty;

    private bool IsHubConnectionSetted = false;

    protected async override Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            SelfUsername = user.Identity.Name;
        }
    }

    protected async override Task OnParametersSetAsync()
    {
        searchSelectBox = UserName;

        await RefreshUserLabels(searchSelectBox);

        var selectedUserLabel = UserLabels.FirstOrDefault(x => x.Text == searchSelectBox);

        if(selectedUserLabel is not null)
        {
            selectedUserLabel.IsSelect = true;
            showUserEmpty = false;
        }

        if(HubConnection is not null && !IsHubConnectionSetted)
        {
            IsHubConnectionSetted = true;

            HubConnection.On<string, string>("ReceiveChatRequest", async (fromUser, message) =>
            {
                if (message != null)
                {
                    Chats.Add(new ChatVM
                    {
                        Subject = "Mesaj Alındı",
                        Text = message,
                        Owner = new UserVM { UserName = fromUser }
                    });
                }
                await InvokeAsync(StateHasChanged);
            });
        }

        await InvokeAsync(StateHasChanged);
    }


    protected async Task RefreshUserLabels(string? userName)
   {
        var userPaginationDto = await UserService.GetUsersByUsernameWithPagination(userName, 1, 5);

        if (userPaginationDto != null && userPaginationDto.TotalCount > 0 && userPaginationDto.Users != null)
        {
            UserLabels = userPaginationDto.Users.Where(x => x.UserName != SelfUsername).Select(x => new SelectLabel
            {
                IsSelect = false,
                Text = x.UserName
            })
            .ToList();
        }
        else
        {
            UserLabels.Clear();
        }

        await InvokeAsync(StateHasChanged);
    }

    protected async Task UserSelected()
    {
        if (selectBox is not null)
        {
            if (selectBox.SelectedLabelText is not null)
            {
                showUserEmpty = false;
                UserName = selectBox.SelectedLabelText;
                searchSelectBox = UserName;
            }
        }
        await InvokeAsync(StateHasChanged);
    }

    protected async Task SendChatRequest()
    {
        if(selectBox is not null)
        {
            if(selectBox.SelectedLabelText is null)
            {
                showUserEmpty = true;
            }
            else
            {
                showUserEmpty = false;

                // send

                if (HubConnection is not null)
                {
                    await HubConnection.SendAsync("SendChatRequest", selectBox.SelectedLabelText, chatRequestMessage);
                }

            }

            searchSelectBox = selectBox.SearchText;
        }


        await InvokeAsync(StateHasChanged);
    }

    protected async Task CreateChat()
    {
        if(OpenCreateChatBox)
        {
            return;
        }

        OpenCreateChatBox = true;
        showUserEmpty = true;
        searchSelectBox = null;
        UserName = null;

        UserLabels.Clear();

        await InvokeAsync(StateHasChanged);
    }

}
