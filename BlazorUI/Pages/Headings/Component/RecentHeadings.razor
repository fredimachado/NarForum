@inject HttpClient Http
@inject IConfiguration Configuration

<div class="row recent-heading-list-container">
    <h3 class="sidebar-title">Recent Headings</h3>
    @if (isLoading)
    {
        
    }
    else
    {
        <div class="recent-heading-list">
        @for (int i=0; i < headings!.Count(); i++)
        {
            var heading = headings![i];
            <div class="d-flex flex-start @((i == 0) ? "mt-1" : "mt-3")">
                <a class="me-3 no-image-user-profile-link" href="@($"user/{heading.UserName}")">

                    @if (isImageAvailables is not null && isImageAvailables.Count > 0)
                    {
                        if (heading.UserId is not null && isImageAvailables.ContainsKey(heading.UserId.Value) && isImageAvailables[heading.UserId.Value])
                        {
                            <span class=image-user-profile>
                                <img width="50" height="50" src="@GetImageUrl(heading.UserId.Value)" />
                            </span>
                        }
                        else
                        {
                            <span class=no-image-user-profile>
                                @heading.UserName.ToUpper()[0]
                            </span>
                        }  
                    }
                    else
                    {
                        <span class=no-image-user-profile>
                            @heading.UserName.ToUpper()[0]
                        </span>
                    }
                        @* <img class="rounded shadow-1-strong"
                    src="https://mdbcdn.b-cdn.net/img/Photos/Avatars/img%20(32).webp" alt="avatar"
                    width="50" height="50" /> *@
                </a>
                <div class="flex-grow-1 flex-shrink-1">
                <div>
                    <div>
                        <h4 class="recent-heading-title">
                            <a href="@($"category/{heading.CategoryName.ToFriendlyUrl()}-{heading.CategoryIntId}/{heading.Id.EncodeGuidToBase64Url()}/{heading.Title.ToFriendlyUrl()}")">@heading.Title</a>
                        </h4>
                        <div class="recent-heading-title-info">
                            <span class="small">@heading.UserName.Split('@')[0]</span>
                            <span class="badge recent-heading-category-badge">@heading.CategoryName</span>
                            @* <span class="small">@heading.ActiveDate</span> *@
                        </div>
                    </div>
                </div>
                </div>
            </div>
        }
        </div>
    }
</div>


@code {
    private bool isLoading = true;

    [Inject]
    private IHeadingService? headingService { get; set; }

    private List<HeadingVM>? headings;

    private int headingLimit = 10;

    private Dictionary<Guid, bool> isImageAvailables = new Dictionary<Guid, bool>();


    private string GetImageUrl(Guid headingUserId)
    {
        return $"{Configuration["ApiBaseUrl"]}/file/images/user-profile/{headingUserId}";
    }

    protected async override Task OnInitializedAsync()
    {
        if(headingService is not null)
        {
            GetHeadingsWithPaginationQueryVM query = new GetHeadingsWithPaginationQueryVM
            {
                SortType = SortTypeVM.RECENT,
                PageIndex = 1,
                PageSize = headingLimit,
            };

            HeadingsPaginationVM pagination = await headingService.GetHeadingsWithPagination(query);

            headings = pagination.Headings;


            if(headings is not null && headings.Count > 0)
            {
                foreach(var heading in headings)
                {
                    if (heading.UserId is not null && !isImageAvailables.ContainsKey(heading.UserId.Value))
                    {
                        bool isImageAvailable = await UrlExists($"{Configuration["ApiBaseUrl"]}/file/images/user-profile/{heading.UserId.ToString()}");
                        isImageAvailables.Add(heading.UserId.Value, isImageAvailable);
                    }
                }

            }
            isLoading = false;

        }

        await base.OnInitializedAsync();
    }

    private async Task<bool> UrlExists(string url)
    {
        try
        {
            var response = await Http.GetAsync(url);
            return response.IsSuccessStatusCode;
        }
        catch
        {
            return false;
        }
    }
}
