<div class="row recent-heading-list-container">
    <h3 class="sidebar-title">Recent Headings</h3>
    @if (isLoading)
    {
        
    }
    else
    {
        <div class="recent-heading-list">
        @for (int i=0; i < headings!.Count(); i++)
        {
            var heading = headings![i];
            <div class="d-flex flex-start @((i == 0) ? "mt-1" : "mt-3")">
                <a class="me-3 no-image-user-profile-link" href="@($"user/{heading.UserName}")">
                <span class=no-image-user-profile>
                    @heading.UserName.ToUpper()[0]
                </span>
                @* <img class="rounded shadow-1-strong"
                    src="https://mdbcdn.b-cdn.net/img/Photos/Avatars/img%20(32).webp" alt="avatar"
                    width="50" height="50" /> *@
                </a>
                <div class="flex-grow-1 flex-shrink-1">
                <div>
                    <div>
                        <h4 class="recent-heading-title">
                            <a href="@($"category/{heading.CategoryName.ToFriendlyUrl()}-{heading.CategoryIntId}/{heading.Id.EncodeGuidToBase64Url()}/{heading.Title.ToFriendlyUrl()}")">@heading.Title</a>
                        </h4>
                        <div class="recent-heading-title-info">
                            <span class="small">@heading.UserName.Split('@')[0]</span>
                            <span class="badge recent-heading-category-badge">@heading.CategoryName</span>
                            @* <span class="small">@heading.ActiveDate</span> *@
                        </div>
                    </div>
                </div>
                </div>
            </div>
        }
        </div>
    }
</div>


@code {
    private bool isLoading = true;

    [Inject]
    private IHeadingService? headingService { get; set; }

    private List<HeadingVM>? headings;

    private int headingLimit = 10;



    protected async override Task OnInitializedAsync()
    {
        if(headingService is not null)
        {
            GetHeadingsWithPaginationQueryVM query = new GetHeadingsWithPaginationQueryVM
            {
                SortType = SortTypeVM.RECENT,
                PageIndex = 1,
                PageSize = headingLimit,
            };

            HeadingsPaginationVM pagination = await headingService.GetHeadingsWithPagination(query);

            headings = pagination.Headings;


            if(headings is not null && headings.Count > 0)
            {
                isLoading = false;
            }
        }

        await base.OnInitializedAsync();
    }

}
