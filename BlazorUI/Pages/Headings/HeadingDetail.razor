@page "/category/{CategoryName}/{FriendlyUrl}-{HeadingId:int}"
@page "/category/{CategoryName}/{FriendlyUrl}-{HeadingId:int}/{PageIndex:int}"
@page "/category/{CategoryName}/{FriendlyUrl}-{HeadingId:int}/{PageIndex:int}/{PostId:int}"

@inject IJSRuntime JS
@implements IAsyncDisposable


@if (Heading != null)
{
    <AddBreadcrumb Items="BreadcrumbItems"></AddBreadcrumb>
    <h1 class="heading-title">@Heading.Title</h1>
}

@if(Posts != null)
{
    @foreach (var post in Posts)
    {
        @* <PostCard Id="@post.Id.ToString()" Content="@post.Content" Username="@post.UserName"></PostCard> *@
        <MiniPostCard Post="post" 
            Id="@post.Id.ToString()" 
            PostId="@post.Id" 
            Content="@post.Content" 
            Username="@post.UserName" 
            IsOP='Heading!.UserName == post.UserName' 
            LikeCallback="(postId) => LikePost(postId)" 
            UnLikeCallback="(postId) => UnLikePost(postId)" 
            AddFavoriteCallback="(postId) => AddFavorite(postId)"
            ReplyCallback="(postId) => AddReply(postId)"></MiniPostCard>
    }
    <Pagination TotalPages="@TotalPages" CurrentPage="@CurrentPage" BaseUrl="@getBaseUrl()" />
    <CreatePostForm @ref=child Model="CreateModel" HeadingId="@HeadingId" Callback="RefreshPosts"></CreatePostForm>
}
else
{
    <p>Loading...</p>
}



@code {
    [Parameter]
    public string CategoryName { get; set; }

    [Parameter]
    public string FriendlyUrl { get; set; }

    [Parameter]
    public int HeadingId { get; set; }

    [Parameter]
    public int PostId { get; set; }

    [Parameter]
    public int PageIndex { get; set; } = 1;

    [Inject]
    public IPostService PostService { get; set; }

    [Inject]
    public IHeadingService HeadingService { get; set; }

    [Inject]
    public ICategoryService CategoryService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public ILikeService LikeService { get; set; }

    [Inject]
    public IFavoriteService FavoriteService { get; set; }

    [Inject]
    public IUserService UserService { get; set; }

    HeadingVM? Heading { get; set; }

    UserInfoVM CurrentUser { get; set; }

    public List<PostVM>? Posts { get; private set; }
    public PostVM CreateModel { get; set; }

    private List<BreadcrumbItem> BreadcrumbItems { get; set; }


    public List<LikeVM>? Likes { get; private set; }
    public List<FavoriteVM>? Favorites { get; private set; }

    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    private string getBaseUrl()
    {
        return $"category/{CategoryName}/{FriendlyUrl}-{HeadingId}/";
    }

    // Pagination variables
    private int PageSize = 10; // Number of items per page
    private int TotalPages = 1;
    private int CurrentPage = 1;

    private IJSInProcessObjectReference? module;

    private string? CurrentUsername { get; set; }

    CreatePostForm child;

    protected async Task SetBreadcrumb()
    {
        var parentCategories = await CategoryService.GetParentCategoriesByName(CategoryName);
        parentCategories = parentCategories.OrderBy(x => x.Id).ToList();

        BreadcrumbItems = new List<BreadcrumbItem>();
        BreadcrumbItems.Add(new BreadcrumbItem { Text = "Homepage", HrefLink = $"/" });
        foreach (var parent in parentCategories)
        {
            BreadcrumbItems.Add(new BreadcrumbItem { Text = parent.Name, HrefLink = $"/category/{parent.Name}/" });
        }
        BreadcrumbItems.Add(new BreadcrumbItem { Text = Heading!.Title, IsCurrentPage = true });
    }

    private void SetFavorites()
    {
        if (Posts == null || Favorites == null)
            return;

        foreach (var post in Posts)
        {
            var favorite = Favorites.FirstOrDefault(x => x.PostId == post.Id && x.UserName == CurrentUsername);

            if(favorite != null)
            {
                post.IsFavorite = true;
            }
            else
            {
                post.IsFavorite = false;
            }
        }
    }

    private void SetLikes()
    {
        if (Posts == null || Likes == null)
            return;

        foreach (var post in Posts)
        {
            post.LikeCounter = Likes.Where(x => x.PostId == post.Id && x.IsLike == true).Count();
            post.UnlikeCounter = Likes.Where(x => x.PostId == post.Id && x.IsLike == false).Count();
            var like = Likes.FirstOrDefault(x => x.PostId == post.Id && x.UserName == CurrentUsername);
            if(like != null)
            {
                post.IsLike = like.IsLike;
            }
            else
            {
                post.IsLike = null;
            }
        }
    }

    protected async override Task OnParametersSetAsync()
    {
        CreateModel = new PostVM();

        if (PageIndex == 0) PageIndex = 1;

        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            CurrentUsername = user.Identity.Name;
        }

        CurrentPage = PageIndex;
        Heading = await HeadingService.GetHeadingById(HeadingId);
        PostsPaginationVM postPagination = await PostService.GetPostsByHeadingIdWithPagination(HeadingId, PageIndex, PageSize);
        Posts = postPagination.Posts;

        Likes = await LikeService.GetLikesByHeadingId(HeadingId);

        if(CurrentUsername != null)
        {
            Favorites = await FavoriteService.GetFavoritesByHeadingIdAndUserName(HeadingId, CurrentUsername);
        }

        SetLikes();
        SetFavorites();

        await ScrollToEntry();
        TotalPages = (int)Math.Ceiling((double)postPagination.TotalCount / PageSize);

        await SetBreadcrumb();

        await InvokeAsync(StateHasChanged);
    }

    private async Task ScrollToEntry()
    {
        StateHasChanged();
        await JSRun();
    }

    protected async Task JSRun()
    {
        if (PostId != 0)
        {
            module = await JS.InvokeAsync<IJSInProcessObjectReference>("import", "./Pages/Headings/HeadingDetail.razor.js");
            await module.InvokeAsync<string>("BlazorScrollToId", PostId.ToString());
        }
    }

    protected async Task RefreshPosts()
    {
        PostsPaginationVM postPagination = await PostService.GetPostsByHeadingIdWithPagination(HeadingId, 1, PageSize);
        Posts = postPagination.Posts;
        await ScrollToEntry();
        TotalPages = (int)Math.Ceiling((double)postPagination.TotalCount / PageSize);
        await InvokeAsync(StateHasChanged);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }

    protected async Task LikePost(int PostId)
    {
        LikeVM newLike = new LikeVM
        {
            PostId = PostId,
            HeadingId = Heading!.Id,
            IsLike = true
        };

        var post = Posts.FirstOrDefault(x => x.Id == PostId);

        if (post != null)
        {
            if (post.IsLike == true)
            {
                post.IsLike = null;
                post.LikeCounter--;
            }
            else if(post.IsLike == false)
            {
                post.IsLike = true;
                post.LikeCounter++;
                post.UnlikeCounter--;
            }
            else if(post.IsLike == null)
            {
                post.IsLike = true;
                post.LikeCounter++;
            }

        }
        await InvokeAsync(StateHasChanged);

        await LikeService.AddLike(newLike);
    }

    protected async Task UnLikePost(int PostId)
    {
        LikeVM newLike = new LikeVM
        {
            PostId = PostId,
            HeadingId = Heading!.Id,
            IsLike = false
        };

        var post = Posts.FirstOrDefault(x => x.Id == PostId);

        if (post != null)
        {
            if(post.IsLike == false)
            {
                post.IsLike = null;
                post.UnlikeCounter--;
            }
            else if (post.IsLike == true)
            {
                post.IsLike = false;
                post.UnlikeCounter++;
                post.LikeCounter--;
            }
            else if (post.IsLike == null)
            {
                post.IsLike = false;
                post.UnlikeCounter++;
            }
        }
        await InvokeAsync(StateHasChanged);

        await LikeService.AddLike(newLike);
    }

    protected async Task AddFavorite(int PostId)
    {
        FavoriteVM newFavorite = new FavoriteVM
        {
            PostId = PostId,
            HeadingId = Heading!.Id,
        };

        var post = Posts.FirstOrDefault(x => x.Id == PostId);

        if(post != null)
        {
            post.IsFavorite = !post.IsFavorite;
        }

        await InvokeAsync(StateHasChanged);
        await FavoriteService.AddFavorite(newFavorite);
    }

    protected async Task AddReply(int PostId)
    {
        CreateModel.Content += $"\n<div contenteditable='false' style='background:yellow'>test</div>\n<p>cevap yaz..</p>";
        await child.SetContenteditable();
        await InvokeAsync(StateHasChanged);
    }
}