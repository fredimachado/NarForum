@page "/category/{CategoryName}/{FriendlyUrl}-{HeadingId:int}"
@page "/category/{CategoryName}/{FriendlyUrl}-{HeadingId:int}/{PageIndex:int}"

<p>Heading Detail</p>

@if(Posts != null)
{
    @foreach (var post in Posts)
    {
        <PostCard Id="@post.Id.ToString()" Content="@post.Content"></PostCard>
    }
    <Pagination TotalPages="@TotalPages" CurrentPage="@CurrentPage" BaseUrl="@getBaseUrl()" />
}
else
{
    <p>Loading...</p>
}

<CreatePostForm HeadingId="@HeadingId" Callback="RefreshPosts"></CreatePostForm>


@code {
    [Parameter]
    public string CategoryName { get; set; }

    [Parameter]
    public string FriendlyUrl { get; set; }

    [Parameter]
    public int HeadingId { get; set; }

    [Parameter]
    public int PageIndex { get; set; } = 1;

    [Inject]
    public IPostService PostService { get; set; }

    public List<PostVM>? Posts { get; private set; }

    private string getBaseUrl()
    {
        return $"category/{CategoryName}/{FriendlyUrl}-{HeadingId}/";
    }

    // Pagination variables
    private int PageSize = 3; // Number of items per page
    private int TotalPages = 1;
    private int CurrentPage = 1;

    protected async override Task OnParametersSetAsync()
    {
        if (PageIndex == 0) PageIndex = 1;

        CurrentPage = PageIndex;
        PostsPaginationVM postPagination = await PostService.GetPostsByHeadingIdWithPagination(HeadingId, PageIndex, PageSize);
        Posts = postPagination.Posts;
        TotalPages = (int)Math.Ceiling((double)postPagination.TotalCount / PageSize);
        await InvokeAsync(StateHasChanged);
    }

    protected async Task RefreshPosts()
    {
        PostsPaginationVM postPagination = await PostService.GetPostsByHeadingIdWithPagination(HeadingId, 1, PageSize);
        Posts = postPagination.Posts;
        TotalPages = (int)Math.Ceiling((double)postPagination.TotalCount / PageSize);
        await InvokeAsync(StateHasChanged);
    }
}
