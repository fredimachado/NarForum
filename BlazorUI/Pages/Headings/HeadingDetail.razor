@page "/category/{CategoryName}/{FriendlyUrl}-{HeadingId:int}"
@page "/category/{CategoryName}/{FriendlyUrl}-{HeadingId:int}/{PageIndex:int}"
@page "/category/{CategoryName}/{FriendlyUrl}-{HeadingId:int}/{PageIndex:int}/{PostId:int}"

@inject IJSRuntime JS
@implements IAsyncDisposable


@if (Heading != null)
{
    <AddBreadcrumb Items="BreadcrumbItems"></AddBreadcrumb>
    <h1 class="heading-title">@Heading.Title</h1>
}

@if(Posts != null)
{
    @foreach (var post in Posts)
    {
        @* <PostCard Id="@post.Id.ToString()" Content="@post.Content" Username="@post.UserName"></PostCard> *@
        <MiniPostCard Id="@post.Id.ToString()" Content="@post.Content" Username="@post.UserName"></MiniPostCard>
    }
    <Pagination TotalPages="@TotalPages" CurrentPage="@CurrentPage" BaseUrl="@getBaseUrl()" />
}
else
{
    <p>Loading...</p>
}

<CreatePostForm HeadingId="@HeadingId" Callback="RefreshPosts"></CreatePostForm>


@code {
    [Parameter]
    public string CategoryName { get; set; }

    [Parameter]
    public string FriendlyUrl { get; set; }

    [Parameter]
    public int HeadingId { get; set; }

    [Parameter]
    public int PostId { get; set; }

    [Parameter]
    public int PageIndex { get; set; } = 1;

    [Inject]
    public IPostService PostService { get; set; }

    [Inject]
    public IHeadingService HeadingService { get; set; }

    [Inject]
    public ICategoryService CategoryService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    HeadingVM? Heading { get; set; }

    public List<PostVM>? Posts { get; private set; }

    private List<BreadcrumbItem> BreadcrumbItems { get; set; }

    private string getBaseUrl()
    {
        return $"category/{CategoryName}/{FriendlyUrl}-{HeadingId}/";
    }

    // Pagination variables
    private int PageSize = 10; // Number of items per page
    private int TotalPages = 1;
    private int CurrentPage = 1;

    private IJSInProcessObjectReference? module;

    protected async Task SetBreadcrumb()
    {
        var parentCategories = await CategoryService.GetParentCategoriesByName(CategoryName);
        parentCategories = parentCategories.OrderBy(x => x.Id).ToList();

        BreadcrumbItems = new List<BreadcrumbItem>();
        BreadcrumbItems.Add(new BreadcrumbItem { Text = "Homepage", HrefLink = $"/" });
        foreach (var parent in parentCategories)
        {
            BreadcrumbItems.Add(new BreadcrumbItem { Text = parent.Name, HrefLink = $"/category/{parent.Name}/" });
        }
        BreadcrumbItems.Add(new BreadcrumbItem { Text = Heading!.Title, IsCurrentPage = true });
    }

    protected async override Task OnParametersSetAsync()
    {
        if (PageIndex == 0) PageIndex = 1;

        CurrentPage = PageIndex;
        Heading = await HeadingService.GetHeadingById(HeadingId);
        PostsPaginationVM postPagination = await PostService.GetPostsByHeadingIdWithPagination(HeadingId, PageIndex, PageSize);
        Posts = postPagination.Posts;
        await ScrollToEntry();
        TotalPages = (int)Math.Ceiling((double)postPagination.TotalCount / PageSize);

        await SetBreadcrumb();

        await InvokeAsync(StateHasChanged);
    }

    private async Task ScrollToEntry()
    {
        StateHasChanged();
        await JSRun();
    }

    protected async Task JSRun()
    {
        if (PostId != 0)
        {
            module = await JS.InvokeAsync<IJSInProcessObjectReference>("import", "./Pages/Headings/HeadingDetail.razor.js");
            await module.InvokeAsync<string>("BlazorScrollToId", PostId.ToString());
        }
    }
    

    protected async Task RefreshPosts()
    {
        PostsPaginationVM postPagination = await PostService.GetPostsByHeadingIdWithPagination(HeadingId, 1, PageSize);
        Posts = postPagination.Posts;
        await ScrollToEntry();
        TotalPages = (int)Math.Ceiling((double)postPagination.TotalCount / PageSize);
        await InvokeAsync(StateHasChanged);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}
