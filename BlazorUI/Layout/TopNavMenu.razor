@using BlazorUI.Services.Common
@using BlazorUI.Services.UI
@using Microsoft.AspNetCore.SignalR.Client;

@implements IAsyncDisposable;

<nav class="navbar navbar-expand-lg navbar-light top-nav-menu-wrapper sticky-top">
    <div class="container">
        <a class="navbar-brand" href="/">
            <Logo LogoVM="logo"></Logo>
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto top-nav-menu">
                <AuthorizeView>
                    <NotAuthorized>
                        <li class="nav-item">
                            <button @onclick="GoToLogin" class="btn btn-success">Login</button>
                        </li>
                        <li class="nav-item">
                            <button @onclick="GoToRegister" class="btn btn-primary">Register</button>
                        </li>
                    </NotAuthorized>
                    <Authorized>
                        <li class="nav-item">
                            <button @onclick=ShowChat type="button" class="btn btn-link nav-link">
                                <i class="bi bi-chat"></i>
                            </button>
                        </li>
                        <li class="nav-item">
                            <button type="button" class="btn btn-link nav-link py-2 px-0 px-lg-2 dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" data-bs-display="static">
                                <img src="images/profile.png" alt="user" width="25" class="rounded-circle">
                                <span>@UserName</span>
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end" data-bs-popper="static">
                                <li><a class="dropdown-item" href="#"><i class="bi bi-gear"></i> User Settings</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" @onclick="Logout"><i class="bi bi-box-arrow-right"></i> Logout</a></li>
                            </ul>
                        </li>
                    </Authorized>
                </AuthorizeView>
            </ul>
        </div>
    </div>
</nav>

@if(showChat)
{
    <ChatBox OpenCreateChatBox=openCreateChat UserName=@createChatUserName HubConnection=@hubConnection></ChatBox>
}


@code {
    UserInfoVM? Model;

    ChatBox? chatBox;
    private string? createChatUserName;
    private bool openCreateChat;


    public string UserName { get; set; }

    [Inject]
    public IUserService UserService { get; set; }

    [Inject]
    public RefreshStateService RefreshStateService { get; set; }

    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public IAuthenticationService AuthenticationService { get; set; }

    [Inject]
    LocalStorageService localStorage { get; set; }

    [Inject]
    ILogoService? logoService { get; set; }

    private bool showChat;

    private LogoVM? logo;


    // hub ---------------------------------------------------------------

    private HubConnection? hubConnection;



    protected async override Task OnInitializedAsync()
    {
        if(logoService is not null)
        {
            logo = await logoService.GetLogo();
        }


        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
            await ConnectChatHubWhenLogin();
        }

        RefreshStateService.OpenChatBox += OpenChatBox;
        RefreshStateService.ConnectChatHubWhenLogin = ConnectChatHubWhenLogin;

        // Model = await UserService.GetUserInfo(UserName);
    }

    protected void GoToLogin()
    {
        NavigationManager.NavigateTo("login/");
    }

    protected void GoToRegister()
    {
        NavigationManager.NavigateTo("register/");
    }



    protected async void Logout()
    {
        NavigationManager.NavigateTo("login/", true);
        await AuthenticationService.Logout();
    }

    private async void ShowChat()
    {
        showChat = !showChat;

        openCreateChat = false;
        createChatUserName = null;

        await InvokeAsync(StateHasChanged);
    }

    private async Task OpenChatBox(string userName) {
        showChat = true;
        openCreateChat = true;
        createChatUserName = userName;

        await InvokeAsync(StateHasChanged);
    }


    private async Task ConnectChatHubWhenLogin()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;

            var selfUser = await UserService.GetUserInfo(UserName!);

            


            string token = await localStorage.GetItem("token");

            hubConnection = new HubConnectionBuilder()
            .WithUrl(
                $"https://localhost:44342/chat",
                o =>
                {
                    o.AccessTokenProvider = () => Task.FromResult<string?>(token);
                    o.Url = new Uri($"https://localhost:44342/chat?username={UserName}&userId={selfUser.Id}");
                    o.SkipNegotiation = true;
                    o.Transports = Microsoft.AspNetCore.Http.Connections.HttpTransportType.WebSockets;
                }
            ).Build();

            hubConnection.Closed += async (error) =>
            {
                if (error != null)
                {
                    // hata meydana gelirse yeniden bağlamı işini burada yap
                }
                else
                {
                    // kapat
                    await hubConnection.StopAsync();
                }
            };

            hubConnection.On<string, string>("ReceiveChatRequest", async (fromUser, message) =>
            {
                if (message != null)
                {

                }
                await InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();
        }
    }


    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
        }
    }

}

