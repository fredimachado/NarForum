@page "/blog/posts"
@using AdminUI.Models.BlogPost
<div class="row">
    <div class="col-sm-6">
        <h3>Blog Posts</h3>
    </div>
    <div class="col-sm-6 text-end">
        <button type="button" class="btn btn-primary" @onclick=DirectCreateBlogPost><i class="bi bi-file-plus-fill"></i> Create Blog Post</button>
    </div>
</div>

<BlogPostFilter QueryModel="query" Callback="RefreshListFilter"></BlogPostFilter>

<table class="table table-bordered table-hover caption-top">
    <caption>List of Blog Posts</caption>
    <thead>
        <tr>
            <th scope="col" style="width:70px;">Id</th>
            <th scope="col">Title</th>
            <th scope="col" style="width:20%">Category</th>
            <th scope="col" style="width:20%">Action</th>
        </tr>
    </thead>
    <tbody>
        @if (!isLoaded)
        {
            <p>Loading Data...</p>
        }
        else
        {
            @foreach (var blogPost in BlogPosts)
            {
                <tr>
                    <th scope="row" class="text-end align-middle">@blogPost.Url</th>
                    <td class="align-middle">
                        <a @onclick="() =>DetailBlogPost(blogPost)">@blogPost.Title</a>
                    </td>
                    @if(blogPost.BlogCategory is not null)
                    {
                        <td class="align-middle">@blogPost.BlogCategory.Name</td>
                    }
                    else
                    {
                        <td class="align-middle">-</td>
                    }
                    <td class="text-end align-middle">
                        <button type="button" class="btn btn-warning" @onclick="() => DetailBlogPost(blogPost)"><i class="bi bi-pencil-square"></i></button>
                        <button type="button" class="btn btn-danger" @onclick="() => DetailBlogPost(blogPost)"><i class="bi bi-trash"></i></button>
                    </td>
                </tr>
            }
        }

    </tbody>
</table>

@if (isLoaded)
{
    <Pagination UseCallback="true" TotalPages="@TotalPages" CurrentPage="@CurrentPage" PageChanged="PageChanged" />
}


@code {
    [Parameter]
    public int PageIndex { get; set; } = 1;


    public List<BlogPostVM>? BlogPosts { get; set; }

    [Inject]
    public IBlogPostService BlogPostService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    // Pagination variables
    private int PageSize = 10; // Number of items per page
    private int TotalPages = 1;
    private int CurrentPage = 1;

    private bool isLoaded { get; set; }

    GetBlogPostsWithPaginationQueryVM query = new GetBlogPostsWithPaginationQueryVM();

    protected async override Task OnParametersSetAsync()
    {
        if (PageIndex == 0) PageIndex = 1;
        CurrentPage = PageIndex;

        query = new GetBlogPostsWithPaginationQueryVM
        {
            PageIndex = PageIndex,
            PageSize = PageSize,
            IsInclude = true
        };

        BlogPostsPaginationVM blogPostsPaginationVM = await BlogPostService.GetBlogPostsWithPagination(query);
        BlogPosts = blogPostsPaginationVM.BlogPosts;
        TotalPages = (int)Math.Ceiling((double)blogPostsPaginationVM.TotalCount / PageSize);

        isLoaded = true;
    }

    protected async Task RefreshList()
    {
        BlogPostsPaginationVM blogPostsPaginationVM = await BlogPostService.GetBlogPostsWithPagination(query);
        BlogPosts = blogPostsPaginationVM.BlogPosts;
        TotalPages = (int)Math.Ceiling((double)blogPostsPaginationVM.TotalCount / PageSize);

        isLoaded = true;
        await InvokeAsync(StateHasChanged);
    }

    protected async Task RefreshListFilter()
    {
        query.PageIndex = 1;
        CurrentPage = 1;

        await RefreshList();
    }


    protected async Task PageChanged(int currentPage)
    {
        query.PageIndex = currentPage;
        CurrentPage = currentPage;
        await RefreshList();
    }

    protected void DetailBlogPost(BlogPostVM blog)
    {
        NavigationManager.NavigateTo($"blog/update/post/{blog.Title.ToFriendlyUrl()}/{blog.Id}");
    }

    protected async Task DeleteCategory(BlogPostVM blogPost)
    {
        RemoveBlogPostCommandVM command = new RemoveBlogPostCommandVM
        {
            Id = blogPost.Id.Value
        };

        await BlogPostService.RemoveBlogPost(command);
    }

    protected void DirectCreateBlogPost()
    {
        NavigationManager.NavigateTo("blog/create/post");
    }
}