@page "/heading/list"

<h3>Heading List</h3>

<HeadingsFilter QueryModel="query" Callback="RefreshListFilter"></HeadingsFilter>

<table class="table table-bordered table-hover caption-top">
    <caption>List of users</caption>
    <thead>
        <tr>
            <th scope="col">Title</th>
            <th scope="col">Category</th>
            <th scope="col" style="width:20%">Author</th>
            <th scope="col" style="width:20%">Action</th>
        </tr>
    </thead>
    <tbody>
        @if (!isLoaded)
        {
            <p>Loading Data...</p>
        }
        else
        {
            @foreach (var heading in Headings)
            {
                <tr>
                    <th class="align-middle">
                        <div class="cell-content">
                            <div class="flex-fill text-center">
                                @heading.Id
                            </div>
                            <div class="text-center align-middle">
                                @heading.Title
                            </div>
                        </div>
                    </th>
                    <td class="align-middle">@heading.CategoryName</td>
                    <td class="align-middle">@heading.UserName</td>
                    <td class="text-end align-middle">
                        <button type="button" class="btn btn-warning" @onclick="() => DetailHeading(heading)"><i class="bi bi-pencil-square"></i></button>
                        <button type="button" class="btn btn-primary" @onclick="() => DetailHeading(heading)"><i class="bi bi-card-text"></i></button>
                        <button type="button" class="btn btn-danger" @onclick="() => DeleteHeading(heading)"><i class="bi bi-trash"></i></button>
                    </td>
                </tr>
            }
        }
        
    </tbody>
</table>

@if (isLoaded)
{
    <Pagination UseCallback="true" TotalPages="@TotalPages" CurrentPage="@CurrentPage" PageChanged="PageChanged" />
}

@code {
    [Parameter]
    public int PageIndex { get; set; } = 1;

    public List<HeadingVM>? Headings { get; set; }

    [Inject]
    public IHeadingService HeadingService { get; set; }

    HeadingPaginationQueryVM query = new HeadingPaginationQueryVM();

    // Pagination variables
    private int PageSize = 10; // Number of items per page
    private int TotalPages = 1;
    private int CurrentPage = 1;

    private bool isLoaded { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        if (PageIndex == 0) PageIndex = 1;
        CurrentPage = PageIndex;

        query = new HeadingPaginationQueryVM
        {
            PageIndex = PageIndex,
            PageSize = PageSize
        };

        HeadingsPaginationVM headingsPagination = await HeadingService.GetHeadingsWithPagination(query);
        Headings = headingsPagination.Headings;
        TotalPages = (int)Math.Ceiling((double)headingsPagination.TotalCount / PageSize);

        isLoaded = true;
    }

    protected async Task RefreshList()
    {
        HeadingsPaginationVM headingsPagination = await HeadingService.GetHeadingsWithPagination(query);
        Headings = headingsPagination.Headings;
        TotalPages = (int)Math.Ceiling((double)headingsPagination.TotalCount / PageSize);

        isLoaded = true;
        await InvokeAsync(StateHasChanged);
    }

    protected async Task RefreshListFilter()
    {
        query.PageIndex = 1;
        CurrentPage = 1;
        
        await RefreshList();
    }


    protected async Task PageChanged(int currentPage)
    {
        query.PageIndex = currentPage;
        CurrentPage = currentPage;
        await RefreshList();
    }

    protected async Task DetailHeading(HeadingVM heading)
    {

    }

    protected async Task DeleteHeading(HeadingVM heading)
    {
        RemoveHeadingCommandVM command = new RemoveHeadingCommandVM
        {
            HeadingId = heading.Id
        };

        await HeadingService.RemoveHeading(command);
    }
}
