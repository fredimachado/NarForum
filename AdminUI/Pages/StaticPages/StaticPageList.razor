@page "/pages"


<div class="row">
    <div class="col-sm-6">
        <h3>Static Pages</h3>
    </div>
    <div class="col-sm-6 text-end">
        <button type="button" class="btn btn-primary" @onclick=DirectCreateStaticPage><i class="bi bi-file-earmark-plus-fill"></i> Create Static Page</button>
    </div>
</div>

<StaticPageFilter QueryModel="query" Callback="RefreshListFilter"></StaticPageFilter>

<table class="table table-bordered table-hover caption-top forum-table">
    <caption>List of Static Pages</caption>
    <thead>
        <tr>
            <th scope="col">Title</th>
            <th scope="col" style="width:20%">Action</th>
        </tr>
    </thead>
    <tbody>
        @if (!isLoaded)
        {
            <p>Loading Data...</p>
        }
        else
        {
            @foreach (var staticPage in StaticPages)
            {
                <tr>
                    <td class="align-middle">@staticPage.Title</td>
                    <td class="text-end align-middle">
                        <button type="button" class="btn btn-warning" @onclick="() => DetailStaticPage(staticPage)"><i class="bi bi-pencil-square"></i></button>
                        <button type="button" class="btn btn-danger" @onclick="() => DeleteStaticPage(staticPage)"><i class="bi bi-trash"></i></button>
                    </td>
                </tr>
            }
        }

    </tbody>
</table>

@if (isLoaded)
{
    <Pagination UseCallback="true" TotalPages="@TotalPages" CurrentPage="@CurrentPage" PageChanged="PageChanged" />
}

<ConfirmModal @ref=deleteStaticPageModal Callback="DeleteStaticPageCallback" ModalTitle="Remove Confirmation" MessageContent="Are you sure you want to remove this static page?"></ConfirmModal>

@code {
    [Parameter]
    public int PageIndex { get; set; } = 1;


    public List<StaticPageVM>? StaticPages { get; set; }

    [Inject]
    public IPageService PageService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    // Pagination variables
    private int PageSize = 10; // Number of items per page
    private int TotalPages = 1;
    private int CurrentPage = 1;

    private bool isLoaded { get; set; }

    GetStaticPagesWithPaginationQueryVM query = new GetStaticPagesWithPaginationQueryVM();

    ConfirmModal? deleteStaticPageModal;
    private StaticPageVM? SelectedModel { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        if (PageIndex == 0) PageIndex = 1;
        CurrentPage = PageIndex;

        query = new GetStaticPagesWithPaginationQueryVM
        {
            PageIndex = PageIndex,
            PageSize = PageSize
        };

        StaticPagesPaginationVM staticPagesPaginationVM = await PageService.GetStaticPagesWithPagination(query);
        StaticPages = staticPagesPaginationVM.StaticPages;
        TotalPages = (int)Math.Ceiling((double)staticPagesPaginationVM.TotalCount / PageSize);

        isLoaded = true;
    }

    protected async Task RefreshList()
    {
        StaticPagesPaginationVM staticPagesPaginationVM = await PageService.GetStaticPagesWithPagination(query);
        StaticPages = staticPagesPaginationVM.StaticPages;
        TotalPages = (int)Math.Ceiling((double)staticPagesPaginationVM.TotalCount / PageSize);

        isLoaded = true;
        await InvokeAsync(StateHasChanged);
    }

    protected async Task RefreshListFilter()
    {
        query.PageIndex = 1;
        CurrentPage = 1;

        await RefreshList();
    }


    protected async Task PageChanged(int currentPage)
    {
        query.PageIndex = currentPage;
        CurrentPage = currentPage;
        await RefreshList();
    }

    protected async Task DetailStaticPage(StaticPageVM staticPage)
    {
        NavigationManager.NavigateTo($"pages/update/staticpage/{staticPage.Title.ToFriendlyUrl()}/{staticPage.Id}");
    }

    protected async Task DeleteCategory(StaticPageVM staticPage)
    {
        RemoveStaticPageCommandVM command = new RemoveStaticPageCommandVM
        {
            Id = staticPage.Id
        };

        await PageService.RemoveStaticPage(command);
    }

    protected void DirectCreateStaticPage()
    {
        NavigationManager.NavigateTo("pages/create/staticpage");
    }

    private void DeleteStaticPage(StaticPageVM staticPage)
    {
        SelectedModel = staticPage;
        deleteStaticPageModal?.ShowModal();
    }

    protected async Task DeleteStaticPageCallback()
    {
        if (SelectedModel is not null)
        {
            RemoveStaticPageCommandVM command = new RemoveStaticPageCommandVM
            {
                Id = SelectedModel.Id
            };

            var response = await PageService.RemoveStaticPage(command);
            if(response.IsSuccess)
            {
                await RefreshList();
                deleteStaticPageModal?.CloseModal();
            }

        }
    }
}
