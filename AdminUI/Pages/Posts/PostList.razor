@page "/post/list"
@using AdminUI.Pages.Posts.Modal

<h3>Post</h3>

<PostFilter QueryModel="query" Callback="RefreshListFilter"></PostFilter>

<table class="table table-bordered table-hover caption-top forum-table">
    <caption>List of users</caption>
    <thead>
        <tr>
            <th style="width:20%">Heading</th>
            <th style="width:30%">Content</th>
            <th style="width:10%">Author</th>
            <th style="width:15%">Category</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (!isLoaded)
        {
            <p>Loading Data...</p>
        }
        else
        {
            @foreach (var post in Posts)
            {
                <tr>
                    <td scope="row">
                        <div class="cell-content">
                            <div class="flex-fill">
                                @post.HeadingId
                            </div>
                            <div class="align-middle">
                                @post.HeadingTitle
                            </div>
                        </div>
                        </td>
                    <td class="align-middle">@(post.Content.Length < 155 ? post.Content : post.Content.Substring(0, 154))...</td>
                    <td class="align-middle">@post.UserName</td>
                    <td class="align-middle">@post.CategoryName</td>
                    <td class="text-end align-middle">
                        <button type="button" class="btn btn-primary" @onclick="() => DetailPost(post)"><i class="bi bi-card-text"></i></button>
                        <button type="button" class="btn btn-danger" @onclick="() => DeletePost(post)"><i class="bi bi-trash"></i></button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>


@if (isLoaded)
{
    <Pagination UseCallback="true" TotalPages="@TotalPages" CurrentPage="@CurrentPage" PageChanged="PageChanged" />
}

<DetailPostModal @ref=detailPostModal Model="SelectedModel" Callback="RefreshList"></DetailPostModal>

@code {
    [Parameter]
    public int PageIndex { get; set; } = 1;

    public List<PostVM>? Posts { get; set; }

    [Inject]
    public IPostService PostService { get; set; }

    PostPaginationQueryVM query = new PostPaginationQueryVM();

    // Pagination variables
    private int PageSize = 10; // Number of items per page
    private int TotalPages = 1;
    private int CurrentPage = 1;

    private bool isLoaded { get; set; }

    DetailPostModal? detailPostModal;
    private PostVM? SelectedModel { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        if (PageIndex == 0) PageIndex = 1;
        CurrentPage = PageIndex;

        query = new PostPaginationQueryVM
        {
            IsWithHeading = true,
            PageIndex = PageIndex,
            PageSize = PageSize
        };

        PostsPaginationVM postsPagination = await PostService.GetPostsWithPagination(query);
        Posts = postsPagination.Posts;
        TotalPages = (int)Math.Ceiling((double)postsPagination.TotalCount / PageSize);

        isLoaded = true;
    }

    protected async Task RefreshList()
    {
        PostsPaginationVM postsPagination = await PostService.GetPostsWithPagination(query);
        Posts = postsPagination.Posts;
        TotalPages = (int)Math.Ceiling((double)postsPagination.TotalCount / PageSize);

        isLoaded = true;
        await InvokeAsync(StateHasChanged);
    }

    protected async Task RefreshListFilter()
    {
        query.PageIndex = 1;
        CurrentPage = 1;

        await RefreshList();
    }


    protected async Task PageChanged(int currentPage)
    {
        query.PageIndex = currentPage;
        CurrentPage = currentPage;
        await RefreshList();
    }

    protected void DetailPost(PostVM post)
    {
        SelectedModel = post;

        detailPostModal?.ShowModal();
    }

    protected async Task DeletePost(PostVM post)
    {
        RemovePostCommandVM command = new RemovePostCommandVM
        {
            PostId = post.Id
        };

        await PostService.RemovePost(command);
    }
}