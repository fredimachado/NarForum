@using AdminUI.Models.Authorization.Role


<Modal @ref="modal" ModalId="addRoleModal" ModalTitle="Add Role" Callback="@HandleRegister">
    <EditForm Model="@Model" OnValidSubmit="HandleRegister">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label asp-for="Name" class="control-label">Name</label>
            <InputText id="Name" class="form-control" @bind-Value="@Model.Name" autocomplete="off" placeholder="Ex: Moderator"></InputText>
            <ValidationMessage For="@(() => Model.Name)" />
        </div>
        <div class="form-group">
            <label asp-for="Name" class="control-label">Normalized Name</label>
            <InputText id="Name" class="form-control" @bind-Value="@Model.NormalizedName" autocomplete="off" placeholder="Ex: MODERATOR"></InputText>
            <ValidationMessage For="@(() => Model.NormalizedName)" />
        </div>
    </EditForm>
</Modal>


@code {
    Modal? modal;

    public UpdateRoleRequestVM? Model { get; set; }

    [Inject]
    private IRoleService? RoleService { get; set; }

    [Parameter]
    public EventCallback<int> Callback { get; set; }

    protected override void OnInitialized()
    {
        Model = new UpdateRoleRequestVM();
    }

    public void ShowModal()
    {
        modal?.ShowModal();
    }

    public void CloseModal()
    {
        modal?.CloseModal();
    }

    protected async Task HandleRegister()
    {
        if (Model != null && RoleService != null)
        {
            if (String.IsNullOrEmpty(Model.Name) || String.IsNullOrEmpty(Model.NormalizedName))
            {
                return;
            }

            var result = await RoleService.UpdateRole(Model);

            // add toast message
        }

        await Callback.InvokeAsync();
        CloseModal();
    }
}
