<h3 class="filter-header">Filter</h3>

@if (QueryModel != null)
{
    <EditForm Model="@QueryModel" OnValidSubmit="HandleQuery">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row">
            <div class="col-sm-3">
                <label asp-for="Title" class="control-label">Select Blog Post</label>
                <InputSelect class="form-select" aria-label="Default select example" @bind-Value="@QueryModel.BlogPostId" @onchange="OnChangeBlogPost">
                    @if (!isLoading && blogPosts != null)
                    {
                        <option value="@string.Empty">All</option>
                        @foreach (var blogPost in blogPosts)
                        {
                            <option value="@blogPost.Id">@blogPost.Title</option>
                        }
                    }
                    else
                    {
                        <option disabled value="0">Loading...</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => QueryModel.BlogPostId)" />
            </div>
        </div>
        <div class="row" style="margin-top:10px;">
            <div class="col-sm-9">
            </div>
            <div class="col-sm-3 text-end">
                <div class="form-group">
                    <input type="submit" value="Filter" class="btn btn-primary" />
                </div>
            </div>
        </div>
    </EditForm>
}


@code {
    [Parameter]
    public GetBlogCommentsWithPaginationQueryVM? QueryModel { get; set; }

    [Parameter]
    public EventCallback<int> Callback { get; set; }

    [Inject]
    public IBlogPostService? blogPostService { get; set; }

    private List<BlogPostVM>? blogPosts;
    private BlogPostVM? selectedBlogPost;

    private bool isLoading = true;

    protected async override Task OnInitializedAsync()
    {

        if (blogPostService is not null)
        {
            var request = new GetBlogPostsQueryVM();
            blogPosts = await blogPostService.GetBlogPosts(request);
            isLoading = false;
        }

        await base.OnInitializedAsync();
    }


    private void OnChangeBlogPost()
    {
        
    }

    protected async Task HandleQuery()
    {
        if (Callback.HasDelegate)
        {
            await Callback.InvokeAsync();
        }
    }
}

