@using AdminUI.Models.Hub
@using AdminUI.Models.Stat
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json.Serialization
@using System.Text.Json
@inject AlertService alertService;
@implements IAsyncDisposable

<div class="row">
    <div class="col-12 col-sm-12 col-md-12 col-lg-12 col-xl-8">
        <div class="row dashboard-row">
            <div class="col-12 col-sm-12 col-md-6 col-lg-4 col-xl-3 col-xxl-2 p-0">
                <StatCard Name="Posts" 
                    BackgroundColor="#1a82dd" 
                    TotalCounter="@allStats.PostStats.TotalCount" 
                    DayCounter="@allStats.PostStats.TodayStat.Counter"></StatCard>
            </div>
            <div class="col-12 col-sm-12 col-md-6 col-lg-4 col-xl-3 col-xxl-2 p-0">
                <StatCard Name="Headings" 
                    BackgroundColor="#b698cf" 
                    TotalCounter="@allStats.HeadingStats.TotalCount"
                    DayCounter="@allStats.HeadingStats.TodayStat.Counter"></StatCard>
            </div>
            <div class="col-12 col-sm-12 col-md-6 col-lg-4 col-xl-3 col-xxl-2 p-0">
                <StatCard Name="Categories" 
                    BackgroundColor="#dac3cd" 
                    FontColor="#333"
                    TotalCounter="@allStats.CategoryStats.TotalCount"
                    DayCounter="@allStats.CategoryStats.TodayStat.Counter"></StatCard>
            </div>
            <div class="col-12 col-sm-12 col-md-6 col-lg-4 col-xl-3 col-xxl-2 p-0">
                <StatCard Name="Sections" 
                    BackgroundColor="#ff9695" 
                    FontColor="#333"
                    TotalCounter="@allStats.SectionStats.TotalCount"
                    DayCounter="@allStats.SectionStats.TodayStat.Counter"></StatCard>
            </div>
            <div class="col-12 col-sm-12 col-md-6 col-lg-4 col-xl-3 col-xxl-2 p-0">
                <StatCard Name="Users"
                    BackgroundColor="#ff886f"
                    FontColor="#333"
                    TotalCounter="@allStats.CategoryStats.TotalCount"
                    DayCounter="0"></StatCard>
            </div>
            <div class="col-12 col-sm-12 col-md-6 col-lg-4 col-xl-3 col-xxl-2 p-0">
                <StatCard Name="Online Users"
                    BackgroundColor="#ff8400"
                    FontColor="#333"
                    TotalCounter="@allStats.CategoryStats.TotalCount"
                    DayCounter="@activeUserCounter"></StatCard>
            </div>
        </div>
        <div class="row dashboard-row">
            <h3 class="dashboard-row-title">Forum Data</h3>
        </div>
        <div class="row dashboard-row">
            <div class="col-sm-6 dasboard-menu-button">
                <TotalView></TotalView>
                @* <DashboardCard Name="Categories" Icon="tag" Url="category/list"></DashboardCard> *@
            </div>
            <div class="col-sm-6 dasboard-menu-button">
                <BrowserView></BrowserView>
            </div>
            
        </div>
        <div class="row dashboard-row">
            <div class="col-sm-4 dasboard-menu-button">
                <DashboardCard Name="Sections" Icon="tag" Url="section/list"></DashboardCard>
            </div>
        </div>

        <div class="row dashboard-row">
            <h3 class="dashboard-row-title">User Management</h3>
        </div>
        <div class="row dashboard-row">
            <div class="col-sm-4 dasboard-menu-button">
                <DashboardCard Name="Users" Icon="people-fill" Url="user/list"></DashboardCard>
            </div>
            <div class="col-sm-4 dasboard-menu-button">
                <DashboardCard Name="Authorization" Icon="key" Url="authorization"></DashboardCard>
            </div>
        </div>

        <div class="row dashboard-row">
            <h3 class="dashboard-row-title">Contact</h3>
        </div>
        <div class="row dashboard-row">
            <div class="col-sm-4 dasboard-menu-button">
                <DashboardCard Name="General Chat" Icon="chat-left-text"></DashboardCard>
            </div>
            <div class="col-sm-4 dasboard-menu-button">
                <DashboardCard Name="Feedbacks" Icon="envelope-exclamation-fill"></DashboardCard>
            </div>
        </div>
    </div>
    <div class="col-12 col-sm-12 col-md-12 col-lg-12 col-xl-4">
        <div class="row">
            @if(activeUsers != null)
            {
                <ul>
                    @foreach(var activeUser in activeUsers){
                        <li>@activeUser.UserName - @activeUser.ConnectionId</li>
                    }
                </ul>
            }
        </div>
    </div>
</div>


@code{
    private HubConnection? hubConnection;
    [Inject]
    LocalStorageService localStorage { get; set; }
    [Inject]
    public IForumStatService forumStatService { get; set; }

    AllStatsResponseVM? allStats { get; set; } = new AllStatsResponseVM();

    int activeUserCounter = 0;
    private List<ActiveUserVM>? activeUsers;

    bool isLoaded;

    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        string username = string.Empty;
        if (user.Identity.IsAuthenticated)
        {
            username = user.Identity.Name;
        }

        string group = "admin";
        allStats = await forumStatService.GetAllStats();

        string token = await localStorage.GetItem("token");


        hubConnection = new HubConnectionBuilder()
            .WithUrl(
                "https://localhost:44342/track",
                o => {
                    o.AccessTokenProvider = () => Task.FromResult<string?>(token);
                    o.Url = new Uri($"https://localhost:44342/track?username={username}&group={group}");
                    o.SkipNegotiation = true;
                    o.Transports = Microsoft.AspNetCore.Http.Connections.HttpTransportType.WebSockets;
                }
            )
            .Build();

        hubConnection.On<int>("ReceiveActiveUserCounter", async message =>
        {
            activeUserCounter = message;
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("ReceiveActiveUsers", async message =>
        {
            if(message != null)
            {
                activeUsers = JsonSerializer.Deserialize<List<ActiveUserVM>>(message);
            }
            await InvokeAsync(StateHasChanged);
        });

        try
        {
            await hubConnection.StartAsync();
        }catch(Exception ex)
        {
            alertService.ShowAlert(ex.Message);
        }


        hubConnection.Closed += async (exception) =>
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
        };

        isLoaded = true;
    }

    public async ValueTask DisposeAsync()
    {
        if(hubConnection is not null)
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
        }
    }
}
