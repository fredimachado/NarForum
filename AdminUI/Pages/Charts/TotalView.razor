@inject IJSRuntime JS
@implements IAsyncDisposable


<div class="row">
	<div class="col-sm-6">
		<h3>Total Views</h3>
	</div>
	<div class="col-sm-6 text-end">
		@if(SelectedTime == "Day")
		{
			<span>
				<input type="date" id="birthday" value="@overrideStart.ToLocalTime().ToString("yyyy-MM-dd")" @onchange="@OnChangeDayDate" name="birthday">
			</span>
		}
		@if(SelectedTime == "Week")
		{
			
		}
		@if (SelectedTime == "Month")
		{
			<span>
				<input type="month" id="start" name="start" value="@monthStart.ToLocalTime().ToString("yyyy-MM")" @onchange="@OnChangeMonthDate" />
			</span>
		}
		@if (SelectedTime == "Year")
		{

		}
		<span>
			<select @oninput=OnChangeTime>
				@foreach (var cnt in Times)
				{
					<option value="@cnt">@cnt</option>
				}
			</select>
		</span>
	</div>
	
</div>


<canvas id="totalViewChart"></canvas>


@code {
	private IJSInProcessObjectReference? module;

	private string? ClientTimeZone { get; set; }

	[Inject]
	public ITrackingLogService? TrackingLogService { get; set; }

	private string SelectedTime { get; set; } = "Day";

	private DateTime overrideStart = DateTime.UtcNow;
	private DateTime monthStart = DateTime.UtcNow;

	private List<string> Times = new List<string>
	{
		"Day",
		"Week",
		"Month",
		"Year"
	};

	private List<TrackingLogVM>? logs { get; set; }

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);

		ClientTimeZone = await JS.InvokeAsync<string>("GetTimeZone");

		logs = new List<TrackingLogVM>();

		if (firstRender)
		{
			module = await JS.InvokeAsync<IJSInProcessObjectReference>("import", "./Pages/Charts/TotalView.razor.js");

			if(TrackingLogService is not null)
			{
				GetTrackingLogsQueryVM query = new GetTrackingLogsQueryVM
				{
						TimeZone = ClientTimeZone
				};

				logs = await TrackingLogService.GetTrackingLogs(query);


				if(logs is not null && logs.Count > 0)
				{
					var dayAnonLogs = ConvertTrackingLogsToDay(logs.Where(x => x.IsMember == false).ToList());
					var dayMemLogs = ConvertTrackingLogsToDay(logs.Where(x => x.IsMember == true).ToList());
					await module.InvokeVoidAsync("drawTotalViewChart", "Day", dayAnonLogs, dayMemLogs);
				}

			}
		}
	}

	private async Task OnChangeTime(ChangeEventArgs e)
	{
		SelectedTime = e.Value.ToString();

		if (TrackingLogService is not null)
		{
			GetTrackingLogsQueryVM query = new GetTrackingLogsQueryVM
			{
				TimeZone = ClientTimeZone
			};


			if(SelectedTime == "Day")
			{
				query.DateType = Models.Enums.TrackingLogDateType.DAY;
				overrideStart = DateTime.UtcNow;
			}

			if(SelectedTime == "Week")
			{
				query.DateType = Models.Enums.TrackingLogDateType.WEEK;
			}

			if (SelectedTime == "Month")
			{
				query.DateType = Models.Enums.TrackingLogDateType.MONTH;
				monthStart = DateTime.UtcNow;
			}

			if (SelectedTime == "Year")
			{
				query.DateType = Models.Enums.TrackingLogDateType.YEAR;
			}

			logs = await TrackingLogService.GetTrackingLogs(query);


			if (logs is not null && logs.Count > 0 && module is not null)
			{

				if(query.DateType == Models.Enums.TrackingLogDateType.DAY)
				{
					var dayAnonLogs = ConvertTrackingLogsToDay(logs.Where(x => x.IsMember == false).ToList());
					var dayMemLogs = ConvertTrackingLogsToDay(logs.Where(x => x.IsMember == true).ToList());
					await module.InvokeVoidAsync("drawTotalViewChart", SelectedTime, dayAnonLogs, dayMemLogs);
				}
				if (query.DateType == Models.Enums.TrackingLogDateType.WEEK)
				{
					await module.InvokeVoidAsync("drawTotalViewChart", SelectedTime);
				}
				if (query.DateType == Models.Enums.TrackingLogDateType.MONTH)
				{
					var monthAnonLogs = ConvertTrackingLogsToMonth(logs.Where(x => x.IsMember == false).ToList());
					var monthMemLogs = ConvertTrackingLogsToMonth(logs.Where(x => x.IsMember == true).ToList());
					await module.InvokeVoidAsync("drawTotalViewChart", SelectedTime, monthAnonLogs, monthMemLogs);
				}
				if (query.DateType == Models.Enums.TrackingLogDateType.YEAR)
				{
					await module.InvokeVoidAsync("drawTotalViewChart", SelectedTime);
				}

			}

		}
	}

	public async Task OnChangeDayDate(ChangeEventArgs args)
	{
		var value = args.Value.ToString();
		overrideStart = value == string.Empty ? DateTime.Today : DateTime.Parse(value);

		// overrideStart = await GetStartOfWeek(overrideStart);

		if (TrackingLogService is not null)
		{
			GetTrackingLogsQueryVM query = new GetTrackingLogsQueryVM
			{
				TimeZone = ClientTimeZone,
				DateTime = DateTime.SpecifyKind(overrideStart, DateTimeKind.Utc),
				DateType = Models.Enums.TrackingLogDateType.DAY
			};

			logs = await TrackingLogService.GetTrackingLogs(query);

			if (logs is not null && module is not null)
			{
				var dayAnonLogs = ConvertTrackingLogsToDay(logs.Where(x => x.IsMember == false).ToList());
				var dayMemLogs = ConvertTrackingLogsToDay(logs.Where(x => x.IsMember == true).ToList());
				await module.InvokeVoidAsync("drawTotalViewChart", SelectedTime, dayAnonLogs, dayMemLogs);
			}
		}
	}

	public async Task OnChangeMonthDate(ChangeEventArgs args)
	{
		var value = args.Value.ToString();
		monthStart = value == string.Empty ? DateTime.Today : DateTime.Parse(value);

		// overrideStart = await GetStartOfWeek(overrideStart);

		if (TrackingLogService is not null)
		{
			GetTrackingLogsQueryVM query = new GetTrackingLogsQueryVM
			{
				TimeZone = ClientTimeZone,
				DateTime = DateTime.SpecifyKind(monthStart, DateTimeKind.Utc),
				DateType = Models.Enums.TrackingLogDateType.MONTH
			};

			logs = await TrackingLogService.GetTrackingLogs(query);

			if (logs is not null && module is not null)
			{
				var monthAnonLogs = ConvertTrackingLogsToMonth(logs.Where(x => x.IsMember == false).ToList());
				var monthMemLogs = ConvertTrackingLogsToMonth(logs.Where(x => x.IsMember == true).ToList());
				await module.InvokeVoidAsync("drawTotalViewChart", SelectedTime, monthAnonLogs, monthMemLogs);
			}
		}
	}

	async ValueTask IAsyncDisposable.DisposeAsync()
	{
		if (module is not null)
		{
			await module.DisposeAsync();
		}
	}


	private ValueTask<DateTime> GetStartOfWeek(DateTime date)
	{
		return ValueTask.FromResult(date.AddDays(-(int)date.DayOfWeek));
	}

	private Dictionary<string, int> ConvertTrackingLogsToDay(List<TrackingLogVM> logs)
	{
		Dictionary<string, int> dayTimeLogs = new Dictionary<string, int>();

		foreach(var log in logs)
		{
			string dayLogKey = log.DateTime.ToLocalTime().ToString("hhtt");

			if (dayTimeLogs.ContainsKey(dayLogKey))
			{
				dayTimeLogs[dayLogKey] += 1;
			}
			else
			{
				dayTimeLogs[dayLogKey] = 1;
			}
		}

		return dayTimeLogs;

	}

	private Dictionary<string, int> ConvertTrackingLogsToMonth(List<TrackingLogVM> logs)
	{
		Dictionary<string, int> monthTimeLogs = new Dictionary<string, int>();

		foreach (var log in logs)
		{
			string monthLogKey = log.DateTime.ToString("dd");

			if (monthTimeLogs.ContainsKey(monthLogKey))
			{
				monthTimeLogs[monthLogKey] += 1;
			}
			else
			{
				monthTimeLogs[monthLogKey] = 1;
			}
		}

		return monthTimeLogs;

	}
}
