<div class="row settings-row">
    <div class="col-sm-6">
        <label>Image</label>
    </div>
    <div class="col-sm-6">
        <div class="card">
            <div class="card-body">
                @if (isLoading)
                {
                    <label>Loading...</label>
                }
                else if (!isLoading && logo.Base64 is not null)
                {
                    <img class="card-img-top" src="data:image/png;base64, @logo.Base64" alt="Card image">
                }
                else
                {
                    <label>Logo image not found</label>
                }
                <h4 class="card-title">John Doe</h4>
                <p class="card-text">Some example text.</p>
                <InputFile id="fileupload" class="form-control" OnChange="LoadFile" multiple></InputFile>
            </div>
        </div>
    </div>
</div>

<div class="row settings-row">
    <div class="col-sm-6">
        <label>Image URL</label>
    </div>
    <div class="col-sm-6">
        <div class="input-group mb-3">
            <input type="text" @bind-value="logo.Path" class="form-control" placeholder="Image URL" aria-label="Image URL" aria-describedby="button-addon2">
        </div>
    </div>
</div>

<div class="row settings-row">
    <div class="col-sm-6">
        <label>Logo Name</label>
    </div>
    <div class="col-sm-6">
        <div class="input-group mb-3">
            <input type="text" @bind-value="logo.Text" class="form-control" placeholder="Logo Text" aria-label="Logo Text" aria-describedby="button-addon2">
        </div>
    </div>
</div>

<div class="row settings-row">
    <div class="col-sm-6">
        <label>Logo Alt Text</label>
    </div>
    <div class="col-sm-6">
        <div class="input-group mb-3">
            <input type="text" @bind-value="logo.AltText" class="form-control" placeholder="Logo Alt Text" aria-label="Logo Alt Text" aria-describedby="button-addon2">
        </div>
    </div>
</div>

<div class="row settings-row">
    <div class="col-sm-6">
    </div>
    <div class="col-sm-6 text-end">
        <button class="btn btn-primary" @onclick=SaveLogo>Save</button>
    </div>
</div>


@code {
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 5;
    private int maxFiles = 1;
    private bool isLoading;

    private bool notFound;


    [Inject]
    private ILogoService? logoService { get; set; }

    [Inject]
    private AlertService? alertService { get; set; }

    private LogoVM logo { get; set; } = new LogoVM();

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if(logoService is not null)
        {
            var getLogo = await logoService.GetLogo();

            if(getLogo.Id is null)
            {
                notFound = true;
            }
            else
            {
                notFound = false;
                logo = getLogo;
            }
        }
    }


    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        isLoading = true;

        loadedFiles.Clear();


        foreach (var file in e.GetMultipleFiles(maxFiles))
        {
            try
            {
                loadedFiles.Add(file);
            }
            catch(Exception ex)
            {
                if(alertService is not null)
                {
                    alertService.ShowAlert(ex.Message);
                }
            }
        }

        if (loadedFiles.Count > 0)
        {
            var file = loadedFiles.FirstOrDefault();
            if(file is not null)
            {
                await using MemoryStream fs = new MemoryStream();
                await file.OpenReadStream(maxAllowedSize: 1048576).CopyToAsync(fs);
                byte[] somBytes = GetBytes(fs);
                logo.Base64 = Convert.ToBase64String(somBytes, 0, somBytes.Length);
            }
        }

        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    public static byte[] GetBytes(Stream stream)
    {
        var bytes = new byte[stream.Length];
        stream.Seek(0, SeekOrigin.Begin);
        stream.ReadAsync(bytes, 0, bytes.Length);
        stream.Dispose();
        return bytes;
    }

    protected async Task SaveLogo()
    {
        if(logoService is not null)
        {
            if(notFound)
            {
                AddLogoCommandVM command = new AddLogoCommandVM
                {
                    AltText = logo.AltText,
                    Text = logo.Text,
                    Path = logo.Path,
                    Base64 = logo.Base64
                };


                var response = await logoService.AddLogo(command);

                if (response.IsSuccess)
                {

                }
                else
                {
                    if (alertService is not null)
                    {
                        alertService.ShowAlert(response.Message);
                    }
                }
            }
            else
            {
                UpdateLogoCommandVM command = new UpdateLogoCommandVM
                {
                    AltText = logo.AltText,
                    Text = logo.Text,
                    Path = logo.Path,
                    Base64 = logo.Base64
                };


                var response = await logoService.UpdateLogo(command);

                if (response.IsSuccess)
                {

                }
                else
                {
                    if (alertService is not null)
                    {
                        alertService.ShowAlert(response.Message);
                    }
                }
            }

        }
    }


}
