@using NarForumUser.Client.Models.BlogComment
@using NarForumUser.Client.Models.BlogPost
@inject HttpClient Http
@inject IConfiguration Configuration

<h3 class="blog-comment-form-title">Your comment:</h3>

@if (BlogPostVM is not null && Model is not null)
{
    <div class="card-footer py-3 border-0" style="background-color: transparent;">
        <div class="d-flex flex-start w-100">
            @if (imageExist)
            {
                <img class="rounded-circle shadow-1-strong me-3"
                     src="@imageUrl" alt="avatar" width="40"
                height="40" />
            }
            else
            {
                @if(commentUsername is not null)
                {
                    <span class=no-image-user-profile-comment-form>
                        @commentUsername.ToUpper()[0]
                    </span>
                }
            }

            <div data-mdb-input-init class="form-outline w-100">
                <textarea @bind=Model.Content class="form-control" placeholder="Message..." id="textAreaExample" rows="4"
                            style="background: #fff;"></textarea>
            </div>
        </div>
        <div class="float-end mt-2 pt-1">
            <button @onclick=SendComment type="button" data-mdb-button-init data-mdb-ripple-init class="btn btn-forum btn-sm">Post Comment</button>
        </div>
    </div>
}



@code {
    [Inject]
    public IBlogCommentService? BlogCommentService { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    [Inject]
    public IUserService? UserService { get; set; }

    [Parameter]
    public BlogPostVM? BlogPostVM { get; set; }

    [Parameter]
    public EventCallback<int> CommentAdded { get; set; }

    public BlogCommentVM? Model { get; set; } = new BlogCommentVM();

    private bool isLoading { get; set; } = true;

    string? commentUsername;
    string? imageUrl;
    bool imageExist = false;

    protected async override Task OnInitializedAsync()
    {
        if (UserService is not null)
        {
            if (authenticationStateTask is not null)
            {
                var authState = await authenticationStateTask;

                if (authState is not null)
                {
                    var user = authState.User;

                    if (user is not null && user.Identity is not null && user.Identity.IsAuthenticated)
                    {
                        commentUsername = user.Identity.Name;

                        var userInfo = await UserService.GetUserInfo(commentUsername);

                        if (userInfo is not null)
                        {
                            imageUrl = $"{Configuration["ApiBaseUrl"]}/file/images/user-profile/{userInfo.Id}";

                            imageExist = await UrlExists(imageUrl);
                        }
                    }
                }
            }
        }

        await base.OnInitializedAsync();
    }

    private async Task SendComment()
    {
        if (Model is not null && Model.Content.Length > 0 && BlogPostVM is not null && BlogCommentService is not null)
        {
            CreateBlogCommentCommandVM command = new CreateBlogCommentCommandVM
            {
                BlogPostId = BlogPostVM.Id,
                Content = Model.Content
            };

            var response = await BlogCommentService.CreateBlogComment(command);

            if(response.IsSuccess)
            {
                if(CommentAdded.HasDelegate)
                {
                    await CommentAdded.InvokeAsync();
                }
            }
        }       
    }

    private async Task<bool> UrlExists(string url)
    {
        try
        {
            var response = await Http.GetAsync(url);
            return response.IsSuccessStatusCode;
        }
        catch
        {
            return false;
        }
    }
}
