@page "/blog/{Title}-{BlogPostId:int}"

@inject PersistentComponentState ApplicationState

@using NarForumUser.Client.Models.BlogPost
@using NarForumUser.Client.Pages.Blog.Component
@using System.Text.RegularExpressions
@inject IConfiguration Configuration

@implements IDisposable
@if (BlogPostVM is not null)
{
    <MetaTags 
        PageTitle="@BlogPostVM.Title"
        PageDescription="@ArrangeContent(BlogPostVM.Content)"
        ContentType="article"
        PostTitle="@Configuration["SiteName"]"
        CanonicalUrl="@($"{Configuration["BaseUrl"]}/blog/{Title}-{BlogPostId}")" />

    <AddBreadcrumb Items="BreadcrumbItems"></AddBreadcrumb>

    <div class="col-sm-12 blog-post-detail-container">
        <h1 class="blog-post-detail-heading">@BlogPostVM.Title</h1>
        <div class="blog-post-detail-content">
            @((MarkupString)BlogPostVM.Content)
        </div>

        <div class="blog-post-card-footer">
            <span class="blog-post-card-author"><i class="bi bi-person-fill"></i>@BlogPostVM.UserName</span>
            @if (BlogPostVM.BlogCategory is not null)
            {
                <span class="blog-post-card-category"><i class="bi bi-square-fill"></i>@BlogPostVM.BlogCategory.Name</span>
            }
            else
            {
                <span class="blog-post-card-category"><i class="bi bi-square-fill"></i>No Category</span>
            }
            <span class="blog-post-card-viewcounter"><i class="bi bi-eye-fill"></i>@BlogPostVM.ViewCounter</span>
            <span class="blog-post-card-comment"><i class="bi bi-chat-right-fill"></i>@BlogPostVM.CommentCounter</span>
            <span class="blog-post-card-date"><i class="bi bi-calendar-fill"></i>@BlogPostVM.DateCreate.Value.ToString("dd MMM yyyy")</span>
        </div>
    </div>

    <BlogCommentList BlogPostVM="BlogPostVM"></BlogCommentList>
} else
{
    <SkeletonBreadcrumb></SkeletonBreadcrumb>
    <div class="col-sm-12 blog-post-detail-container">
        <SkeletonH1 ClassName="blog-post-detail-heading"></SkeletonH1>
        <div class="blog-post-detail-content">
            <SkeletonText></SkeletonText>
            <SkeletonText></SkeletonText>
            <SkeletonText></SkeletonText>
            <SkeletonText></SkeletonText>
            <SkeletonText></SkeletonText>
            <SkeletonText></SkeletonText>
        </div>
    </div>
}

@code {
    private PersistingComponentStateSubscription _subscription;

    [Inject]
    private IBlogPostService? blogPostService { get; set; }

    [Parameter]
    public BlogPostVM? BlogPostVM { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public int BlogPostId { get; set; }

    private List<BreadcrumbItem> BreadcrumbItems { get; set; }

    [Inject]
    public IJSRuntime JS { get; set; }

    [Inject]
    public ITrackingLogService? TrackingLogService { get; set; }

    protected async Task SetBreadcrumb()
    {
        var foundInState = ApplicationState
                           .TryTakeFromJson<List<BreadcrumbItem>>("breadCrumbItems", out var _BreadcrumbItems);

        if (foundInState)
        {
            BreadcrumbItems = _BreadcrumbItems ?? new List<BreadcrumbItem>();
            return;
        }

        BreadcrumbItems = new List<BreadcrumbItem>();
        BreadcrumbItems.Add(new BreadcrumbItem { Text = "Blog", HrefLink = $"/blog" });
        if(BlogPostVM.BlogCategory is not null)
        {
            BreadcrumbItems.Add(new BreadcrumbItem { Text = $"{BlogPostVM.BlogCategory.Name}", HrefLink = $"/blog/{BlogPostVM.BlogCategory.Name.ToFriendlyUrl()}" });
        }
        else
        {
            BreadcrumbItems.Add(new BreadcrumbItem { Text = $"No Category", HrefLink = null });
        }
        BreadcrumbItems.Add(new BreadcrumbItem { Text = $"{BlogPostVM.Title}", IsCurrentPage = true });
    }

    protected override async Task OnInitializedAsync()
    {
        _subscription = ApplicationState.RegisterOnPersisting(Persist);
    }

    private async Task Persist()
    {
        ApplicationState.PersistAsJson("blogPostVM", BlogPostVM);
        ApplicationState.PersistAsJson("breadCrumbItems", BreadcrumbItems);
        await Task.CompletedTask;
    }

    protected async override Task OnParametersSetAsync()
    {
        var foundInState = ApplicationState
            .TryTakeFromJson<BlogPostVM>("blogPostVM", out var _BlogPostVM);
        
        BlogPostVM = foundInState ? _BlogPostVM : BlogPostVM;

        if (!foundInState && BlogPostVM is null && blogPostService is not null)
        {
            var query = new GetBlogPostQueryVM
            {
                IntId = BlogPostId
            };

            BlogPostVM = await blogPostService.GetBlogPost(query);
        }
        await SetBreadcrumb();
        await SaveTrackingLog();

        await base.OnParametersSetAsync();
    }

    private async Task SaveTrackingLog()
    {
        if (JS is not IJSInProcessRuntime)
        {
            return;
        }

        var cookiePolicyAccepted = await JS.InvokeAsync<string>("GetCookiePolicyAccepted");

        if (TrackingLogService is not null && cookiePolicyAccepted == "true")
        {
            AddTrackingLogCommandVM command = new AddTrackingLogCommandVM
                {
                    Type = Models.Enums.TrackingTypeVM.BLOG,
                    URL = $"/blog/{Title}-{BlogPostId}",
                    TargetId = BlogPostVM is not null ? BlogPostVM.Id : null,
                    DateTime = DateTime.UtcNow,
                    IsMember = true,
                    Browser = await JS.InvokeAsync<string>("GetBrowserName")
                };

            await TrackingLogService.AddTrackingLog(command);
        }
    }

    public string ArrangeContent(string content)
    {
        string textOnly = Regex.Replace(content, "<.*?>", String.Empty);
        return textOnly;
    }

    public void Dispose()
    {
        _subscription.Dispose();
    }
}