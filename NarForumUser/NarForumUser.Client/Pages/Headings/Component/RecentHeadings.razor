@inject HttpClient Http
@inject IConfiguration Configuration
@inject PersistentComponentState ApplicationState

@implements IDisposable

<div class="row recent-heading-list-container mb-4">
    <h3 class="sidebar-title">Recent Headings</h3>
    @if (isLoading)
    {
        
    }
    else
    {
        <div class="recent-heading-list">
        @for (int i=0; i < headings!.Count(); i++)
        {
            var heading = headings![i];
            <div class="d-flex flex-start @((i == 0) ? "mt-1" : "mt-3")">
                <a class="me-3 no-image-user-profile-link" href="@($"user/{heading.UserName}")">

                        @if (heading.UserId is not null)
                    {
                        if (heading.Base64 is not null)
                        {
                            <span class=image-user-profile>
                                <img alt="@(heading.UserName + "'s profile image")" width="35" height="35" src="@heading.Base64" />
                            </span>
                        }
                        else
                        {
                            <span class=no-image-user-profile style="background:#@(heading.UserId.Value.ToString("N").Substring(0,6));">
                                @heading.UserName.ToUpper()[0]
                            </span>
                        }  
                    }
                    else
                    {
                        <span class=no-image-user-profile>
                            @heading.UserName.ToUpper()[0]
                        </span>
                    }
                </a>
                <div class="flex-grow-1 flex-shrink-1 overflow-hidden">
                    <div>
                        <div>
                            <h4 class="recent-heading-title">
                                <a href="@($"category/{heading.CategoryName.ToFriendlyUrl()}-{heading.CategoryIntId}/{heading.Id.EncodeGuidToBase64Url()}/{heading.Title.ToFriendlyUrl()}")">@heading.Title</a>
                            </h4>
                            <div class="recent-heading-title-info">
                                <span class="small">@heading.UserName.Split('@')[0]</span>
                                <span class="badge recent-heading-category-badge">@heading.CategoryName</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        </div>
    }
</div>


@code {
    private PersistingComponentStateSubscription _subscription;

    private bool isLoading = true;

    [Inject]
    private IHeadingService? headingService { get; set; }

    private List<HeadingVM>? headings;

    private int headingLimit = 10;

    private Dictionary<Guid, bool> isImageAvailables = new Dictionary<Guid, bool>();


    private string GetImageUrl(Guid headingUserId)
    {
        return $"{Configuration["ApiBaseUrl"]}/file/images/user-profile/{headingUserId}";
    }

    protected async override Task OnInitializedAsync()
    {
        _subscription = ApplicationState.RegisterOnPersisting(Persist);


        var foundInState = ApplicationState
            .TryTakeFromJson<bool>("isLoading_recent_headings", out var _isLoading);

        isLoading = foundInState ? _isLoading : isLoading;

        await GetHeadings();
    }

    private async Task GetHeadings()
    {
        var foundInState = ApplicationState
                .TryTakeFromJson<List<HeadingVM>?>("recent_headings", out var _Headings);

        headings = foundInState ? _Headings : headings;

        if(foundInState)
        {
            if (headings is not null && headings.Count > 0)
            {
                foreach (var heading in headings)
                {
                    if (heading.UserId is not null)
                    {
                        heading.Base64 = await imageProvider.GetImage($"user-profile/{heading.UserId.ToString()}");
                    }
                }
            }
            await Task.CompletedTask;
        }

        if (headingService is not null)
        {
            GetHeadingsWithPaginationQueryVM query = new GetHeadingsWithPaginationQueryVM
            {
                SortType = SortTypeVM.RECENT,
                PageIndex = 1,
                PageSize = headingLimit,
                IsComponent = true
            };

            HeadingsPaginationVM pagination = await headingService.GetHeadingsWithPagination(query);

            headings = pagination.Headings;


            if (headings is not null && headings.Count > 0)
            {
                foreach (var heading in headings)
                {
                    if (heading.UserId is not null)
                    {
                        heading.Base64 = await imageProvider.GetImage($"user-profile/{heading.LastUserId.ToString()}");
                    }
                }

            }
            isLoading = false;
        }
    }

    private async Task Persist()
    {
        ApplicationState.PersistAsJson("recent_headings", headings);
        ApplicationState.PersistAsJson("isLoading_recent_headings", isLoading);
        await Task.CompletedTask;
    }

    private async Task<bool> UrlExists(string url)
    {
        try
        {
            var response = await Http.GetAsync(url);
            return response.IsSuccessStatusCode;
        }
        catch
        {
            return false;
        }
    }

    public void Dispose()
    {
        _subscription.Dispose();
    }
}
