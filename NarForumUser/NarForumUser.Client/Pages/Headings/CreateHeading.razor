@page "/create-heading"
@page "/create-heading/{CategoryName}-{CategoryId:int}"
@using System.Text.RegularExpressions
@using NarForumUser.Client.Services.Common

@if(CategoryName != null)
{
    <h1 class="heading-title">Create Heading for @GetCategoryName(Model.CategoryId)</h1>
}
else
{
    <h1 class="heading-title">Create Heading</h1>
}

<EditForm Model="@Model" OnValidSubmit="HandleCreateHeading">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group form-margin">
        <label asp-for="Title" class="control-label mb-2">Select Category</label>
        <InputSelect class="form-select select-category" aria-label="Default select example" @bind-Value="@Model.CategoryId">
            @if(categories != null)
            {
                @foreach (var category in categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            } else
            {
                <option disabled value="0">Loading...</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => Model.Title)" />
    </div>

    <div class="form-group form-margin">
        <label asp-for="Title" class="control-label mb-2">Heading Title</label>
        <InputText type="text" id="Title" class="form-control" @bind-Value="@Model.Title"></InputText>
        <ValidationMessage For="@(() => Model.Title)" />
    </div>

    <div class="form-group form-margin">
        <CreatePostForm Placeholder="enter your post here" @ref=createPostForm Model="CreateModel"></CreatePostForm>
    </div>

    <div class="form-group text-end">
        <input type="submit" value="Create" class="btn btn-forum fw-normal w-20 mt-3" />
    </div>
</EditForm>


@code {
    private CategoryVM? parentCategory;

    private List<CategoryVM>? categories;

    public HeadingVM Model { get; set; }
    public PostVM PostModel { get; set; }

    [Parameter]
    public string? CategoryName { get; set; }
    [Parameter]
    public int CategoryId { get; set; }

    [Inject]
    public IHeadingService? HeadingService { get; set; }
    [Inject]
    public ICategoryService? CategoryService { get; set; }

    [Inject]
    public NavigationManager? NavigationManager { get; set; }

    [Inject]
    public ToastService? ToastService { get; set; }

    CreatePostForm? createPostForm;
    public PostVM CreateModel { get; set; } = new PostVM();

    private string GetCategoryName(Guid? categoryId)
    {
        if (categoryId is null) return "";
        return categories?.FirstOrDefault(x => x.Id == categoryId)?.Name;
    }

    protected async override Task OnInitializedAsync()
    {
        Model = new HeadingVM();
        PostModel = new PostVM();
        categories = await CategoryService.GetCategories();

        if(CategoryName != null)
        {
            parentCategory = categories.FirstOrDefault(x => x.CategoryId == CategoryId);
            Model.CategoryId = parentCategory != null ? parentCategory.Id : Guid.Empty;
        }
        else
        {
            Model.CategoryId = categories.FirstOrDefault().Id;
            CategoryName = categories.FirstOrDefault().Name;
        }
    }

    protected async Task HandleCreateHeading()
    {
        HeadingVM? heading;

        Model.Content = GenerateContentFromDisplayContent(CreateModel.DisplayContent);


        if(string.IsNullOrEmpty(Model.Content))
        {
            ToastService!.CreateErrorToast("Empty Heading Content", "The heading content cannot be empty.");
            return;
        }

        heading = new HeadingVM
        {
            Title = Model.Title,
            CategoryId = Model.CategoryId,
            Content = Model.Content
        };

        var response = await HeadingService.CreateHeading(heading);

        if(response.IsSuccess)
        {
            if (ToastService is not null)
            {
                ToastService.CreateSuccessToast("Created Heading", "Heading is created successfully");
            }
            NavigationManager.NavigateTo($"/category/{CategoryName.ToFriendlyUrl()}-{CategoryId}");
        }
        else
        {
            if (ToastService is not null)
            {
                ToastService.CreateErrorToast("Error while creating heading", response.Message);
            }
        }
    }

    private string GenerateContentFromDisplayContent(string displayContent)
    {
        string content = displayContent;

        Regex quoteRegex = new Regex(@"<blockquote\s+author-quote=['""]([^'""]*)['""]\s+post-id=['""]([0-9a-fA-F-]{36})['""]\s+class=['""]quote-box['""]>([\s\S]*?)<\/blockquote>");

        MatchCollection matches = quoteRegex.Matches(content);

        foreach (Match match in matches)
        {
            string userName = match.Groups[1].Value;
            string postId = match.Groups[2].Value;
            string quoteContent = match.Groups[3].Value;

            string newQuote = $"[Quote](PostId={postId})[/Quote]";

            content = content.Replace(match.Value, newQuote);
        }

        // Regex pattern to allow only specified HTML tags
        string pattern = @"<(?!/?(?:a|b|blockquote|br|code|del|dd|dl|dt|em|h[1-6]|hr|i|img|kbd|li|ol|p|pre|s|strong|sub|sup|ul)\b)[^>]+>";
        content = Regex.Replace(content, pattern, string.Empty);

        return content;
    }
}
