@page "/page/{PageUrl}"
@using NarForumUser.Client.Models.StaticPage
@using System.Text.RegularExpressions
@inject IConfiguration Configuration

@if(StaticPageVM is not null)
{
    <MetaTags PageTitle="@StaticPageVM.Title"
              PageDescription="@ArrangeContent(StaticPageVM.Content)"
              ContentType="article"
              PostTitle="@Configuration["SiteName"]"
              CanonicalUrl="@($"{Configuration["BaseUrl"]}/page/{PageUrl}")" />

    <div class="col-sm-12 blog-post-detail-container">
        <h1 class="blog-post-detail-heading">@StaticPageVM.Title</h1>
        <div class="blog-post-detail-content">
            @((MarkupString)StaticPageVM.Content)
        </div>
    </div>
}

@code {
    [Inject]
    private IPageService? pageService { get; set; }

    [Parameter]
    public string? PageUrl { get; set; }

    [Parameter]
    public StaticPageVM? StaticPageVM { get; set; }

    [Inject]
    public IJSRuntime JS { get; set; }

    [Inject]
    public ITrackingLogService? TrackingLogService { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        if (StaticPageVM is null && pageService is not null)
        {
            var query = new GetStaticPageQueryVM
            {
                Url = PageUrl
            };

            StaticPageVM = await pageService.GetStaticPage(query);
            await SaveTrackingLog();
        }

        await base.OnParametersSetAsync();
    }

    private async Task SaveTrackingLog()
    {
        if (JS is not IJSInProcessRuntime)
        {
            return;
        }

        var cookiePolicyAccepted = await JS.InvokeAsync<string>("GetCookiePolicyAccepted");

        if (TrackingLogService is not null && cookiePolicyAccepted == "true")
        {
            AddTrackingLogCommandVM command = new AddTrackingLogCommandVM
            {
                Type = Models.Enums.TrackingTypeVM.STATICPAGE,
                URL = $"/page/{PageUrl}",
                DateTime = DateTime.UtcNow,
                TargetId = StaticPageVM is not null ? new Guid(StaticPageVM.Id!) : null,
                Browser = await JS.InvokeAsync<string>("GetBrowserName")
            };

            await TrackingLogService.AddTrackingLog(command);
        }
    }

    public string ArrangeContent(string content)
    {
        string textOnly = Regex.Replace(content, "<.*?>", String.Empty);
        return textOnly;
    }
}
