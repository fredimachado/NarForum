
<div class="card text-dark captcha-card-border">
    <div class="card-body row captcha-card-bg">
        <div class="col-3 captcha-checkbox">
            @if(response is null || !response.IsSuccess) {
                <input class="form-check-input" type="checkbox" @onclick="OpenCaptchaTest" value="" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false">
            }
            @if(loadingApprove) {
                <div class="spinner-border captcha-loading-spinner-bg" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
            else if(response is not null && response.IsSuccess) {
                <i class="bi bi-check-circle-fill color-green captcha-approve"></i>
            }
            <div class="dropdown-menu captcha-dropdown @show">
                @if(response is not null)
                {
                    <div class="captcha-response-message">
                        @if(response.IsSuccess)
                        {
                            <div class="alert alert-success" role="alert">
                                You are not a robot!
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-danger" role="alert">
                                You are a robot! 
                            </div>
                        }
                    </div>
                }
                <div class="captcha-description">Select the mark icons in below and click the check button:</div>
                <div class="captcha-grid-container">
                    <div class="captcha-grid-item @checkIndex(0)" @onclick="() => SelectItem(0)">@((MarkupString)@Values[0])</div>
                    <div class="captcha-grid-item @checkIndex(1)" @onclick="() => SelectItem(1)">@((MarkupString)@Values[1])</div>
                    <div class="captcha-grid-item @checkIndex(2)" @onclick="() => SelectItem(2)">@((MarkupString)@Values[2])</div>
                    <div class="captcha-grid-item @checkIndex(3)" @onclick="() => SelectItem(3)">@((MarkupString)@Values[3])</div>
                    <div class="captcha-grid-item @checkIndex(4)" @onclick="() => SelectItem(4)">@((MarkupString)@Values[4])</div>
                    <div class="captcha-grid-item @checkIndex(5)" @onclick="() => SelectItem(5)">@((MarkupString)@Values[5])</div>
                    <div class="captcha-grid-item @checkIndex(6)" @onclick="() => SelectItem(6)">@((MarkupString)@Values[6])</div>
                    <div class="captcha-grid-item @checkIndex(7)" @onclick="() => SelectItem(7)">@((MarkupString)@Values[7])</div>
                    <div class="captcha-grid-item @checkIndex(8)" @onclick="() => SelectItem(8)">@((MarkupString)@Values[8])</div>
                </div>
                <div class="captcha-selection-check text-end"><button type="button" @onclick="CheckCaptchaSelection" class="btn btn-captcha-check me-2 fw-normal">Check</button></div>
            </div>    
        </div>
        <div class="col-9 captcha-content">I'm not a robot.</div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<CaptchaResponse> Callback { get; set; }

    bool loadingApprove = false;

    Random random = new Random();

    CaptchaResponse? response;

    private static string rightVal = "<i class='bi bi-check'></i>";
    private static string wrongVal = "<i class='bi bi-x'></i>";

    private string show = "";

    int wrongCounter = 0;
    int markCount = 3;

    private List<string> Values = new List<string>
    {
        wrongVal,
        wrongVal,
        wrongVal,
        wrongVal,
        wrongVal,
        wrongVal,
        wrongVal,
        wrongVal,
        wrongVal,
    };

    private List<int> selectedIndexes = new List<int>();

    private string checkIndex(int index)
    {
        if(selectedIndexes.Contains(index))
        {
            return " selected";
        }
        else
        {
            return string.Empty;
        }
    }

    protected override Task OnInitializedAsync()
    {
        GenerateIndexes();
        return base.OnInitializedAsync();
    }

    protected async Task SelectItem(int index)
    {
        if(selectedIndexes.Contains(index))
        {
            selectedIndexes.Remove(index);
        }
        else
        {
            selectedIndexes.Add(index);
        }

        await InvokeAsync(StateHasChanged);
    }

    private void GenerateIndexes()
    {
        selectedIndexes.Clear();
        markCount = random.Next(3, 6);

        for(int i = 0; i < Values.Count; i++)
        {
            Values[i] = wrongVal;
        }

        int[] numbers = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8 };
        numbers = numbers.OrderBy(x => random.Next()).ToArray();

        Values[numbers[0]] = rightVal;
        Values[numbers[1]] = rightVal;
        Values[numbers[2]] = rightVal;
        if(markCount == 4)
        {
            Values[numbers[3]] = rightVal;
        }
        if(markCount == 5)
        {
            Values[numbers[3]] = rightVal;
            Values[numbers[4]] = rightVal;
        }
    }

    protected async Task CheckCaptchaSelection()
    {
        if (CheckSelections())
        {
            response = new CaptchaResponse();
            response.IsSuccess = true;
            show = "";
            loadingApprove = true;
            await Task.Delay(2000);
            loadingApprove = false;
            if(Callback.HasDelegate)
            {
                await Callback.InvokeAsync(response);
            }
        }
        else
        {
            response = new CaptchaResponse();
            response.IsSuccess = false;
            wrongCounter++;
            GenerateIndexes();
        }
    }

    private bool CheckSelections()
    {
        if(selectedIndexes.Count != markCount)
        {
            return false;
        }

        foreach (var selected in selectedIndexes)
        {
            if (Values[selected] != rightVal)
            {
                return false;
            }
        }

        return true;
    }

    protected async Task OpenCaptchaTest()
    {
        show = " show";
        GenerateIndexes();
    }
}
