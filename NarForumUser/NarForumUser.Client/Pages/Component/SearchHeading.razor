@if(Query is not null)
{
    <form class="row g-3 needs-validation" @onsubmit="SearchSubmit">
        <li class="page-input-dropdown-item">
            <label for="startDate">Start Date</label>
            <input id="startDate" @bind-value=Query.StartDate class="form-control sh-filter-control" type="date" />
            @*  <input type="number" class="form-control page-input-box" @bind-value=inputPageNumber min="1" max="@TotalPages" required>
        <div class="invalid-feedback">
        Please enter a number between 1 and @TotalPages.
        </div> *@
        </li>
        <li class="page-input-dropdown-item">
            <label for="endDate">End Date</label>
            <input id="endDate" @bind-value=Query.EndDate class="form-control sh-filter-control" type="date" />
        </li>
        <li class="page-input-dropdown-item">
            <label for="search-heading-title">Title</label>
            <input type="text" placeholder="search title" class="form-control sh-filter-control" @bind-value=Query.SearchTitle>
        </li>
        <li class="page-input-dropdown-item">
            <label for="search-heading-user">User</label>
            <input type="text" placeholder="search user" class="form-control sh-filter-control" @bind-value=Query.SearchUser>
        </li>
        <li>
            <button type="submit" class="btn btn-secondary w-100 page-input-button">Search</button>
        </li>
    </form>
}

@code {
    [Parameter]
    public GetHeadingsWithPaginationQueryVM? Query { get; set; }

    [Parameter]
    public EventCallback<int> SearchCallback { get; set; }

    private async Task SearchSubmit()
    {
        if(SearchCallback.HasDelegate && Query is not null)
        {
            if(Query.StartDate is not null)
            {
                Query.StartDate = DateTime.SpecifyKind(Query.StartDate.Value, DateTimeKind.Utc);
            }

            if (Query.EndDate is not null)
            {
                Query.EndDate = DateTime.SpecifyKind(Query.EndDate.Value, DateTimeKind.Utc);
            }

            await SearchCallback.InvokeAsync();
        }
    }
}
