@inject IJSRuntime JSRuntime;

@if(isOpen)
{
    <div class="custom-modal-overlay" id="custom-modal-overlay-id">
        <div class="custom-modal" style="max-width:@MaxWidth;">
            <div class="custom-modal-content">
                <div class="custom-modal-header">
                    <div class="custom-modal-title-area">
                        <h3 class="custom-modal-title">
                            @ModalTitle
                        </h3>
                    </div>
                    <div class="custom-modal-close-area">
                        <span class="close" @onclick="CloseModal">&times;</span>
                    </div>
                </div>
                <div id="custom-modal-inner">
                    @ChildContent
                </div>
                <div class="custom-modal-footer text-end">
                    <button type="button" @onclick="callbackMethod" class="btn btn-forum">@ModalButtonText</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public string ModalId { get; set; } = string.Empty;

    [Parameter]
    public string ModalTitle { get; set; } = string.Empty;

    [Parameter]
    public string ModalButtonText { get; set; } = "Save";

    [Parameter]
    public string MaxWidth { get; set; } = "700px";

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public EventCallback<int> Callback { get; set; }

    private bool isOpen { get; set; }




    public async void ShowModal()
    {
        isOpen = true;
        await InvokeAsync(StateHasChanged);
    }

    public async void CloseModal()
    {
        isOpen = false;
        await InvokeAsync(StateHasChanged);
    }


    protected async Task callbackMethod()
    {
        await Callback.InvokeAsync();
    }
}
