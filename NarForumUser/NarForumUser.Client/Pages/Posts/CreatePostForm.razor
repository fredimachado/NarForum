@using System.Text.RegularExpressions
@using NarForumUser.Client.Services.Common
@inject IJSRuntime JS
@implements IAsyncDisposable

<EditForm class="CustomForm" Model="@Model" OnValidSubmit="HandleCreatePost">
    <DataAnnotationsValidator />
    <ValidationSummary />
	<div class="container-form">
	<div class="toolbar">
		<div class="head">
			<div class="row">
				<div class="col-sm-2">
						<InputSelect class="form-select form-select-sm post-form-toolbar-select" aria-label="Default select example" ValueExpression="@(()=>formatBlockSelectedIndex)" Value="@formatBlockSelectedIndex" ValueChanged="@((string value) => formatBlockHandle(value))">
						@foreach (var formatBlock in formatBlocks)
						{
							<option value="@formatBlock.Type">@formatBlock.Text</option>
						}
					</InputSelect>
				</div>
				<div class="width-10px"></div>
				<div class="col-sm-2">
						<InputSelect class="form-select form-select-sm post-form-toolbar-select" aria-label="Default select example" ValueExpression="@(()=>fontSizeSelectedIndex)" Value="@fontSizeSelectedIndex" ValueChanged="@((int value) => fontSizeHandle(value))">
						@foreach (var fontSize in fontSizes)
						{
							<option value="@fontSize.Index">@fontSize.Text</option>
						}
					</InputSelect>
				</div>
				<div class="col-1"></div>
				<div class="col-sm-3">
					
				</div>
				<div class="col-sm-3">
					
				</div>
			</div>
		</div>
		<div class="btn-toolbar">
			<button @onclick="@(() => formatDoc(undo))" type="button"><i class="bi bi-arrow-counterclockwise"></i></button>
			<button @onclick="@(() => formatDoc(redo))" type="button"><i class="bi bi-arrow-clockwise"></i></button>
			<button @onclick="@(() => formatDoc(bold))" type="button"><i class="bi bi-type-bold"></i></button>
			<button @onclick="@(() => formatDoc(underline))" type="button"><i class="bi bi-type-underline"></i></button>
			<button @onclick="@(() => formatDoc(italic))" type="button"><i class="bi bi-type-italic"></i></button>
			<button @onclick="@(() => formatDoc(strikeThrough))" type="button"><i class="bi bi-type-strikethrough"></i></button>
			<button @onclick="@(() => formatDoc(insertOrderedList))" type="button"><i class="bi bi-list-ol"></i></button>
			<button @onclick="@(() => formatDoc(insertUnorderedList))" type="button"><i class="bi bi-list-ul"></i></button>
			<button @onclick="@(() => addLink())" type="button"><i class="bi bi-link"></i></button>
			<button @onclick="@(() => addImage())" type="button"><i class="bi bi-image"></i></button>
@* 			<button @onclick="@(() => formatDoc(unlink))" type="button"><i class='bx bx-unlink'></i></button>
			<button id="show-code" data-active="false" type="button">&lt;/&gt;</button> *@
		</div>
	</div>
		<div id="content" placeholder="@Placeholder"  contenteditable="true" spellcheck="false" @oninput="UpdateModelContent" @onkeydown="ContentKeyDown" @ondblclick="ControlSelection" @onkeyup="ContentKeyUp">
	</div>

	</div>

	@if (Callback.HasDelegate)
	{
		<div class="form-group text-end">
			<input type="submit" value="Create" class="btn btn-forum fw-normal w-20 mt-3" />
		</div>
	}
</EditForm>


<AddImageModal @ref="addImageModal" Callback="addImageCallback"></AddImageModal>


@code {
	[Parameter]
	public PostVM Model { get; set; }

	[Parameter]
	public Guid HeadingId { get; set; }

	[Inject]
	public IPostService? PostService { get; set; }

	[Parameter]
	public EventCallback<int> Callback { get; set; }

	[Parameter]
	public string Placeholder { get; set; } = string.Empty;

	[Parameter]
	public EventCallback<int> AddData { get; set; }

	[Inject]
	public ToastService? ToastService { get; set; }

	AddImageModal? addImageModal;

	const string formatBlock = "formatBlock";
	const string undo = "undo";
	const string redo = "redo";
	const string bold = "bold";
	const string underline = "underline";
	const string italic = "italic";
	const string strikeThrough = "strikeThrough";
	const string insertOrderedList = "insertOrderedList";
	const string insertUnorderedList = "insertUnorderedList";
	const string unlink = "unlink";

	int fontSizeSelectedIndex = 2;
	string formatBlockSelectedIndex = string.Empty;

	class FormatBlockType
	{
		public string Type { get; set; } = string.Empty;
		public string Text { get; set; } = string.Empty;
	}

	List<FormatBlockType> formatBlocks = new List<FormatBlockType>
	{
		new FormatBlockType { Text = "None", Type=string.Empty},
		new FormatBlockType { Text = "Heading 1", Type="h1"},
		new FormatBlockType { Text = "Heading 2", Type="h2"},
		new FormatBlockType { Text = "Heading 3", Type="h3"},
		new FormatBlockType { Text = "Heading 4", Type="h4"},
		new FormatBlockType { Text = "Heading 5", Type="h5"},
		new FormatBlockType { Text = "Heading 6", Type="h6"},
		new FormatBlockType { Text = "Paragraph", Type="p"},
	};

	class FontSizeType
	{
		public int Index { get; set; }
		public string Text { get; set; } = string.Empty;
	}

	List<FontSizeType> fontSizes = new List<FontSizeType>
	{
		new FontSizeType { Text = "Extra small", Index=0},
		new FontSizeType { Text = "Small", Index=1},
		new FontSizeType { Text = "Regular", Index=2},
		new FontSizeType { Text = "Medium", Index=3},
		new FontSizeType { Text = "Large", Index=4},
		new FontSizeType { Text = "Extra Large", Index=5},
		new FontSizeType { Text = "Big", Index=6},
	};

	private IJSInProcessObjectReference? module;

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			module = await JS.InvokeAsync<IJSInProcessObjectReference>("import", "./Pages/Posts/CreatePostForm.razor.js");
		}
		await base.OnAfterRenderAsync(firstRender);
	}

	protected async Task ContentKeyDown(KeyboardEventArgs e)
	{
		if (e.Code == "Enter" || e.Code == "NumpadEnter") {
			await module.InvokeAsync<string>("checkEnterCursorInQuote");
		}

	}

	protected async Task ContentKeyUp(KeyboardEventArgs e)
	{
		if (e.Code == "Backspace" || e.Code == "Delete")
		{
			await module.InvokeAsync<string>("checkDeleteCursorInQuote");
		}
	}

	protected async Task ControlSelection()
	{
		await module.InvokeAsync<string>("checkClickInQuote");
	}

	async Task UpdateModelContent(ChangeEventArgs e)
	{
		// Model.Content = await module.InvokeAsync<string>("getData");
		Model.DisplayContent = await module.InvokeAsync<string>("getData");
	}

	public async Task SetContenteditable()
	{
		// await module.InvokeAsync<string>("setData", Model.Content);
		await module.InvokeAsync<string>("setData", Model.DisplayContent);
	}

	private string GenerateContentFromDisplayContent(string displayContent)
	{
		string content = displayContent;

		Regex quoteRegex = new Regex(@"<blockquote\s+author-quote=['""]([^'""]*)['""]\s+post-id=['""]([0-9a-fA-F-]{36})['""]\s+class=['""]quote-box['""]>([\s\S]*?)<\/blockquote>");

		MatchCollection matches = quoteRegex.Matches(content);

		foreach (Match match in matches)
		{
			string userName = match.Groups[1].Value;
			string postId = match.Groups[2].Value;
			string quoteContent = match.Groups[3].Value;

			string newQuote = $"[Quote](PostId={postId})[/Quote]";

			content = content.Replace(match.Value, newQuote);
		}

		string onlyBrPattern = @"<div\s*>\s*<br\s*/?>\s*</div\s*>";
		content = Regex.Replace(content, onlyBrPattern, "<br>", RegexOptions.IgnoreCase | RegexOptions.Multiline);

		string brPattern = @"<div[^>]*>(.*?)<\/div>";
		content = Regex.Replace(content, brPattern, "<br>$1", RegexOptions.IgnoreCase | RegexOptions.Multiline);

		// Regex pattern to allow only specified HTML tags
		string pattern = @"<(?!/?(?:a|b|blockquote|br|code|del|dd|dl|dt|em|h[1-6]|hr|i|img|kbd|li|ol|p|pre|s|strong|sub|sup|ul)\b)[^>]+>";
		content = Regex.Replace(content, pattern, string.Empty);

		string quotePattern = @"(?<=\[\/Quote\])\s*(<br\s*/?>)\s*"; ;
		content = Regex.Replace(content, quotePattern, string.Empty);

		if (content.StartsWith("<br>", StringComparison.OrdinalIgnoreCase))
		{
			return content.Substring(4).Trim();
		}

		return content;
	}

	private List<Guid> GetQuotePostIds(string displayContent)
	{
		string content = displayContent;
		List<Guid> ids = new List<Guid>();
		Regex quoteRegex = new Regex(@"<blockquote\s+author-quote=['""]([^'""]*)['""]\s+post-id=['""]([0-9a-fA-F-]{36})['""]\s+class=['""]quote-box['""]>([\s\S]*?)<\/blockquote>");
		MatchCollection matches = quoteRegex.Matches(content);

		foreach (Match match in matches)
		{
			string userName = match.Groups[1].Value;
			string postId = match.Groups[2].Value;
			string quoteContent = match.Groups[3].Value;

			if(!string.IsNullOrEmpty(postId))
			{
				Guid qId = new Guid(postId);

				ids.Add(qId);
			}
		}

		return ids;
	}

	protected async Task HandleCreatePost()
	{
		PostVM? post;

		post = new PostVM
        {
            HeadingId = HeadingId,
            Content = Model.Content
        };

		post.Content = GenerateContentFromDisplayContent(Model.DisplayContent);

		if (string.IsNullOrEmpty(post.Content))
		{
			ToastService!.CreateErrorToast("Empty Post Content", "The post content cannot be empty.");
			return;
		}

		post.QuotePostIds = GetQuotePostIds(Model.DisplayContent);

		var response = await PostService.CreatePost(post);

		if(response.IsSuccess)
		{
			Model.Content = string.Empty;
			Model.DisplayContent = string.Empty;
			await SetContenteditable();

			if (ToastService is not null)
			{
				ToastService.CreateSuccessToast("Created Post", "The post is created successfully");
			}
		}
		else
		{
			if (ToastService is not null)
			{
				ToastService.CreateErrorToast("Error while creating heading", response.Message);
			}
		}

		await Callback.InvokeAsync();
	}

	async ValueTask IAsyncDisposable.DisposeAsync()
	{
		if (module is not null)
		{
			await module.DisposeAsync();
		}
	}

	protected async Task formatDoc(string command)
	{
		if (module != null)
		{
			await module.InvokeAsync<string>("formatDoc", command);
		}
	}

	async Task addLink()
	{
		if (module != null)
		{
			await module.InvokeAsync<string>("addLink");
		}
	}

	async Task addImage()
	{
		if(addImageModal is not null)
		{
			addImageModal.ShowModal();
		}
	}

	protected async Task addImageCallback(List<string> imgUrls)
	{
		if (module != null)
		{
			await module.InvokeAsync<string>("addImageUrls", imgUrls);
		}
	}


	protected async Task formatBlockHandle(string val)
	{
		if (module != null)
		{
			formatBlockSelectedIndex = val;
			string value = formatBlocks.Where(x => x.Type == formatBlockSelectedIndex).First().Type;

			await module.InvokeAsync<string>("formatDoc", "formatBlock", value);
		}
		await Task.CompletedTask;
	}


	protected async Task fontSizeHandle(int val)
	{
		if (module != null)
		{
			fontSizeSelectedIndex = val;
			int value = fontSizes.Where(x => fontSizes.IndexOf(x) == fontSizeSelectedIndex).First().Index;
			await module.InvokeAsync<string>("formatDoc", "fontSize", value.ToString());
		}
	}
}
