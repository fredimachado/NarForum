@using NarForumUser.Client.Models.Toast
@using NarForumUser.Client.Services
@using NarForumUser.Client.Services.Common
@inject NavigationManager nav
@inherits LayoutComponentBase

@if (!IsBot)
{
    @inject AuthorizationService authorizationService;
    @inject ToastService ToastService;
    <Toast @ref="toast"></Toast>
}

<div class="page h-100">
    <main class="main-forum">
        <TopNavMenu @rendermode="new InteractiveAutoRenderMode(prerender: true)"/>
        <div class="container custom-container">
            <div class="row">
                <div class="col-sm-12 col-md-12 @(layout2 ? " col-lg-9" : "") @(layout1 ? " col-lg-12" : "")">
                    <article>
                        @if (IsBot)
                        {
                            @Body
                        }
                        else
                        {
                            <ErrorBoundary Context="exception" @ref="_errorBoundary">
                                <ChildContent>
                                    @Body
                                </ChildContent>
                                
                                <ErrorContent>
                                    @if (exception is not null)
                                    {
                                        @if ((exception as NarForumUser.Client.Services.Base.ApiException).StatusCode == 401)
                                        {
                                            <NarForumUser.Client.Pages.ErrorPages.Page401></NarForumUser.Client.Pages.ErrorPages.Page401>
                                        }
                                        else if ((exception as NarForumUser.Client.Services.Base.ApiException).StatusCode == 500)
                                        {
                                            <NarForumUser.Client.Pages.ErrorPages.Page500></NarForumUser.Client.Pages.ErrorPages.Page500>
                                        }
                                        else if ((exception as NarForumUser.Client.Services.Base.ApiException).StatusCode == 204)
                                        {
                                            <NarForumUser.Client.Pages.ErrorPages.Page204></NarForumUser.Client.Pages.ErrorPages.Page204>
                                        }
                                        else
                                        {
                                            <p class="fw-bold text-danger">@exception.Message</p>
                                        }
                                    }
                                </ErrorContent>
                            </ErrorBoundary>
                        }
                    </article>
                </div>
                @if(layout2)
                {
                    <div class="col-sm-12 col-md-12 col-lg-3 sidebar-container p-0 p-sm-0 p-md-0 pe-lg-2 ps-lg-2 ps-xl-3 pe-xl-3">
                        <SideBar></SideBar>
                    </div>
                }
            </div>
            
        </div>
        <div class="w-100 height-100px"></div>
        <Footer></Footer>
    </main>
</div>

@if (!IsBot && OperatingSystem.IsBrowser())
{
    <ConsentCookie />
}

@code {
    [CascadingParameter(Name ="BotParameter")]
    public bool IsBot { get; set; }

    [CascadingParameter(Name = "SSRParameter")]
    public bool IsSSR { get; set; }

    private ErrorBoundary? _errorBoundary;

    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    private List<ToastNotification> notifications = new List<ToastNotification>();

    Toast? toast;

    string activePage = "";
    string? url;

    private bool layout1 = true;
    private bool layout2;

    protected override void OnInitialized()
    {
        CheckNav();
        base.OnInitialized();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            ToastService.AddNotificationAction += AddNotification;

            if (!IsBot)
            {
                var authState = await authenticationStateTask;
                var user = authState.User;
                string username = string.Empty;
                if (user.Identity.IsAuthenticated)
                {
                    username = user.Identity.Name;

                    if (authorizationService is not null)
                    {
                        await authorizationService.SetPermissions(username);
                    }
                }
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }



    private void CheckNav()
    {
        url = nav.Uri;
        string baseUrlRemoved = url.Split(new[] { "://" }, StringSplitOptions.None)[1].Split(new[] { '/' }, 2)[1];
        string[] parts = baseUrlRemoved.Split('/');

        if (parts is not null && parts.Length > 0)
        {
            activePage = parts[0];
            if (activePage == "blog" || activePage == "user" || activePage == "category" || activePage == "" || activePage == string.Empty || activePage is null)
            {
                layout2 = true;
                layout1 = false;

                if(parts.Length > 1)
                {
                    if(parts[1] == "settings")
                    {
                        layout1 = true;
                        layout2 = false;
                    }
                }
            }
            else
            {
                layout2 = false;
                layout1 = true;
            }
        }
        else
        {
            activePage = "";
        }

        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        CheckNav();
        _errorBoundary?.Recover();
    }

    private async void AddNotification(ToastNotification notification)
    {
        if(toast is not null)
        {
            await toast.AddToast(notification);
            await InvokeAsync(StateHasChanged);
        }
    }
}