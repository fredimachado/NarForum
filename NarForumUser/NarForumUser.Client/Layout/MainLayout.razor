@using NarForumUser.Client.Services
@inherits LayoutComponentBase

@if(!isBot)
{
    @inject AuthorizationService authorizationService;
}

<div class="page h-100">
    <main>
        <TopNavMenu />
        <div class="container custom-container">
            <div class="row">
                <div class="col-sm-12 col-md-12 col-lg-9">
                    <article>
                        @if(isBot)
                        {
                            @Body
                        }
                        else
                        {
                            <ErrorBoundary Context="exception" @ref="_errorBoundary">
                                <ChildContent>
                                    @Body
                                </ChildContent>
                                <ErrorContent>
                                    @if ((exception as NarForumUser.Client.Services.Base.ApiException).StatusCode == 401)
                                    {
                                        <NarForumUser.Client.Pages.ErrorPages.Page401></NarForumUser.Client.Pages.ErrorPages.Page401>
                                    }
                                    else if ((exception as NarForumUser.Client.Services.Base.ApiException).StatusCode == 500)
                                    {
                                        <NarForumUser.Client.Pages.ErrorPages.Page500></NarForumUser.Client.Pages.ErrorPages.Page500>
                                    }
                                    else if ((exception as NarForumUser.Client.Services.Base.ApiException).StatusCode == 204)
                                    {
                                        <NarForumUser.Client.Pages.ErrorPages.Page204></NarForumUser.Client.Pages.ErrorPages.Page204>
                                    }
                                    else
                                    {
                                        <p class="fw-bold text-danger">@exception.Message</p>
                                    }
                                </ErrorContent>
                            </ErrorBoundary>
                        }
                    </article>
                    <ConsentCookie/>
                </div>
                <div class="col-sm-12 col-md-12 col-lg-3 sidebar-container p-0 p-sm-0 p-md-0 pe-lg-2 ps-lg-2 ps-xl-3 pe-xl-3">
                     <SideBar></SideBar>
                </div>
            </div>
            
        </div>
        <Footer></Footer>
    </main>
</div>


@code {
    [CascadingParameter]
    public bool isBot { get; set; }
    private ErrorBoundary? _errorBoundary;

    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected async override Task OnInitializedAsync()
    {
        if(!isBot)
        {
            var authState = await authenticationStateTask;
            var user = authState.User;
            string username = string.Empty;
            if (user.Identity.IsAuthenticated)
            {
                username = user.Identity.Name;

                if (authorizationService is not null)
                {
                    await authorizationService.SetPermissions(username);
                }
            }

            await base.OnInitializedAsync();
        }
    }

    protected override void OnParametersSet()
    {
        _errorBoundary?.Recover();
    }
}