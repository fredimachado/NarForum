@using NarForumUser.Client.Models.Notification
@using NarForumUser.Client.Services.Common
@using NarForumUser.Client.Services.UI
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Text.Json
@inject HttpClient Http
@inject ToastService ToastService;
@inject IConfiguration Configuration
@inject IJSRuntime _jSRuntime
@inject LocalStorageService LocalStorage
@implements IAsyncDisposable

<header class="p-3 mb-3 top-nav-menu-wrapper sticky-top">
    <div class="container">
        <div class="d-flex flex-wrap align-items-center justify-content-center justify-content-lg-start">
            <a href="/" class="d-flex align-items-center mb-2 mb-lg-0 text-dark text-decoration-none">
                <img id="forum-logo" class="" src="@($"{Configuration["ApiBaseUrl"]}/file/images/logo")" alt="@($"{Configuration["SiteName"]}")" />
                
            </a>

            <ul class="nav col-12 col-lg-auto me-lg-auto mb-2 justify-content-center mb-md-0 ms-lg-4">
                <li><a href="/" class="nav-link px-2 text-white top-nav-menu-link">Forum</a></li>
                <li><a href="blog" class="nav-link px-2 text-white top-nav-menu-link">Blog</a></li>
                <li><a href="#" class="nav-link px-2 text-white top-nav-menu-link">Buy Now</a></li>
                <li><a @onclick="() => AddToast()" class="nav-link px-2 text-white top-nav-menu-link">Add Toast</a></li>
            </ul>

            

            @if (OperatingSystem.IsBrowser())
            {
                <AuthorizeView @rendermode="new InteractiveAutoRenderMode(prerender: true)">
                    <NotAuthorized>
                        <div class="col-md-3 text-end">
                            <button @onclick="GoToLogin" class="btn btn-login me-2 fw-normal">Login</button>
                            <button @onclick="GoToRegister" class="btn btn-register fw-normal">Register</button>
                        </div>
                    </NotAuthorized>
                    <Authorized>
                        <a @onclick=ShowChat class="d-block link-light text-decoration-none  mb-3 mb-lg-0 me-lg-4 me-lg-0 mt-lg-0 me-md-5 mt-md-3 me-sm-5 me-5">
                            <i class="bi bi-chat-fill"></i>
                        </a>
                        <a class="d-block link-light text-decoration-none  mb-3 mb-lg-0 me-lg-4 me-lg-0 me-md-5 mt-lg-0 mt-md-3 me-sm-5 me-5">
                            <i class="bi bi-bell-fill notication-bell-button" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false"></i>
                            @if (isNotify)
                            {
                                <span class="notification-badge">@notifyCount</span>
                            }
                            <ul class="dropdown-menu notification-dropdown">
                                <div class="list-group">
                                    @foreach (var notification in notificationList)
                                    {
                                        <a @onclick=@(() => OpenNotificationDetail(notification)) class="list-group-item list-group-item-action">
                                            <div class="d-flex w-100 justify-content-between">
                                                <small class="text-muted">@notification.DateTime</small>
                                            </div>
                                            <p class="mb-1">@notification.Message</p>
                                            <i @onclick=@(() => RemoveNotification(notification)) @onclick:stopPropagation class="bi bi-x notification-delete-button"></i>
                                            @* <small class="text-muted">And some muted small print.</small> *@
                                        </a>
                                    }
                                    @if (notificationList.Count == 0)
                                    {
                                        <div class="d-block text-center">
                                            <small>There is no any notification.</small>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="d-block text-center">
                                            <small @onclick=@(() => ClearNotifications())>Clear notifications</small>
                                        </div>
                                    }
                                </div>
                            </ul>

                        </a>
                        <div class="dropdown text-end">
                            <a href="#" class="d-block link-dark text-decoration-none dropdown-toggle" id="dropdownUser1" data-bs-toggle="dropdown" aria-expanded="false">
                                @if (Model is not null && Model.UserProfileImageUrl is not null)
                                {
                                    <img src="@Model.UserProfileImageUrl" alt="@Model.UserName" width="32" height="32" class="rounded-circle">
                                }
                                else
                                {
                                    @if (Model is not null && Model.Id is not null)
                                    {
                                        <span class="no-image-user-profile-top-nav-menu" style="background:#@(Model.Id.Substring(0,6));">
                                            @Model.UserName.ToUpper()[0]
                                        </span>
                                    }
                                }
                            </a>
                            <ul class="dropdown-menu text-small" aria-labelledby="dropdownUser1">
                                <li><a class="dropdown-item" href="/user/@(@UserName)"><i class="bi bi-person"></i> User Profile</a></li>
                                <li><a class="dropdown-item" href="/user/settings"><i class="bi bi-gear"></i> User Settings</a></li>
                                <li>
                                    <a class="dropdown-item" @onclick="ChangeThemeType">
                                        @if (themeType == "light")
                                        {
                                            <i class="bi bi-moon"></i>

                                            @(" Dark Theme")
                                        }
                                        else
                                        {
                                            <i class="bi bi-sun"></i>

                                            @(" Light Theme")
                                        }
                                    </a>
                                </li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" @onclick="Logout"><i class="bi bi-box-arrow-right"></i> Sign out</a></li>
                            </ul>
                        </div>
                    </Authorized>
                </AuthorizeView>
            }
            else
            {
                <div class="spinner-border loading-spinner-bg" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
            
        </div>
    </div>
</header>

@if(showChat)
{
    <ChatBox OpenCreateChatBox=openCreateChat UserName=@createChatUserName HubConnection=@hubConnection></ChatBox>
}


@code {
    UserInfoVM? Model;

    ChatBox? chatBox;
    private string? createChatUserName;
    private bool openCreateChat;

    [CascadingParameter]



    public string UserName { get; set; }

    [Inject]
    public IUserService UserService { get; set; }

    [Inject]
    public RefreshStateService RefreshStateService { get; set; }

    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public IAuthenticationService AuthenticationService { get; set; }

    [Inject]
    LocalStorageService localStorage { get; set; }

    [Inject]
    ILogoService? logoService { get; set; }

    private bool showChat;

    private LogoVM? logo;

    private string themeType;

    List<NotificationVM> notificationList = new List<NotificationVM>();
    bool isNotify;
    int notifyCount;

    // hub ---------------------------------------------------------------

    private HubConnection? hubConnection;

    private HubConnection? hubNotificationConnection;
    private HubConnection? hubTrackConnection;

    private string GetImageUrl(string userId)
    {
        return $"{Configuration["ApiBaseUrl"]}/file/images/user-profile/{userId}";
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            if (logoService is not null)
            {
                logo = await logoService.GetLogo();
            }

            var authState = await authenticationStateTask;
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                UserName = user.Identity.Name;
                await ConnectChatHubWhenLogin();
                await ConnectNotificationHubWhenLogin();
                await ConnectTrackHubWhenLogin();
                Model = await UserService.GetUserInfo(UserName);
                await CheckUserImageProfile();
            }

            RefreshStateService.OpenChatBox += OpenChatBox;
            RefreshStateService.ConnectChatHubWhenLogin = ConnectChatHubWhenLogin;

            await ChangeThemeJS();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected async override Task OnParametersSetAsync()
    {
        if(Model is null)
        {
            var authState = await authenticationStateTask;
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                UserName = user.Identity.Name;
                await ConnectChatHubWhenLogin();
                await ConnectNotificationHubWhenLogin();
                await ConnectTrackHubWhenLogin();
                Model = await UserService.GetUserInfo(UserName);
                await CheckUserImageProfile();
            }

            RefreshStateService.OpenChatBox += OpenChatBox;
            RefreshStateService.ConnectChatHubWhenLogin = ConnectChatHubWhenLogin;
        }

        await base.OnParametersSetAsync();
    }

    private async Task CheckUserImageProfile()
    {
        if (Model is not null)
        {

            if (Model.Id is not null)
            {
                string imageUrl = GetImageUrl(Model.Id.ToString());

                bool isExist = await UrlExists(imageUrl);
                if (isExist)
                {
                    Model.UserProfileImageUrl = imageUrl;
                }
                else
                {
                    Model.UserProfileImageUrl = null;
                }
            }
            else
            {

            }
        }
    }


    protected void GoToLogin()
    {
        NavigationManager.NavigateTo("login/");
    }

    protected void GoToRegister()
    {
        NavigationManager.NavigateTo("register/");
    }

    protected async void Logout()
    {
        NavigationManager.NavigateTo("login/", true);
        await AuthenticationService.Logout();
        Model = null;
    }

    private async void ShowChat()
    {
        showChat = !showChat;

        openCreateChat = false;
        createChatUserName = null;

        await InvokeAsync(StateHasChanged);
    }

    private async Task OpenChatBox(string userName) {
        showChat = true;
        openCreateChat = true;
        createChatUserName = userName;

        await InvokeAsync(StateHasChanged);
    }

    private async Task ConnectChatHubWhenLogin()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;

            var selfUser = await UserService.GetUserInfo(UserName!);

            string token = await localStorage.GetItem("token");

            hubConnection = new HubConnectionBuilder()
            .WithUrl(
                $"{Configuration["HubBaseUrl"]}/chat",
                o =>
                {
                    o.AccessTokenProvider = () => Task.FromResult<string?>(token);
                    o.Url = new Uri($"{Configuration["HubBaseUrl"]}/chat?username={UserName}&userId={selfUser.Id}");
                    o.SkipNegotiation = true;
                    o.Transports = Microsoft.AspNetCore.Http.Connections.HttpTransportType.WebSockets;
                }
            ).Build();

            hubConnection.Closed += async (error) =>
            {
                if (error != null)
                {
                    // hata meydana gelirse yeniden bağlamı işini burada yap
                }
                else
                {
                    // kapat
                    await hubConnection.StopAsync();
                }
            };

            hubConnection.On<string, string>("ReceiveChatRequest", async (fromUser, message) =>
            {
                if (message != null)
                {

                }
                await InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();
        }
    }

    private async Task ConnectNotificationHubWhenLogin()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;

            var selfUser = await UserService.GetUserInfo(UserName!);

            string token = await localStorage.GetItem("token");

            hubNotificationConnection = new HubConnectionBuilder()
            .WithUrl(
                $"{Configuration["HubBaseUrl"]}/notification",
                o =>
                {
                    o.AccessTokenProvider = () => Task.FromResult<string?>(token);
                    o.Url = new Uri($"{Configuration["HubBaseUrl"]}/notification?username={UserName}&userId={selfUser.Id}");
                    o.SkipNegotiation = true;
                    o.Transports = Microsoft.AspNetCore.Http.Connections.HttpTransportType.WebSockets;
                }
            ).Build();

            hubNotificationConnection.Closed += async (error) =>
            {
                if (error != null)
                {
                    // hata meydana gelirse yeniden bağlamı işini burada yap
                }
                else
                {
                    // kapat
                    await hubNotificationConnection.StopAsync();
                }
            };

            hubNotificationConnection.On<string>("ReceiveNotification", async (notifications) =>
            {
                if (notifications != null)
                {
                    notificationList.Clear();
                    List<string>? notificationsAsString = JsonSerializer.Deserialize<List<string>>(notifications);
                    notifyCount = 0;
                    if (notificationsAsString is not null && notificationsAsString.Count > 0)
                    {
                        foreach (var notification in notificationsAsString)
                        {
                            NotificationVM? notificationVM = JsonSerializer.Deserialize<NotificationVM>(notification);
                            if(notificationVM is not null)
                            {
                                notificationList.Add(notificationVM);
                                if(!notificationVM.IsRead)
                                {
                                    notifyCount += 1;
                                }
                            }
                        }
                        if (notifyCount > 0)
                        {
                            isNotify = true;
                        }
                        else
                        {
                            isNotify = false;
                        }
                    }
                }
                else
                {
                    notifyCount = 0;
                    notificationList.Clear();
                    isNotify = false;
                }

                await InvokeAsync(StateHasChanged);
            });

            await hubNotificationConnection.StartAsync();
        }
    }

    private async Task ConnectTrackHubWhenLogin()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;

            var selfUser = await UserService.GetUserInfo(UserName!);

            string group = "forum";

            string token = await localStorage.GetItem("token");

            hubTrackConnection = new HubConnectionBuilder()
             .WithUrl(
                 $"{Configuration["HubBaseUrl"]}/track",
                 o =>
                 {
                     o.AccessTokenProvider = () => Task.FromResult<string?>(token);
                     o.Url = new Uri($"{Configuration["HubBaseUrl"]}/track?username={UserName}&group={group}");
                     o.SkipNegotiation = true;
                     o.Transports = Microsoft.AspNetCore.Http.Connections.HttpTransportType.WebSockets;
                 }
             )
             .Build();

            hubTrackConnection.Closed += async (error) =>
            {
                if (error != null)
                {
                    // hata meydana gelirse yeniden bağlamı işini burada yap
                }
                else
                {
                    // kapat
                    await hubTrackConnection.StopAsync();
                }
            };

            await hubTrackConnection.StartAsync();

            if (RefreshStateService.ConnectChatHubWhenLogin != null)
            {
                await RefreshStateService.ConnectChatHubWhenLogin.Invoke();
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
        }
        if (hubNotificationConnection != null)
        {
            await hubNotificationConnection.StopAsync();
            await hubNotificationConnection.DisposeAsync();
        }
        if (hubTrackConnection != null)
        {
            await hubTrackConnection.StopAsync();
            await hubTrackConnection.DisposeAsync();
        }
    }


    private async Task<bool> UrlExists(string url)
    {
        try
        {
            var response = await Http.GetAsync(url);
            return response.IsSuccessStatusCode;
        }
        catch
        {
            return false;
        }
    }

    private async Task ChangeThemeType()
    {
        if(localStorage is not null)
        {
            bool isExist = await localStorage.ContainsKey("theme");
            if (!isExist)
            {
                await localStorage.AddItem("theme", "dark");
            }
            else
            {
                string theme = await localStorage.GetItem("theme");
                if(theme == "light")
                {
                    await localStorage.AddItem("theme", "dark");
                }
                if (theme == "dark")
                {
                    await localStorage.AddItem("theme", "light");
                }
            }

            await ChangeThemeJS();
        }
    }


    private async Task ChangeThemeJS()
    {
        if (_jSRuntime is not IJSInProcessRuntime)
        {
            return;
        }
        bool isExist = await localStorage.ContainsKey("theme");
        if (!isExist)
        {
            themeType = "light";
            await _jSRuntime.InvokeAsync<string>("setTheme", themeType);
        }
        else
        {
            string theme = await localStorage.GetItem("theme");
            await _jSRuntime.InvokeAsync<string>("setTheme", theme);
            themeType = theme;
        }
    }

    private async Task OpenNotificationDetail(NotificationVM notification)
    {
        if(hubNotificationConnection is not null)
        {

            if (notification.Type == NotificationTypeVM.RepliedHeading && notification.Heading is not null && notification.Category is not null)
            {
                var category = notification.Category;
                var heading = notification.Heading;

                await hubNotificationConnection.SendAsync("ReadNotification", notification.Id);

                NavigationManager.NavigateTo($"category/{category.Name.ToFriendlyUrl()}-{category.CategoryId}/{heading.Id.EncodeGuidToBase64Url()}/{heading.Title.ToFriendlyUrl()}/");
            }
        }
    }

    private async Task RemoveNotification(NotificationVM notification)
    {
        if (hubNotificationConnection is not null)
        {
            await hubNotificationConnection.SendAsync("RemoveNotification", notification.Id);
        }
    }

    private async Task ClearNotifications()
    {
        if (hubNotificationConnection is not null)
        {
            await hubNotificationConnection.SendAsync("ClearNotifications");
        }
    }

    public void AddToast()
    {
        ToastService.AddNotification(new Models.Toast.ToastNotification
        {
            Title = "Successfully",
            Type = ToastTypeVM.Success,
            Message = "That's great",
            RightText = DateTime.UtcNow.ToString()
        });
    }
}
